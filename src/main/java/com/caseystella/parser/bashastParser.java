// $ANTLR 3.5.1 com/caseystella/parser/bashast.g 2014-02-14 08:36:17

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
Copyright 2010 Nathan Eloe

This file is part of libbash.

libbash is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

libbash is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with libbash.  If not, see <http://www.gnu.org/licenses/>.
**/
@SuppressWarnings("all")
public class bashastParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ALPHANUM", "AMP", "ARG", "ARITHMETIC_CONDITION", 
		"ARITH_ASSIGN", "ARRAY", "AT", "BANG", "BLANK", "BOP", "BRACE", "BRACE_EXP", 
		"BUILTIN_TEST", "CARET", "CASE", "CASE_PATTERN", "CHARACTER_CLASS", "COLLATING_SYMBOL", 
		"COLON", "COMMA", "COMMAND", "COMMAND_SUB", "COMMENT", "COMPOUND_ARITH", 
		"COMPOUND_COND", "CONTINUE_LINE", "CURRSHELL", "DEC", "DIGIT", "DO", "DOLLAR", 
		"DONE", "DOT", "DOTDOT", "DOUBLE_QUOTED_STRING", "DOUBLE_SEMIC", "ELIF", 
		"ELSE", "EOL", "EQUALS", "EQUIVALENCE_CLASS", "ESAC", "ESC_CHAR", "ESC_GT", 
		"ESC_LPAREN", "ESC_LT", "ESC_RPAREN", "EXP", "EXPORT", "FI", "FILE_DESCRIPTOR", 
		"FILE_DESCRIPTOR_MOVE", "FNAME", "FOR", "FOR_COND", "FOR_INIT", "FOR_MOD", 
		"FUNCTION", "GEQ", "GT", "HERE_STRING_OP", "IF", "IN", "INC", "KEYWORD_TEST", 
		"LBRACE", "LEQ", "LET", "LETTER", "LIST", "LIST_EXPAND", "LLPAREN", "LOGICAND", 
		"LOGICOR", "LPAREN", "LSHIFT", "LSQUARE", "LT", "MATCH_ANY", "MATCH_ANY_EXCEPT", 
		"MATCH_AT_LEAST_ONE", "MATCH_AT_MOST_ONE", "MATCH_EXACTLY_ONE", "MATCH_NONE", 
		"MATCH_PATTERN", "MINUS", "NAME", "NEGATION", "NQCHAR_NO_ALPHANUM", "NQSTR", 
		"NUMBER", "OFFSET", "OP", "PCT", "PCTPCT", "PIPE", "PLUS", "POST_DECR", 
		"POST_INCR", "POUND", "POUNDPOUND", "PRE_DECR", "PRE_INCR", "PROC_SUB", 
		"QMARK", "QUOTE", "RBRACE", "REDIR", "REPLACE_ALL", "REPLACE_FIRST", "REPLACE_LAST", 
		"RPAREN", "RRPAREN", "RSHIFT", "RSQUARE", "SELECT", "SEMIC", "SINGLE_QUOTED_STRING", 
		"SLASH", "SQUOTE", "STRING", "SUBSHELL", "TEST", "THEN", "TICK", "TILDE", 
		"TIME", "TIMES", "UNTIL", "UOP", "VAR_REF", "WHILE", "WORDOP", "'-p'", 
		"'_'"
	};
	public static final int EOF=-1;
	public static final int T__137=137;
	public static final int T__138=138;
	public static final int ALPHANUM=4;
	public static final int AMP=5;
	public static final int ARG=6;
	public static final int ARITHMETIC_CONDITION=7;
	public static final int ARITH_ASSIGN=8;
	public static final int ARRAY=9;
	public static final int AT=10;
	public static final int BANG=11;
	public static final int BLANK=12;
	public static final int BOP=13;
	public static final int BRACE=14;
	public static final int BRACE_EXP=15;
	public static final int BUILTIN_TEST=16;
	public static final int CARET=17;
	public static final int CASE=18;
	public static final int CASE_PATTERN=19;
	public static final int CHARACTER_CLASS=20;
	public static final int COLLATING_SYMBOL=21;
	public static final int COLON=22;
	public static final int COMMA=23;
	public static final int COMMAND=24;
	public static final int COMMAND_SUB=25;
	public static final int COMMENT=26;
	public static final int COMPOUND_ARITH=27;
	public static final int COMPOUND_COND=28;
	public static final int CONTINUE_LINE=29;
	public static final int CURRSHELL=30;
	public static final int DEC=31;
	public static final int DIGIT=32;
	public static final int DO=33;
	public static final int DOLLAR=34;
	public static final int DONE=35;
	public static final int DOT=36;
	public static final int DOTDOT=37;
	public static final int DOUBLE_QUOTED_STRING=38;
	public static final int DOUBLE_SEMIC=39;
	public static final int ELIF=40;
	public static final int ELSE=41;
	public static final int EOL=42;
	public static final int EQUALS=43;
	public static final int EQUIVALENCE_CLASS=44;
	public static final int ESAC=45;
	public static final int ESC_CHAR=46;
	public static final int ESC_GT=47;
	public static final int ESC_LPAREN=48;
	public static final int ESC_LT=49;
	public static final int ESC_RPAREN=50;
	public static final int EXP=51;
	public static final int EXPORT=52;
	public static final int FI=53;
	public static final int FILE_DESCRIPTOR=54;
	public static final int FILE_DESCRIPTOR_MOVE=55;
	public static final int FNAME=56;
	public static final int FOR=57;
	public static final int FOR_COND=58;
	public static final int FOR_INIT=59;
	public static final int FOR_MOD=60;
	public static final int FUNCTION=61;
	public static final int GEQ=62;
	public static final int GT=63;
	public static final int HERE_STRING_OP=64;
	public static final int IF=65;
	public static final int IN=66;
	public static final int INC=67;
	public static final int KEYWORD_TEST=68;
	public static final int LBRACE=69;
	public static final int LEQ=70;
	public static final int LET=71;
	public static final int LETTER=72;
	public static final int LIST=73;
	public static final int LIST_EXPAND=74;
	public static final int LLPAREN=75;
	public static final int LOGICAND=76;
	public static final int LOGICOR=77;
	public static final int LPAREN=78;
	public static final int LSHIFT=79;
	public static final int LSQUARE=80;
	public static final int LT=81;
	public static final int MATCH_ANY=82;
	public static final int MATCH_ANY_EXCEPT=83;
	public static final int MATCH_AT_LEAST_ONE=84;
	public static final int MATCH_AT_MOST_ONE=85;
	public static final int MATCH_EXACTLY_ONE=86;
	public static final int MATCH_NONE=87;
	public static final int MATCH_PATTERN=88;
	public static final int MINUS=89;
	public static final int NAME=90;
	public static final int NEGATION=91;
	public static final int NQCHAR_NO_ALPHANUM=92;
	public static final int NQSTR=93;
	public static final int NUMBER=94;
	public static final int OFFSET=95;
	public static final int OP=96;
	public static final int PCT=97;
	public static final int PCTPCT=98;
	public static final int PIPE=99;
	public static final int PLUS=100;
	public static final int POST_DECR=101;
	public static final int POST_INCR=102;
	public static final int POUND=103;
	public static final int POUNDPOUND=104;
	public static final int PRE_DECR=105;
	public static final int PRE_INCR=106;
	public static final int PROC_SUB=107;
	public static final int QMARK=108;
	public static final int QUOTE=109;
	public static final int RBRACE=110;
	public static final int REDIR=111;
	public static final int REPLACE_ALL=112;
	public static final int REPLACE_FIRST=113;
	public static final int REPLACE_LAST=114;
	public static final int RPAREN=115;
	public static final int RRPAREN=116;
	public static final int RSHIFT=117;
	public static final int RSQUARE=118;
	public static final int SELECT=119;
	public static final int SEMIC=120;
	public static final int SINGLE_QUOTED_STRING=121;
	public static final int SLASH=122;
	public static final int SQUOTE=123;
	public static final int STRING=124;
	public static final int SUBSHELL=125;
	public static final int TEST=126;
	public static final int THEN=127;
	public static final int TICK=128;
	public static final int TILDE=129;
	public static final int TIME=130;
	public static final int TIMES=131;
	public static final int UNTIL=132;
	public static final int UOP=133;
	public static final int VAR_REF=134;
	public static final int WHILE=135;
	public static final int WORDOP=136;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public bashastParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public bashastParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return bashastParser.tokenNames; }
	@Override public String getGrammarFileName() { return "com/caseystella/parser/bashast.g"; }


	public static class start_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "start"
	// com/caseystella/parser/bashast.g:81:1: start : ( flcomment ! EOL !)? ( EOL !)* list ^;
	public final bashastParser.start_return start() throws RecognitionException {
		bashastParser.start_return retval = new bashastParser.start_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token EOL2=null;
		Token EOL3=null;
		ParserRuleReturnScope flcomment1 =null;
		ParserRuleReturnScope list4 =null;

		CommonTree EOL2_tree=null;
		CommonTree EOL3_tree=null;

		try {
			// com/caseystella/parser/bashast.g:81:7: ( ( flcomment ! EOL !)? ( EOL !)* list ^)
			// com/caseystella/parser/bashast.g:81:9: ( flcomment ! EOL !)? ( EOL !)* list ^
			{
			root_0 = (CommonTree)adaptor.nil();


			// com/caseystella/parser/bashast.g:81:9: ( flcomment ! EOL !)?
			int alt1=2;
			int LA1_0 = input.LA(1);
			if ( (LA1_0==BLANK) ) {
				int LA1_1 = input.LA(2);
				if ( (LA1_1==POUND) ) {
					alt1=1;
				}
			}
			else if ( (LA1_0==POUND) ) {
				alt1=1;
			}
			switch (alt1) {
				case 1 :
					// com/caseystella/parser/bashast.g:81:10: flcomment ! EOL !
					{
					pushFollow(FOLLOW_flcomment_in_start254);
					flcomment1=flcomment();
					state._fsp--;
					if (state.failed) return retval;
					EOL2=(Token)match(input,EOL,FOLLOW_EOL_in_start257); if (state.failed) return retval;
					}
					break;

			}

			// com/caseystella/parser/bashast.g:81:31: ( EOL !)*
			loop2:
			while (true) {
				int alt2=2;
				int LA2_0 = input.LA(1);
				if ( (LA2_0==EOL) ) {
					alt2=1;
				}

				switch (alt2) {
				case 1 :
					// com/caseystella/parser/bashast.g:81:31: EOL !
					{
					EOL3=(Token)match(input,EOL,FOLLOW_EOL_in_start262); if (state.failed) return retval;
					}
					break;

				default :
					break loop2;
				}
			}

			pushFollow(FOLLOW_list_in_start266);
			list4=list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(list4.getTree(), root_0);
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "start"


	public static class flcomment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "flcomment"
	// com/caseystella/parser/bashast.g:83:1: flcomment : ( BLANK )? '#' ( commentpart )* ;
	public final bashastParser.flcomment_return flcomment() throws RecognitionException {
		bashastParser.flcomment_return retval = new bashastParser.flcomment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK5=null;
		Token char_literal6=null;
		ParserRuleReturnScope commentpart7 =null;

		CommonTree BLANK5_tree=null;
		CommonTree char_literal6_tree=null;

		try {
			// com/caseystella/parser/bashast.g:84:2: ( ( BLANK )? '#' ( commentpart )* )
			// com/caseystella/parser/bashast.g:84:4: ( BLANK )? '#' ( commentpart )*
			{
			root_0 = (CommonTree)adaptor.nil();


			// com/caseystella/parser/bashast.g:84:4: ( BLANK )?
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==BLANK) ) {
				alt3=1;
			}
			switch (alt3) {
				case 1 :
					// com/caseystella/parser/bashast.g:84:4: BLANK
					{
					BLANK5=(Token)match(input,BLANK,FOLLOW_BLANK_in_flcomment277); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BLANK5_tree = (CommonTree)adaptor.create(BLANK5);
					adaptor.addChild(root_0, BLANK5_tree);
					}

					}
					break;

			}

			char_literal6=(Token)match(input,POUND,FOLLOW_POUND_in_flcomment280); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			char_literal6_tree = (CommonTree)adaptor.create(char_literal6);
			adaptor.addChild(root_0, char_literal6_tree);
			}

			// com/caseystella/parser/bashast.g:84:15: ( commentpart )*
			loop4:
			while (true) {
				int alt4=2;
				int LA4_0 = input.LA(1);
				if ( (LA4_0==ARITH_ASSIGN||(LA4_0 >= AT && LA4_0 <= BOP)||(LA4_0 >= CARET && LA4_0 <= CASE)||(LA4_0 >= COLON && LA4_0 <= COMMA)||(LA4_0 >= DEC && LA4_0 <= DOTDOT)||(LA4_0 >= DOUBLE_SEMIC && LA4_0 <= ELSE)||LA4_0==EQUALS||(LA4_0 >= ESAC && LA4_0 <= ESC_CHAR)||LA4_0==FI||LA4_0==FOR||LA4_0==FUNCTION||LA4_0==GT||(LA4_0 >= IF && LA4_0 <= INC)||LA4_0==LBRACE||LA4_0==LETTER||LA4_0==LLPAREN||LA4_0==LPAREN||(LA4_0 >= LSQUARE && LA4_0 <= LT)||(LA4_0 >= MINUS && LA4_0 <= NAME)||(LA4_0 >= NQSTR && LA4_0 <= NUMBER)||(LA4_0 >= PCT && LA4_0 <= PLUS)||(LA4_0 >= QMARK && LA4_0 <= RBRACE)||(LA4_0 >= RPAREN && LA4_0 <= RRPAREN)||(LA4_0 >= RSQUARE && LA4_0 <= SEMIC)||(LA4_0 >= SLASH && LA4_0 <= SQUOTE)||(LA4_0 >= TEST && LA4_0 <= UOP)||LA4_0==WHILE||LA4_0==138) ) {
					alt4=1;
				}

				switch (alt4) {
				case 1 :
					// com/caseystella/parser/bashast.g:84:15: commentpart
					{
					pushFollow(FOLLOW_commentpart_in_flcomment282);
					commentpart7=commentpart();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, commentpart7.getTree());

					}
					break;

				default :
					break loop4;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "flcomment"


	public static class commentpart_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "commentpart"
	// com/caseystella/parser/bashast.g:85:1: commentpart : ( nqstr | BLANK | LBRACE | RBRACE | SEMIC | DOUBLE_SEMIC | TICK | LPAREN | RPAREN | LLPAREN | RRPAREN | PIPE | COMMA | SQUOTE | QUOTE | LT | GT );
	public final bashastParser.commentpart_return commentpart() throws RecognitionException {
		bashastParser.commentpart_return retval = new bashastParser.commentpart_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK9=null;
		Token LBRACE10=null;
		Token RBRACE11=null;
		Token SEMIC12=null;
		Token DOUBLE_SEMIC13=null;
		Token TICK14=null;
		Token LPAREN15=null;
		Token RPAREN16=null;
		Token LLPAREN17=null;
		Token RRPAREN18=null;
		Token PIPE19=null;
		Token COMMA20=null;
		Token SQUOTE21=null;
		Token QUOTE22=null;
		Token LT23=null;
		Token GT24=null;
		ParserRuleReturnScope nqstr8 =null;

		CommonTree BLANK9_tree=null;
		CommonTree LBRACE10_tree=null;
		CommonTree RBRACE11_tree=null;
		CommonTree SEMIC12_tree=null;
		CommonTree DOUBLE_SEMIC13_tree=null;
		CommonTree TICK14_tree=null;
		CommonTree LPAREN15_tree=null;
		CommonTree RPAREN16_tree=null;
		CommonTree LLPAREN17_tree=null;
		CommonTree RRPAREN18_tree=null;
		CommonTree PIPE19_tree=null;
		CommonTree COMMA20_tree=null;
		CommonTree SQUOTE21_tree=null;
		CommonTree QUOTE22_tree=null;
		CommonTree LT23_tree=null;
		CommonTree GT24_tree=null;

		try {
			// com/caseystella/parser/bashast.g:86:2: ( nqstr | BLANK | LBRACE | RBRACE | SEMIC | DOUBLE_SEMIC | TICK | LPAREN | RPAREN | LLPAREN | RRPAREN | PIPE | COMMA | SQUOTE | QUOTE | LT | GT )
			int alt5=17;
			switch ( input.LA(1) ) {
			case ARITH_ASSIGN:
			case AT:
			case BANG:
			case BOP:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DIGIT:
			case DO:
			case DOLLAR:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LETTER:
			case LSQUARE:
			case MINUS:
			case NAME:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case PLUS:
			case QMARK:
			case RSQUARE:
			case SELECT:
			case SLASH:
			case TEST:
			case THEN:
			case TILDE:
			case TIME:
			case TIMES:
			case UNTIL:
			case UOP:
			case WHILE:
			case 138:
				{
				alt5=1;
				}
				break;
			case TICK:
				{
				int LA5_8 = input.LA(2);
				if ( (synpred5_bashast()) ) {
					alt5=1;
				}
				else if ( (synpred11_bashast()) ) {
					alt5=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 5, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case QUOTE:
				{
				int LA5_9 = input.LA(2);
				if ( (synpred5_bashast()) ) {
					alt5=1;
				}
				else if ( (synpred19_bashast()) ) {
					alt5=15;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 5, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQUOTE:
				{
				int LA5_10 = input.LA(2);
				if ( (synpred5_bashast()) ) {
					alt5=1;
				}
				else if ( (synpred18_bashast()) ) {
					alt5=14;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 5, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BLANK:
				{
				alt5=2;
				}
				break;
			case LBRACE:
				{
				alt5=3;
				}
				break;
			case RBRACE:
				{
				alt5=4;
				}
				break;
			case SEMIC:
				{
				alt5=5;
				}
				break;
			case DOUBLE_SEMIC:
				{
				alt5=6;
				}
				break;
			case LPAREN:
				{
				alt5=8;
				}
				break;
			case RPAREN:
				{
				alt5=9;
				}
				break;
			case LLPAREN:
				{
				alt5=10;
				}
				break;
			case RRPAREN:
				{
				alt5=11;
				}
				break;
			case PIPE:
				{
				alt5=12;
				}
				break;
			case COMMA:
				{
				alt5=13;
				}
				break;
			case LT:
				{
				alt5=16;
				}
				break;
			case GT:
				{
				alt5=17;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 5, 0, input);
				throw nvae;
			}
			switch (alt5) {
				case 1 :
					// com/caseystella/parser/bashast.g:86:4: nqstr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_nqstr_in_commentpart291);
					nqstr8=nqstr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, nqstr8.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:86:10: BLANK
					{
					root_0 = (CommonTree)adaptor.nil();


					BLANK9=(Token)match(input,BLANK,FOLLOW_BLANK_in_commentpart293); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BLANK9_tree = (CommonTree)adaptor.create(BLANK9);
					adaptor.addChild(root_0, BLANK9_tree);
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:86:16: LBRACE
					{
					root_0 = (CommonTree)adaptor.nil();


					LBRACE10=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_commentpart295); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LBRACE10_tree = (CommonTree)adaptor.create(LBRACE10);
					adaptor.addChild(root_0, LBRACE10_tree);
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:86:23: RBRACE
					{
					root_0 = (CommonTree)adaptor.nil();


					RBRACE11=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_commentpart297); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RBRACE11_tree = (CommonTree)adaptor.create(RBRACE11);
					adaptor.addChild(root_0, RBRACE11_tree);
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:86:30: SEMIC
					{
					root_0 = (CommonTree)adaptor.nil();


					SEMIC12=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_commentpart299); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SEMIC12_tree = (CommonTree)adaptor.create(SEMIC12);
					adaptor.addChild(root_0, SEMIC12_tree);
					}

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:86:36: DOUBLE_SEMIC
					{
					root_0 = (CommonTree)adaptor.nil();


					DOUBLE_SEMIC13=(Token)match(input,DOUBLE_SEMIC,FOLLOW_DOUBLE_SEMIC_in_commentpart301); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOUBLE_SEMIC13_tree = (CommonTree)adaptor.create(DOUBLE_SEMIC13);
					adaptor.addChild(root_0, DOUBLE_SEMIC13_tree);
					}

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:86:49: TICK
					{
					root_0 = (CommonTree)adaptor.nil();


					TICK14=(Token)match(input,TICK,FOLLOW_TICK_in_commentpart303); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TICK14_tree = (CommonTree)adaptor.create(TICK14);
					adaptor.addChild(root_0, TICK14_tree);
					}

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:86:54: LPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					LPAREN15=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_commentpart305); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN15_tree = (CommonTree)adaptor.create(LPAREN15);
					adaptor.addChild(root_0, LPAREN15_tree);
					}

					}
					break;
				case 9 :
					// com/caseystella/parser/bashast.g:86:61: RPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					RPAREN16=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_commentpart307); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN16_tree = (CommonTree)adaptor.create(RPAREN16);
					adaptor.addChild(root_0, RPAREN16_tree);
					}

					}
					break;
				case 10 :
					// com/caseystella/parser/bashast.g:86:68: LLPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					LLPAREN17=(Token)match(input,LLPAREN,FOLLOW_LLPAREN_in_commentpart309); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LLPAREN17_tree = (CommonTree)adaptor.create(LLPAREN17);
					adaptor.addChild(root_0, LLPAREN17_tree);
					}

					}
					break;
				case 11 :
					// com/caseystella/parser/bashast.g:86:76: RRPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					RRPAREN18=(Token)match(input,RRPAREN,FOLLOW_RRPAREN_in_commentpart311); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RRPAREN18_tree = (CommonTree)adaptor.create(RRPAREN18);
					adaptor.addChild(root_0, RRPAREN18_tree);
					}

					}
					break;
				case 12 :
					// com/caseystella/parser/bashast.g:86:84: PIPE
					{
					root_0 = (CommonTree)adaptor.nil();


					PIPE19=(Token)match(input,PIPE,FOLLOW_PIPE_in_commentpart313); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PIPE19_tree = (CommonTree)adaptor.create(PIPE19);
					adaptor.addChild(root_0, PIPE19_tree);
					}

					}
					break;
				case 13 :
					// com/caseystella/parser/bashast.g:86:89: COMMA
					{
					root_0 = (CommonTree)adaptor.nil();


					COMMA20=(Token)match(input,COMMA,FOLLOW_COMMA_in_commentpart315); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA20_tree = (CommonTree)adaptor.create(COMMA20);
					adaptor.addChild(root_0, COMMA20_tree);
					}

					}
					break;
				case 14 :
					// com/caseystella/parser/bashast.g:86:95: SQUOTE
					{
					root_0 = (CommonTree)adaptor.nil();


					SQUOTE21=(Token)match(input,SQUOTE,FOLLOW_SQUOTE_in_commentpart317); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQUOTE21_tree = (CommonTree)adaptor.create(SQUOTE21);
					adaptor.addChild(root_0, SQUOTE21_tree);
					}

					}
					break;
				case 15 :
					// com/caseystella/parser/bashast.g:86:102: QUOTE
					{
					root_0 = (CommonTree)adaptor.nil();


					QUOTE22=(Token)match(input,QUOTE,FOLLOW_QUOTE_in_commentpart319); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUOTE22_tree = (CommonTree)adaptor.create(QUOTE22);
					adaptor.addChild(root_0, QUOTE22_tree);
					}

					}
					break;
				case 16 :
					// com/caseystella/parser/bashast.g:86:108: LT
					{
					root_0 = (CommonTree)adaptor.nil();


					LT23=(Token)match(input,LT,FOLLOW_LT_in_commentpart321); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LT23_tree = (CommonTree)adaptor.create(LT23);
					adaptor.addChild(root_0, LT23_tree);
					}

					}
					break;
				case 17 :
					// com/caseystella/parser/bashast.g:86:111: GT
					{
					root_0 = (CommonTree)adaptor.nil();


					GT24=(Token)match(input,GT,FOLLOW_GT_in_commentpart323); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					GT24_tree = (CommonTree)adaptor.create(GT24);
					adaptor.addChild(root_0, GT24_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commentpart"


	public static class list_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "list"
	// com/caseystella/parser/bashast.g:87:1: list : list_level_2 ( BLANK )* ( ';' | '&' | EOL )? -> ^( LIST list_level_2 ) ;
	public final bashastParser.list_return list() throws RecognitionException {
		bashastParser.list_return retval = new bashastParser.list_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK26=null;
		Token char_literal27=null;
		Token char_literal28=null;
		Token EOL29=null;
		ParserRuleReturnScope list_level_225 =null;

		CommonTree BLANK26_tree=null;
		CommonTree char_literal27_tree=null;
		CommonTree char_literal28_tree=null;
		CommonTree EOL29_tree=null;
		RewriteRuleTokenStream stream_EOL=new RewriteRuleTokenStream(adaptor,"token EOL");
		RewriteRuleTokenStream stream_SEMIC=new RewriteRuleTokenStream(adaptor,"token SEMIC");
		RewriteRuleTokenStream stream_AMP=new RewriteRuleTokenStream(adaptor,"token AMP");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_list_level_2=new RewriteRuleSubtreeStream(adaptor,"rule list_level_2");

		try {
			// com/caseystella/parser/bashast.g:87:6: ( list_level_2 ( BLANK )* ( ';' | '&' | EOL )? -> ^( LIST list_level_2 ) )
			// com/caseystella/parser/bashast.g:87:8: list_level_2 ( BLANK )* ( ';' | '&' | EOL )?
			{
			pushFollow(FOLLOW_list_level_2_in_list330);
			list_level_225=list_level_2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_list_level_2.add(list_level_225.getTree());
			// com/caseystella/parser/bashast.g:87:21: ( BLANK )*
			loop6:
			while (true) {
				int alt6=2;
				int LA6_0 = input.LA(1);
				if ( (LA6_0==BLANK) ) {
					alt6=1;
				}

				switch (alt6) {
				case 1 :
					// com/caseystella/parser/bashast.g:87:21: BLANK
					{
					BLANK26=(Token)match(input,BLANK,FOLLOW_BLANK_in_list332); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK26);

					}
					break;

				default :
					break loop6;
				}
			}

			// com/caseystella/parser/bashast.g:87:28: ( ';' | '&' | EOL )?
			int alt7=4;
			switch ( input.LA(1) ) {
				case SEMIC:
					{
					alt7=1;
					}
					break;
				case AMP:
					{
					alt7=2;
					}
					break;
				case EOL:
					{
					alt7=3;
					}
					break;
			}
			switch (alt7) {
				case 1 :
					// com/caseystella/parser/bashast.g:87:29: ';'
					{
					char_literal27=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_list336); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMIC.add(char_literal27);

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:87:33: '&'
					{
					char_literal28=(Token)match(input,AMP,FOLLOW_AMP_in_list338); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AMP.add(char_literal28);

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:87:37: EOL
					{
					EOL29=(Token)match(input,EOL,FOLLOW_EOL_in_list340); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EOL.add(EOL29);

					}
					break;

			}

			// AST REWRITE
			// elements: list_level_2
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 87:43: -> ^( LIST list_level_2 )
			{
				// com/caseystella/parser/bashast.g:87:46: ^( LIST list_level_2 )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST, "LIST"), root_1);
				adaptor.addChild(root_1, stream_list_level_2.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "list"


	public static class clist_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "clist"
	// com/caseystella/parser/bashast.g:88:1: clist options {greedy=false; } : list_level_2 -> ^( LIST list_level_2 ) ;
	public final bashastParser.clist_return clist() throws RecognitionException {
		bashastParser.clist_return retval = new bashastParser.clist_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope list_level_230 =null;

		RewriteRuleSubtreeStream stream_list_level_2=new RewriteRuleSubtreeStream(adaptor,"rule list_level_2");

		try {
			// com/caseystella/parser/bashast.g:90:2: ( list_level_2 -> ^( LIST list_level_2 ) )
			// com/caseystella/parser/bashast.g:90:4: list_level_2
			{
			pushFollow(FOLLOW_list_level_2_in_clist365);
			list_level_230=list_level_2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_list_level_2.add(list_level_230.getTree());
			// AST REWRITE
			// elements: list_level_2
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 90:17: -> ^( LIST list_level_2 )
			{
				// com/caseystella/parser/bashast.g:90:20: ^( LIST list_level_2 )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST, "LIST"), root_1);
				adaptor.addChild(root_1, stream_list_level_2.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "clist"


	public static class list_level_1_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "list_level_1"
	// com/caseystella/parser/bashast.g:91:1: list_level_1 : ( function | pipeline ) ( ( BLANK !)* ( '&&' ^| '||' ^) ( BLANK !)* ( function | pipeline ) )* ;
	public final bashastParser.list_level_1_return list_level_1() throws RecognitionException {
		bashastParser.list_level_1_return retval = new bashastParser.list_level_1_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK33=null;
		Token string_literal34=null;
		Token string_literal35=null;
		Token BLANK36=null;
		ParserRuleReturnScope function31 =null;
		ParserRuleReturnScope pipeline32 =null;
		ParserRuleReturnScope function37 =null;
		ParserRuleReturnScope pipeline38 =null;

		CommonTree BLANK33_tree=null;
		CommonTree string_literal34_tree=null;
		CommonTree string_literal35_tree=null;
		CommonTree BLANK36_tree=null;

		try {
			// com/caseystella/parser/bashast.g:92:2: ( ( function | pipeline ) ( ( BLANK !)* ( '&&' ^| '||' ^) ( BLANK !)* ( function | pipeline ) )* )
			// com/caseystella/parser/bashast.g:92:4: ( function | pipeline ) ( ( BLANK !)* ( '&&' ^| '||' ^) ( BLANK !)* ( function | pipeline ) )*
			{
			root_0 = (CommonTree)adaptor.nil();


			// com/caseystella/parser/bashast.g:92:4: ( function | pipeline )
			int alt8=2;
			switch ( input.LA(1) ) {
			case FUNCTION:
				{
				int LA8_1 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case LSQUARE:
				{
				int LA8_2 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case QMARK:
				{
				int LA8_3 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case TIMES:
				{
				int LA8_4 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case PLUS:
				{
				int LA8_5 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case AT:
				{
				int LA8_6 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case BANG:
				{
				int LA8_7 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case DOLLAR:
				{
				int LA8_8 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case TICK:
				{
				int LA8_9 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case QUOTE:
				{
				int LA8_10 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case SQUOTE:
				{
				int LA8_11 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case DIGIT:
			case NUMBER:
				{
				int LA8_12 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case 138:
				{
				int LA8_13 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case NQSTR:
				{
				int LA8_14 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case EQUALS:
				{
				int LA8_15 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case PCT:
				{
				int LA8_16 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case PCTPCT:
				{
				int LA8_17 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case MINUS:
				{
				int LA8_18 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case DOT:
				{
				int LA8_19 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case DOTDOT:
				{
				int LA8_20 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case COLON:
				{
				int LA8_21 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case BOP:
				{
				int LA8_22 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case UOP:
				{
				int LA8_23 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case TEST:
				{
				int LA8_24 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case LETTER:
			case NAME:
				{
				int LA8_25 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case TILDE:
				{
				int LA8_26 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case INC:
				{
				int LA8_27 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case DEC:
				{
				int LA8_28 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case ARITH_ASSIGN:
				{
				int LA8_29 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case ESC_CHAR:
				{
				int LA8_30 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case CARET:
				{
				int LA8_31 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case TIME:
				{
				int LA8_32 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case SLASH:
				{
				int LA8_33 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case RSQUARE:
				{
				int LA8_34 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case BLANK:
			case EXPORT:
			case LBRACE:
			case LET:
			case LLPAREN:
			case LPAREN:
				{
				alt8=2;
				}
				break;
			case FOR:
				{
				int LA8_37 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case SELECT:
				{
				int LA8_39 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case IF:
				{
				int LA8_40 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case WHILE:
				{
				int LA8_41 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case UNTIL:
				{
				int LA8_42 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case CASE:
				{
				int LA8_43 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			case DO:
			case DONE:
			case ELIF:
			case ELSE:
			case ESAC:
			case FI:
			case IN:
			case THEN:
				{
				int LA8_44 = input.LA(2);
				if ( (synpred25_bashast()) ) {
					alt8=1;
				}
				else if ( (true) ) {
					alt8=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 8, 0, input);
				throw nvae;
			}
			switch (alt8) {
				case 1 :
					// com/caseystella/parser/bashast.g:92:5: function
					{
					pushFollow(FOLLOW_function_in_list_level_1382);
					function31=function();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, function31.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:92:14: pipeline
					{
					pushFollow(FOLLOW_pipeline_in_list_level_1384);
					pipeline32=pipeline();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pipeline32.getTree());

					}
					break;

			}

			// com/caseystella/parser/bashast.g:92:24: ( ( BLANK !)* ( '&&' ^| '||' ^) ( BLANK !)* ( function | pipeline ) )*
			loop13:
			while (true) {
				int alt13=2;
				alt13 = dfa13.predict(input);
				switch (alt13) {
				case 1 :
					// com/caseystella/parser/bashast.g:92:25: ( BLANK !)* ( '&&' ^| '||' ^) ( BLANK !)* ( function | pipeline )
					{
					// com/caseystella/parser/bashast.g:92:30: ( BLANK !)*
					loop9:
					while (true) {
						int alt9=2;
						int LA9_0 = input.LA(1);
						if ( (LA9_0==BLANK) ) {
							alt9=1;
						}

						switch (alt9) {
						case 1 :
							// com/caseystella/parser/bashast.g:92:30: BLANK !
							{
							BLANK33=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_1388); if (state.failed) return retval;
							}
							break;

						default :
							break loop9;
						}
					}

					// com/caseystella/parser/bashast.g:92:32: ( '&&' ^| '||' ^)
					int alt10=2;
					int LA10_0 = input.LA(1);
					if ( (LA10_0==LOGICAND) ) {
						alt10=1;
					}
					else if ( (LA10_0==LOGICOR) ) {
						alt10=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 10, 0, input);
						throw nvae;
					}

					switch (alt10) {
						case 1 :
							// com/caseystella/parser/bashast.g:92:33: '&&' ^
							{
							string_literal34=(Token)match(input,LOGICAND,FOLLOW_LOGICAND_in_list_level_1392); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal34_tree = (CommonTree)adaptor.create(string_literal34);
							root_0 = (CommonTree)adaptor.becomeRoot(string_literal34_tree, root_0);
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:92:39: '||' ^
							{
							string_literal35=(Token)match(input,LOGICOR,FOLLOW_LOGICOR_in_list_level_1395); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							string_literal35_tree = (CommonTree)adaptor.create(string_literal35);
							root_0 = (CommonTree)adaptor.becomeRoot(string_literal35_tree, root_0);
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:92:50: ( BLANK !)*
					loop11:
					while (true) {
						int alt11=2;
						int LA11_0 = input.LA(1);
						if ( (LA11_0==BLANK) ) {
							int LA11_2 = input.LA(2);
							if ( (synpred28_bashast()) ) {
								alt11=1;
							}

						}

						switch (alt11) {
						case 1 :
							// com/caseystella/parser/bashast.g:92:50: BLANK !
							{
							BLANK36=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_1398); if (state.failed) return retval;
							}
							break;

						default :
							break loop11;
						}
					}

					// com/caseystella/parser/bashast.g:92:53: ( function | pipeline )
					int alt12=2;
					switch ( input.LA(1) ) {
					case FUNCTION:
						{
						int LA12_1 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case LSQUARE:
						{
						int LA12_2 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case QMARK:
						{
						int LA12_3 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case TIMES:
						{
						int LA12_4 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case PLUS:
						{
						int LA12_5 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case AT:
						{
						int LA12_6 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case BANG:
						{
						int LA12_7 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case DOLLAR:
						{
						int LA12_8 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case TICK:
						{
						int LA12_9 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case QUOTE:
						{
						int LA12_10 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case SQUOTE:
						{
						int LA12_11 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case DIGIT:
					case NUMBER:
						{
						int LA12_12 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case 138:
						{
						int LA12_13 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case NQSTR:
						{
						int LA12_14 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case EQUALS:
						{
						int LA12_15 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case PCT:
						{
						int LA12_16 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case PCTPCT:
						{
						int LA12_17 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case MINUS:
						{
						int LA12_18 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case DOT:
						{
						int LA12_19 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case DOTDOT:
						{
						int LA12_20 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case COLON:
						{
						int LA12_21 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case BOP:
						{
						int LA12_22 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case UOP:
						{
						int LA12_23 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case TEST:
						{
						int LA12_24 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case LETTER:
					case NAME:
						{
						int LA12_25 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case TILDE:
						{
						int LA12_26 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case INC:
						{
						int LA12_27 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case DEC:
						{
						int LA12_28 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case ARITH_ASSIGN:
						{
						int LA12_29 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case ESC_CHAR:
						{
						int LA12_30 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case CARET:
						{
						int LA12_31 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case TIME:
						{
						int LA12_32 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case SLASH:
						{
						int LA12_33 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case RSQUARE:
						{
						int LA12_34 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case BLANK:
					case EXPORT:
					case LBRACE:
					case LET:
					case LLPAREN:
					case LPAREN:
						{
						alt12=2;
						}
						break;
					case FOR:
						{
						int LA12_37 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case SELECT:
						{
						int LA12_39 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case IF:
						{
						int LA12_40 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case WHILE:
						{
						int LA12_41 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case UNTIL:
						{
						int LA12_42 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case CASE:
						{
						int LA12_43 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					case DO:
					case DONE:
					case ELIF:
					case ELSE:
					case ESAC:
					case FI:
					case IN:
					case THEN:
						{
						int LA12_44 = input.LA(2);
						if ( (synpred29_bashast()) ) {
							alt12=1;
						}
						else if ( (true) ) {
							alt12=2;
						}

						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 12, 0, input);
						throw nvae;
					}
					switch (alt12) {
						case 1 :
							// com/caseystella/parser/bashast.g:92:54: function
							{
							pushFollow(FOLLOW_function_in_list_level_1403);
							function37=function();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, function37.getTree());

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:92:63: pipeline
							{
							pushFollow(FOLLOW_pipeline_in_list_level_1405);
							pipeline38=pipeline();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, pipeline38.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop13;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "list_level_1"


	public static class list_level_2_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "list_level_2"
	// com/caseystella/parser/bashast.g:93:1: list_level_2 : list_level_1 ( ( ( BLANK !)? ';' !| ( BLANK !)? '&' ^| ( ( BLANK !)? EOL !)+ ) ( BLANK !)? list_level_1 )* ;
	public final bashastParser.list_level_2_return list_level_2() throws RecognitionException {
		bashastParser.list_level_2_return retval = new bashastParser.list_level_2_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK40=null;
		Token char_literal41=null;
		Token BLANK42=null;
		Token char_literal43=null;
		Token BLANK44=null;
		Token EOL45=null;
		Token BLANK46=null;
		ParserRuleReturnScope list_level_139 =null;
		ParserRuleReturnScope list_level_147 =null;

		CommonTree BLANK40_tree=null;
		CommonTree char_literal41_tree=null;
		CommonTree BLANK42_tree=null;
		CommonTree char_literal43_tree=null;
		CommonTree BLANK44_tree=null;
		CommonTree EOL45_tree=null;
		CommonTree BLANK46_tree=null;

		try {
			// com/caseystella/parser/bashast.g:94:2: ( list_level_1 ( ( ( BLANK !)? ';' !| ( BLANK !)? '&' ^| ( ( BLANK !)? EOL !)+ ) ( BLANK !)? list_level_1 )* )
			// com/caseystella/parser/bashast.g:94:4: list_level_1 ( ( ( BLANK !)? ';' !| ( BLANK !)? '&' ^| ( ( BLANK !)? EOL !)+ ) ( BLANK !)? list_level_1 )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_list_level_1_in_list_level_2416);
			list_level_139=list_level_1();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, list_level_139.getTree());

			// com/caseystella/parser/bashast.g:94:17: ( ( ( BLANK !)? ';' !| ( BLANK !)? '&' ^| ( ( BLANK !)? EOL !)+ ) ( BLANK !)? list_level_1 )*
			loop20:
			while (true) {
				int alt20=2;
				switch ( input.LA(1) ) {
				case BLANK:
					{
					int LA20_1 = input.LA(2);
					if ( (synpred38_bashast()) ) {
						alt20=1;
					}

					}
					break;
				case SEMIC:
					{
					int LA20_2 = input.LA(2);
					if ( (synpred38_bashast()) ) {
						alt20=1;
					}

					}
					break;
				case AMP:
					{
					int LA20_3 = input.LA(2);
					if ( (synpred38_bashast()) ) {
						alt20=1;
					}

					}
					break;
				case EOL:
					{
					int LA20_4 = input.LA(2);
					if ( (synpred38_bashast()) ) {
						alt20=1;
					}

					}
					break;
				}
				switch (alt20) {
				case 1 :
					// com/caseystella/parser/bashast.g:94:18: ( ( BLANK !)? ';' !| ( BLANK !)? '&' ^| ( ( BLANK !)? EOL !)+ ) ( BLANK !)? list_level_1
					{
					// com/caseystella/parser/bashast.g:94:18: ( ( BLANK !)? ';' !| ( BLANK !)? '&' ^| ( ( BLANK !)? EOL !)+ )
					int alt18=3;
					switch ( input.LA(1) ) {
					case BLANK:
						{
						switch ( input.LA(2) ) {
						case SEMIC:
							{
							alt18=1;
							}
							break;
						case AMP:
							{
							alt18=2;
							}
							break;
						case EOL:
							{
							alt18=3;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 18, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
						}
						break;
					case SEMIC:
						{
						alt18=1;
						}
						break;
					case AMP:
						{
						alt18=2;
						}
						break;
					case EOL:
						{
						alt18=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 18, 0, input);
						throw nvae;
					}
					switch (alt18) {
						case 1 :
							// com/caseystella/parser/bashast.g:94:19: ( BLANK !)? ';' !
							{
							// com/caseystella/parser/bashast.g:94:24: ( BLANK !)?
							int alt14=2;
							int LA14_0 = input.LA(1);
							if ( (LA14_0==BLANK) ) {
								alt14=1;
							}
							switch (alt14) {
								case 1 :
									// com/caseystella/parser/bashast.g:94:24: BLANK !
									{
									BLANK40=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_2420); if (state.failed) return retval;
									}
									break;

							}

							char_literal41=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_list_level_2423); if (state.failed) return retval;
							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:94:31: ( BLANK !)? '&' ^
							{
							// com/caseystella/parser/bashast.g:94:36: ( BLANK !)?
							int alt15=2;
							int LA15_0 = input.LA(1);
							if ( (LA15_0==BLANK) ) {
								alt15=1;
							}
							switch (alt15) {
								case 1 :
									// com/caseystella/parser/bashast.g:94:36: BLANK !
									{
									BLANK42=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_2426); if (state.failed) return retval;
									}
									break;

							}

							char_literal43=(Token)match(input,AMP,FOLLOW_AMP_in_list_level_2429); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal43_tree = (CommonTree)adaptor.create(char_literal43);
							root_0 = (CommonTree)adaptor.becomeRoot(char_literal43_tree, root_0);
							}

							}
							break;
						case 3 :
							// com/caseystella/parser/bashast.g:94:43: ( ( BLANK !)? EOL !)+
							{
							// com/caseystella/parser/bashast.g:94:43: ( ( BLANK !)? EOL !)+
							int cnt17=0;
							loop17:
							while (true) {
								int alt17=2;
								int LA17_0 = input.LA(1);
								if ( (LA17_0==BLANK) ) {
									int LA17_1 = input.LA(2);
									if ( (LA17_1==EOL) ) {
										alt17=1;
									}

								}
								else if ( (LA17_0==EOL) ) {
									alt17=1;
								}

								switch (alt17) {
								case 1 :
									// com/caseystella/parser/bashast.g:94:44: ( BLANK !)? EOL !
									{
									// com/caseystella/parser/bashast.g:94:49: ( BLANK !)?
									int alt16=2;
									int LA16_0 = input.LA(1);
									if ( (LA16_0==BLANK) ) {
										alt16=1;
									}
									switch (alt16) {
										case 1 :
											// com/caseystella/parser/bashast.g:94:49: BLANK !
											{
											BLANK44=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_2433); if (state.failed) return retval;
											}
											break;

									}

									EOL45=(Token)match(input,EOL,FOLLOW_EOL_in_list_level_2437); if (state.failed) return retval;
									}
									break;

								default :
									if ( cnt17 >= 1 ) break loop17;
									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee = new EarlyExitException(17, input);
									throw eee;
								}
								cnt17++;
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:94:64: ( BLANK !)?
					int alt19=2;
					int LA19_0 = input.LA(1);
					if ( (LA19_0==BLANK) ) {
						int LA19_1 = input.LA(2);
						if ( (synpred37_bashast()) ) {
							alt19=1;
						}
					}
					switch (alt19) {
						case 1 :
							// com/caseystella/parser/bashast.g:94:64: BLANK !
							{
							BLANK46=(Token)match(input,BLANK,FOLLOW_BLANK_in_list_level_2442); if (state.failed) return retval;
							}
							break;

					}

					pushFollow(FOLLOW_list_level_1_in_list_level_2446);
					list_level_147=list_level_1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, list_level_147.getTree());

					}
					break;

				default :
					break loop20;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "list_level_2"


	public static class pipeline_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pipeline"
	// com/caseystella/parser/bashast.g:95:1: pipeline : ( ( var_def )+ | ( time )? ( '!' ( BLANK !)* )? ( BLANK !)* command ^ ( ( BLANK !)* PIPE ^ ( BLANK !)* command )* );
	public final bashastParser.pipeline_return pipeline() throws RecognitionException {
		bashastParser.pipeline_return retval = new bashastParser.pipeline_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token char_literal50=null;
		Token BLANK51=null;
		Token BLANK52=null;
		Token BLANK54=null;
		Token PIPE55=null;
		Token BLANK56=null;
		ParserRuleReturnScope var_def48 =null;
		ParserRuleReturnScope time49 =null;
		ParserRuleReturnScope command53 =null;
		ParserRuleReturnScope command57 =null;

		CommonTree char_literal50_tree=null;
		CommonTree BLANK51_tree=null;
		CommonTree BLANK52_tree=null;
		CommonTree BLANK54_tree=null;
		CommonTree PIPE55_tree=null;
		CommonTree BLANK56_tree=null;

		try {
			// com/caseystella/parser/bashast.g:96:2: ( ( var_def )+ | ( time )? ( '!' ( BLANK !)* )? ( BLANK !)* command ^ ( ( BLANK !)* PIPE ^ ( BLANK !)* command )* )
			int alt29=2;
			switch ( input.LA(1) ) {
			case BLANK:
				{
				int LA29_1 = input.LA(2);
				if ( (synpred40_bashast()) ) {
					alt29=1;
				}
				else if ( (true) ) {
					alt29=2;
				}

				}
				break;
			case 138:
				{
				int LA29_2 = input.LA(2);
				if ( (synpred40_bashast()) ) {
					alt29=1;
				}
				else if ( (true) ) {
					alt29=2;
				}

				}
				break;
			case LET:
				{
				int LA29_3 = input.LA(2);
				if ( (synpred40_bashast()) ) {
					alt29=1;
				}
				else if ( (true) ) {
					alt29=2;
				}

				}
				break;
			case ARITH_ASSIGN:
			case AT:
			case BANG:
			case BOP:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DIGIT:
			case DO:
			case DOLLAR:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case EXPORT:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LBRACE:
			case LLPAREN:
			case LPAREN:
			case LSQUARE:
			case MINUS:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case PLUS:
			case QMARK:
			case QUOTE:
			case RSQUARE:
			case SELECT:
			case SLASH:
			case SQUOTE:
			case TEST:
			case THEN:
			case TICK:
			case TILDE:
			case TIME:
			case TIMES:
			case UNTIL:
			case UOP:
			case WHILE:
				{
				alt29=2;
				}
				break;
			case LETTER:
			case NAME:
				{
				int LA29_38 = input.LA(2);
				if ( (synpred40_bashast()) ) {
					alt29=1;
				}
				else if ( (true) ) {
					alt29=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 29, 0, input);
				throw nvae;
			}
			switch (alt29) {
				case 1 :
					// com/caseystella/parser/bashast.g:96:4: ( var_def )+
					{
					root_0 = (CommonTree)adaptor.nil();


					// com/caseystella/parser/bashast.g:96:4: ( var_def )+
					int cnt21=0;
					loop21:
					while (true) {
						int alt21=2;
						alt21 = dfa21.predict(input);
						switch (alt21) {
						case 1 :
							// com/caseystella/parser/bashast.g:96:4: var_def
							{
							pushFollow(FOLLOW_var_def_in_pipeline456);
							var_def48=var_def();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, var_def48.getTree());

							}
							break;

						default :
							if ( cnt21 >= 1 ) break loop21;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(21, input);
							throw eee;
						}
						cnt21++;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:97:4: ( time )? ( '!' ( BLANK !)* )? ( BLANK !)* command ^ ( ( BLANK !)* PIPE ^ ( BLANK !)* command )*
					{
					root_0 = (CommonTree)adaptor.nil();


					// com/caseystella/parser/bashast.g:97:4: ( time )?
					int alt22=2;
					int LA22_0 = input.LA(1);
					if ( (LA22_0==TIME) ) {
						int LA22_1 = input.LA(2);
						if ( (LA22_1==BLANK) ) {
							alt22=1;
						}
					}
					switch (alt22) {
						case 1 :
							// com/caseystella/parser/bashast.g:97:4: time
							{
							pushFollow(FOLLOW_time_in_pipeline462);
							time49=time();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, time49.getTree());

							}
							break;

					}

					// com/caseystella/parser/bashast.g:97:9: ( '!' ( BLANK !)* )?
					int alt24=2;
					int LA24_0 = input.LA(1);
					if ( (LA24_0==BANG) ) {
						int LA24_1 = input.LA(2);
						if ( (synpred43_bashast()) ) {
							alt24=1;
						}
					}
					switch (alt24) {
						case 1 :
							// com/caseystella/parser/bashast.g:97:10: '!' ( BLANK !)*
							{
							char_literal50=(Token)match(input,BANG,FOLLOW_BANG_in_pipeline465); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							char_literal50_tree = (CommonTree)adaptor.create(char_literal50);
							adaptor.addChild(root_0, char_literal50_tree);
							}

							// com/caseystella/parser/bashast.g:97:19: ( BLANK !)*
							loop23:
							while (true) {
								int alt23=2;
								int LA23_0 = input.LA(1);
								if ( (LA23_0==BLANK) ) {
									int LA23_1 = input.LA(2);
									if ( (synpred42_bashast()) ) {
										alt23=1;
									}

								}

								switch (alt23) {
								case 1 :
									// com/caseystella/parser/bashast.g:97:19: BLANK !
									{
									BLANK51=(Token)match(input,BLANK,FOLLOW_BLANK_in_pipeline467); if (state.failed) return retval;
									}
									break;

								default :
									break loop23;
								}
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:97:29: ( BLANK !)*
					loop25:
					while (true) {
						int alt25=2;
						int LA25_0 = input.LA(1);
						if ( (LA25_0==BLANK) ) {
							int LA25_2 = input.LA(2);
							if ( (synpred44_bashast()) ) {
								alt25=1;
							}

						}

						switch (alt25) {
						case 1 :
							// com/caseystella/parser/bashast.g:97:29: BLANK !
							{
							BLANK52=(Token)match(input,BLANK,FOLLOW_BLANK_in_pipeline473); if (state.failed) return retval;
							}
							break;

						default :
							break loop25;
						}
					}

					pushFollow(FOLLOW_command_in_pipeline477);
					command53=command();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(command53.getTree(), root_0);
					// com/caseystella/parser/bashast.g:97:41: ( ( BLANK !)* PIPE ^ ( BLANK !)* command )*
					loop28:
					while (true) {
						int alt28=2;
						alt28 = dfa28.predict(input);
						switch (alt28) {
						case 1 :
							// com/caseystella/parser/bashast.g:97:42: ( BLANK !)* PIPE ^ ( BLANK !)* command
							{
							// com/caseystella/parser/bashast.g:97:47: ( BLANK !)*
							loop26:
							while (true) {
								int alt26=2;
								int LA26_0 = input.LA(1);
								if ( (LA26_0==BLANK) ) {
									alt26=1;
								}

								switch (alt26) {
								case 1 :
									// com/caseystella/parser/bashast.g:97:47: BLANK !
									{
									BLANK54=(Token)match(input,BLANK,FOLLOW_BLANK_in_pipeline481); if (state.failed) return retval;
									}
									break;

								default :
									break loop26;
								}
							}

							PIPE55=(Token)match(input,PIPE,FOLLOW_PIPE_in_pipeline485); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							PIPE55_tree = (CommonTree)adaptor.create(PIPE55);
							root_0 = (CommonTree)adaptor.becomeRoot(PIPE55_tree, root_0);
							}

							// com/caseystella/parser/bashast.g:97:61: ( BLANK !)*
							loop27:
							while (true) {
								int alt27=2;
								int LA27_0 = input.LA(1);
								if ( (LA27_0==BLANK) ) {
									int LA27_2 = input.LA(2);
									if ( (synpred46_bashast()) ) {
										alt27=1;
									}

								}

								switch (alt27) {
								case 1 :
									// com/caseystella/parser/bashast.g:97:61: BLANK !
									{
									BLANK56=(Token)match(input,BLANK,FOLLOW_BLANK_in_pipeline488); if (state.failed) return retval;
									}
									break;

								default :
									break loop27;
								}
							}

							pushFollow(FOLLOW_command_in_pipeline492);
							command57=command();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, command57.getTree());

							}
							break;

						default :
							break loop28;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pipeline"


	public static class time_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "time"
	// com/caseystella/parser/bashast.g:98:1: time : TIME ^ ( BLANK !)+ ( timearg )? ;
	public final bashastParser.time_return time() throws RecognitionException {
		bashastParser.time_return retval = new bashastParser.time_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token TIME58=null;
		Token BLANK59=null;
		ParserRuleReturnScope timearg60 =null;

		CommonTree TIME58_tree=null;
		CommonTree BLANK59_tree=null;

		try {
			// com/caseystella/parser/bashast.g:98:6: ( TIME ^ ( BLANK !)+ ( timearg )? )
			// com/caseystella/parser/bashast.g:98:8: TIME ^ ( BLANK !)+ ( timearg )?
			{
			root_0 = (CommonTree)adaptor.nil();


			TIME58=(Token)match(input,TIME,FOLLOW_TIME_in_time501); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TIME58_tree = (CommonTree)adaptor.create(TIME58);
			root_0 = (CommonTree)adaptor.becomeRoot(TIME58_tree, root_0);
			}

			// com/caseystella/parser/bashast.g:98:19: ( BLANK !)+
			int cnt30=0;
			loop30:
			while (true) {
				int alt30=2;
				int LA30_0 = input.LA(1);
				if ( (LA30_0==BLANK) ) {
					int LA30_2 = input.LA(2);
					if ( (synpred48_bashast()) ) {
						alt30=1;
					}

				}

				switch (alt30) {
				case 1 :
					// com/caseystella/parser/bashast.g:98:19: BLANK !
					{
					BLANK59=(Token)match(input,BLANK,FOLLOW_BLANK_in_time504); if (state.failed) return retval;
					}
					break;

				default :
					if ( cnt30 >= 1 ) break loop30;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(30, input);
					throw eee;
				}
				cnt30++;
			}

			// com/caseystella/parser/bashast.g:98:22: ( timearg )?
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==137) ) {
				alt31=1;
			}
			switch (alt31) {
				case 1 :
					// com/caseystella/parser/bashast.g:98:22: timearg
					{
					pushFollow(FOLLOW_timearg_in_time508);
					timearg60=timearg();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, timearg60.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "time"


	public static class timearg_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "timearg"
	// com/caseystella/parser/bashast.g:99:1: timearg : '-p' ( BLANK !)+ ;
	public final bashastParser.timearg_return timearg() throws RecognitionException {
		bashastParser.timearg_return retval = new bashastParser.timearg_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token string_literal61=null;
		Token BLANK62=null;

		CommonTree string_literal61_tree=null;
		CommonTree BLANK62_tree=null;

		try {
			// com/caseystella/parser/bashast.g:99:9: ( '-p' ( BLANK !)+ )
			// com/caseystella/parser/bashast.g:99:11: '-p' ( BLANK !)+
			{
			root_0 = (CommonTree)adaptor.nil();


			string_literal61=(Token)match(input,137,FOLLOW_137_in_timearg516); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			string_literal61_tree = (CommonTree)adaptor.create(string_literal61);
			adaptor.addChild(root_0, string_literal61_tree);
			}

			// com/caseystella/parser/bashast.g:99:21: ( BLANK !)+
			int cnt32=0;
			loop32:
			while (true) {
				int alt32=2;
				int LA32_0 = input.LA(1);
				if ( (LA32_0==BLANK) ) {
					int LA32_2 = input.LA(2);
					if ( (synpred50_bashast()) ) {
						alt32=1;
					}

				}

				switch (alt32) {
				case 1 :
					// com/caseystella/parser/bashast.g:99:21: BLANK !
					{
					BLANK62=(Token)match(input,BLANK,FOLLOW_BLANK_in_timearg518); if (state.failed) return retval;
					}
					break;

				default :
					if ( cnt32 >= 1 ) break loop32;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(32, input);
					throw eee;
				}
				cnt32++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "timearg"


	public static class command_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "command"
	// com/caseystella/parser/bashast.g:101:1: command : ( EXPORT ^ ( var_def )+ | compound_command | simple_command );
	public final bashastParser.command_return command() throws RecognitionException {
		bashastParser.command_return retval = new bashastParser.command_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token EXPORT63=null;
		ParserRuleReturnScope var_def64 =null;
		ParserRuleReturnScope compound_command65 =null;
		ParserRuleReturnScope simple_command66 =null;

		CommonTree EXPORT63_tree=null;

		try {
			// com/caseystella/parser/bashast.g:102:2: ( EXPORT ^ ( var_def )+ | compound_command | simple_command )
			int alt34=3;
			switch ( input.LA(1) ) {
			case EXPORT:
				{
				alt34=1;
				}
				break;
			case FOR:
				{
				int LA34_2 = input.LA(2);
				if ( (synpred53_bashast()) ) {
					alt34=2;
				}
				else if ( (true) ) {
					alt34=3;
				}

				}
				break;
			case SELECT:
				{
				int LA34_3 = input.LA(2);
				if ( (synpred53_bashast()) ) {
					alt34=2;
				}
				else if ( (true) ) {
					alt34=3;
				}

				}
				break;
			case IF:
				{
				int LA34_4 = input.LA(2);
				if ( (synpred53_bashast()) ) {
					alt34=2;
				}
				else if ( (true) ) {
					alt34=3;
				}

				}
				break;
			case WHILE:
				{
				int LA34_5 = input.LA(2);
				if ( (synpred53_bashast()) ) {
					alt34=2;
				}
				else if ( (true) ) {
					alt34=3;
				}

				}
				break;
			case UNTIL:
				{
				int LA34_6 = input.LA(2);
				if ( (synpred53_bashast()) ) {
					alt34=2;
				}
				else if ( (true) ) {
					alt34=3;
				}

				}
				break;
			case CASE:
				{
				int LA34_7 = input.LA(2);
				if ( (synpred53_bashast()) ) {
					alt34=2;
				}
				else if ( (true) ) {
					alt34=3;
				}

				}
				break;
			case LBRACE:
			case LLPAREN:
			case LPAREN:
				{
				alt34=2;
				}
				break;
			case LSQUARE:
				{
				int LA34_11 = input.LA(2);
				if ( (synpred53_bashast()) ) {
					alt34=2;
				}
				else if ( (true) ) {
					alt34=3;
				}

				}
				break;
			case TEST:
				{
				int LA34_12 = input.LA(2);
				if ( (synpred53_bashast()) ) {
					alt34=2;
				}
				else if ( (true) ) {
					alt34=3;
				}

				}
				break;
			case ARITH_ASSIGN:
			case AT:
			case BANG:
			case BLANK:
			case BOP:
			case CARET:
			case COLON:
			case DEC:
			case DIGIT:
			case DO:
			case DOLLAR:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FUNCTION:
			case IN:
			case INC:
			case LET:
			case LETTER:
			case MINUS:
			case NAME:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case PLUS:
			case QMARK:
			case QUOTE:
			case RSQUARE:
			case SLASH:
			case SQUOTE:
			case THEN:
			case TICK:
			case TILDE:
			case TIME:
			case TIMES:
			case UOP:
			case 138:
				{
				alt34=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 34, 0, input);
				throw nvae;
			}
			switch (alt34) {
				case 1 :
					// com/caseystella/parser/bashast.g:102:4: EXPORT ^ ( var_def )+
					{
					root_0 = (CommonTree)adaptor.nil();


					EXPORT63=(Token)match(input,EXPORT,FOLLOW_EXPORT_in_command529); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXPORT63_tree = (CommonTree)adaptor.create(EXPORT63);
					root_0 = (CommonTree)adaptor.becomeRoot(EXPORT63_tree, root_0);
					}

					// com/caseystella/parser/bashast.g:102:12: ( var_def )+
					int cnt33=0;
					loop33:
					while (true) {
						int alt33=2;
						alt33 = dfa33.predict(input);
						switch (alt33) {
						case 1 :
							// com/caseystella/parser/bashast.g:102:12: var_def
							{
							pushFollow(FOLLOW_var_def_in_command532);
							var_def64=var_def();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, var_def64.getTree());

							}
							break;

						default :
							if ( cnt33 >= 1 ) break loop33;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(33, input);
							throw eee;
						}
						cnt33++;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:103:4: compound_command
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_compound_command_in_command538);
					compound_command65=compound_command();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_command65.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:104:4: simple_command
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_simple_command_in_command543);
					simple_command66=simple_command();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_command66.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "command"


	public static class simple_command_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "simple_command"
	// com/caseystella/parser/bashast.g:106:1: simple_command : ( ( var_def )+ bash_command ^ ( redirect )* | bash_command ^ ( redirect )* );
	public final bashastParser.simple_command_return simple_command() throws RecognitionException {
		bashastParser.simple_command_return retval = new bashastParser.simple_command_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope var_def67 =null;
		ParserRuleReturnScope bash_command68 =null;
		ParserRuleReturnScope redirect69 =null;
		ParserRuleReturnScope bash_command70 =null;
		ParserRuleReturnScope redirect71 =null;


		try {
			// com/caseystella/parser/bashast.g:107:2: ( ( var_def )+ bash_command ^ ( redirect )* | bash_command ^ ( redirect )* )
			int alt38=2;
			switch ( input.LA(1) ) {
			case BLANK:
			case LET:
				{
				alt38=1;
				}
				break;
			case 138:
				{
				int LA38_2 = input.LA(2);
				if ( (synpred56_bashast()) ) {
					alt38=1;
				}
				else if ( (true) ) {
					alt38=2;
				}

				}
				break;
			case ARITH_ASSIGN:
			case AT:
			case BANG:
			case BOP:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DIGIT:
			case DO:
			case DOLLAR:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LSQUARE:
			case MINUS:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case PLUS:
			case QMARK:
			case QUOTE:
			case RSQUARE:
			case SELECT:
			case SLASH:
			case SQUOTE:
			case TEST:
			case THEN:
			case TICK:
			case TILDE:
			case TIME:
			case TIMES:
			case UNTIL:
			case UOP:
			case WHILE:
				{
				alt38=2;
				}
				break;
			case LETTER:
			case NAME:
				{
				int LA38_27 = input.LA(2);
				if ( (synpred56_bashast()) ) {
					alt38=1;
				}
				else if ( (true) ) {
					alt38=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 38, 0, input);
				throw nvae;
			}
			switch (alt38) {
				case 1 :
					// com/caseystella/parser/bashast.g:107:4: ( var_def )+ bash_command ^ ( redirect )*
					{
					root_0 = (CommonTree)adaptor.nil();


					// com/caseystella/parser/bashast.g:107:4: ( var_def )+
					int cnt35=0;
					loop35:
					while (true) {
						int alt35=2;
						switch ( input.LA(1) ) {
						case 138:
							{
							int LA35_13 = input.LA(2);
							if ( (synpred54_bashast()) ) {
								alt35=1;
							}

							}
							break;
						case LETTER:
						case NAME:
							{
							int LA35_25 = input.LA(2);
							if ( (synpred54_bashast()) ) {
								alt35=1;
							}

							}
							break;
						case BLANK:
						case LET:
							{
							alt35=1;
							}
							break;
						}
						switch (alt35) {
						case 1 :
							// com/caseystella/parser/bashast.g:107:4: var_def
							{
							pushFollow(FOLLOW_var_def_in_simple_command552);
							var_def67=var_def();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, var_def67.getTree());

							}
							break;

						default :
							if ( cnt35 >= 1 ) break loop35;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(35, input);
							throw eee;
						}
						cnt35++;
					}

					pushFollow(FOLLOW_bash_command_in_simple_command555);
					bash_command68=bash_command();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(bash_command68.getTree(), root_0);
					// com/caseystella/parser/bashast.g:107:27: ( redirect )*
					loop36:
					while (true) {
						int alt36=2;
						alt36 = dfa36.predict(input);
						switch (alt36) {
						case 1 :
							// com/caseystella/parser/bashast.g:107:27: redirect
							{
							pushFollow(FOLLOW_redirect_in_simple_command558);
							redirect69=redirect();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, redirect69.getTree());

							}
							break;

						default :
							break loop36;
						}
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:108:4: bash_command ^ ( redirect )*
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_bash_command_in_simple_command564);
					bash_command70=bash_command();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(bash_command70.getTree(), root_0);
					// com/caseystella/parser/bashast.g:108:18: ( redirect )*
					loop37:
					while (true) {
						int alt37=2;
						alt37 = dfa37.predict(input);
						switch (alt37) {
						case 1 :
							// com/caseystella/parser/bashast.g:108:18: redirect
							{
							pushFollow(FOLLOW_redirect_in_simple_command567);
							redirect71=redirect();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, redirect71.getTree());

							}
							break;

						default :
							break loop37;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simple_command"


	public static class bash_command_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "bash_command"
	// com/caseystella/parser/bashast.g:109:1: bash_command : fname_no_res_word ( ( BLANK )+ arg )* -> ^( COMMAND fname_no_res_word ( arg )* ) ;
	public final bashastParser.bash_command_return bash_command() throws RecognitionException {
		bashastParser.bash_command_return retval = new bashastParser.bash_command_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK73=null;
		ParserRuleReturnScope fname_no_res_word72 =null;
		ParserRuleReturnScope arg74 =null;

		CommonTree BLANK73_tree=null;
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_arg=new RewriteRuleSubtreeStream(adaptor,"rule arg");
		RewriteRuleSubtreeStream stream_fname_no_res_word=new RewriteRuleSubtreeStream(adaptor,"rule fname_no_res_word");

		try {
			// com/caseystella/parser/bashast.g:110:2: ( fname_no_res_word ( ( BLANK )+ arg )* -> ^( COMMAND fname_no_res_word ( arg )* ) )
			// com/caseystella/parser/bashast.g:110:4: fname_no_res_word ( ( BLANK )+ arg )*
			{
			pushFollow(FOLLOW_fname_no_res_word_in_bash_command576);
			fname_no_res_word72=fname_no_res_word();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_fname_no_res_word.add(fname_no_res_word72.getTree());
			// com/caseystella/parser/bashast.g:110:22: ( ( BLANK )+ arg )*
			loop40:
			while (true) {
				int alt40=2;
				int LA40_0 = input.LA(1);
				if ( (LA40_0==BLANK) ) {
					int LA40_1 = input.LA(2);
					if ( (synpred59_bashast()) ) {
						alt40=1;
					}

				}

				switch (alt40) {
				case 1 :
					// com/caseystella/parser/bashast.g:110:23: ( BLANK )+ arg
					{
					// com/caseystella/parser/bashast.g:110:23: ( BLANK )+
					int cnt39=0;
					loop39:
					while (true) {
						int alt39=2;
						int LA39_0 = input.LA(1);
						if ( (LA39_0==BLANK) ) {
							alt39=1;
						}

						switch (alt39) {
						case 1 :
							// com/caseystella/parser/bashast.g:110:23: BLANK
							{
							BLANK73=(Token)match(input,BLANK,FOLLOW_BLANK_in_bash_command579); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK73);

							}
							break;

						default :
							if ( cnt39 >= 1 ) break loop39;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(39, input);
							throw eee;
						}
						cnt39++;
					}

					pushFollow(FOLLOW_arg_in_bash_command582);
					arg74=arg();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_arg.add(arg74.getTree());
					}
					break;

				default :
					break loop40;
				}
			}

			// AST REWRITE
			// elements: arg, fname_no_res_word
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 110:36: -> ^( COMMAND fname_no_res_word ( arg )* )
			{
				// com/caseystella/parser/bashast.g:110:39: ^( COMMAND fname_no_res_word ( arg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMAND, "COMMAND"), root_1);
				adaptor.addChild(root_1, stream_fname_no_res_word.nextTree());
				// com/caseystella/parser/bashast.g:110:67: ( arg )*
				while ( stream_arg.hasNext() ) {
					adaptor.addChild(root_1, stream_arg.nextTree());
				}
				stream_arg.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bash_command"


	public static class arg_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arg"
	// com/caseystella/parser/bashast.g:112:1: arg : ( brace_expansion | var_ref | fname | res_word_str -> ^( STRING res_word_str ) | command_sub | var_ref );
	public final bashastParser.arg_return arg() throws RecognitionException {
		bashastParser.arg_return retval = new bashastParser.arg_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope brace_expansion75 =null;
		ParserRuleReturnScope var_ref76 =null;
		ParserRuleReturnScope fname77 =null;
		ParserRuleReturnScope res_word_str78 =null;
		ParserRuleReturnScope command_sub79 =null;
		ParserRuleReturnScope var_ref80 =null;

		RewriteRuleSubtreeStream stream_res_word_str=new RewriteRuleSubtreeStream(adaptor,"rule res_word_str");

		try {
			// com/caseystella/parser/bashast.g:113:2: ( brace_expansion | var_ref | fname | res_word_str -> ^( STRING res_word_str ) | command_sub | var_ref )
			int alt41=6;
			switch ( input.LA(1) ) {
			case LSQUARE:
				{
				int LA41_1 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case QMARK:
				{
				int LA41_2 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TIMES:
				{
				int LA41_3 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLUS:
				{
				int LA41_4 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT:
				{
				int LA41_5 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BANG:
				{
				int LA41_6 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOLLAR:
				{
				int LA41_7 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred61_bashast()) ) {
					alt41=2;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}
				else if ( (synpred64_bashast()) ) {
					alt41=5;
				}
				else if ( (true) ) {
					alt41=6;
				}

				}
				break;
			case TICK:
				{
				int LA41_8 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}
				else if ( (synpred64_bashast()) ) {
					alt41=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case QUOTE:
				{
				int LA41_9 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQUOTE:
				{
				int LA41_10 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DIGIT:
			case NUMBER:
				{
				int LA41_11 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 138:
				{
				int LA41_12 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NQSTR:
				{
				int LA41_13 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EQUALS:
				{
				int LA41_14 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PCT:
				{
				int LA41_15 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 15, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PCTPCT:
				{
				int LA41_16 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 16, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case MINUS:
				{
				int LA41_17 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOT:
				{
				int LA41_18 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOTDOT:
				{
				int LA41_19 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 19, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case COLON:
				{
				int LA41_20 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 20, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BOP:
				{
				int LA41_21 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 21, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case UOP:
				{
				int LA41_22 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 22, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TEST:
				{
				int LA41_23 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 23, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LETTER:
			case NAME:
				{
				int LA41_24 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 24, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TILDE:
				{
				int LA41_25 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 25, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case INC:
				{
				int LA41_26 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 26, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DEC:
				{
				int LA41_27 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 27, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ARITH_ASSIGN:
				{
				int LA41_28 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 28, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ESC_CHAR:
				{
				int LA41_29 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 29, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CARET:
				{
				int LA41_30 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 30, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CASE:
			case DO:
			case DONE:
			case ELIF:
			case ELSE:
			case ESAC:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case SELECT:
			case THEN:
			case TIME:
			case UNTIL:
			case WHILE:
				{
				int LA41_31 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}
				else if ( (synpred63_bashast()) ) {
					alt41=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 31, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SLASH:
				{
				int LA41_32 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 32, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case RSQUARE:
				{
				int LA41_33 = input.LA(2);
				if ( (synpred60_bashast()) ) {
					alt41=1;
				}
				else if ( (synpred62_bashast()) ) {
					alt41=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 41, 33, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACE:
				{
				alt41=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 41, 0, input);
				throw nvae;
			}
			switch (alt41) {
				case 1 :
					// com/caseystella/parser/bashast.g:113:4: brace_expansion
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_brace_expansion_in_arg604);
					brace_expansion75=brace_expansion();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_expansion75.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:114:4: var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_ref_in_arg609);
					var_ref76=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref76.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:115:4: fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fname_in_arg614);
					fname77=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname77.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:116:4: res_word_str
					{
					pushFollow(FOLLOW_res_word_str_in_arg619);
					res_word_str78=res_word_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_res_word_str.add(res_word_str78.getTree());
					// AST REWRITE
					// elements: res_word_str
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 116:17: -> ^( STRING res_word_str )
					{
						// com/caseystella/parser/bashast.g:116:20: ^( STRING res_word_str )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);
						adaptor.addChild(root_1, stream_res_word_str.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:117:4: command_sub
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_command_sub_in_arg632);
					command_sub79=command_sub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, command_sub79.getTree());

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:118:4: var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_ref_in_arg637);
					var_ref80=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref80.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "arg"


	public static class redirect_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "redirect"
	// com/caseystella/parser/bashast.g:119:1: redirect : ( ( BLANK !)* here_string_op ^ ( BLANK !)* fname | ( BLANK !)* here_doc_op ^ ( BLANK !)* fname EOL ! heredoc | ( BLANK )* redir_op ( BLANK )* DIGIT ( MINUS )? -> ^( REDIR redir_op DIGIT ( MINUS )? ) | ( BLANK )* redir_op ( BLANK )* redir_dest -> ^( REDIR redir_op redir_dest ) | ( BLANK !)* proc_sub );
	public final bashastParser.redirect_return redirect() throws RecognitionException {
		bashastParser.redirect_return retval = new bashastParser.redirect_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK81=null;
		Token BLANK83=null;
		Token BLANK85=null;
		Token BLANK87=null;
		Token EOL89=null;
		Token BLANK91=null;
		Token BLANK93=null;
		Token DIGIT94=null;
		Token MINUS95=null;
		Token BLANK96=null;
		Token BLANK98=null;
		Token BLANK100=null;
		ParserRuleReturnScope here_string_op82 =null;
		ParserRuleReturnScope fname84 =null;
		ParserRuleReturnScope here_doc_op86 =null;
		ParserRuleReturnScope fname88 =null;
		ParserRuleReturnScope heredoc90 =null;
		ParserRuleReturnScope redir_op92 =null;
		ParserRuleReturnScope redir_op97 =null;
		ParserRuleReturnScope redir_dest99 =null;
		ParserRuleReturnScope proc_sub101 =null;

		CommonTree BLANK81_tree=null;
		CommonTree BLANK83_tree=null;
		CommonTree BLANK85_tree=null;
		CommonTree BLANK87_tree=null;
		CommonTree EOL89_tree=null;
		CommonTree BLANK91_tree=null;
		CommonTree BLANK93_tree=null;
		CommonTree DIGIT94_tree=null;
		CommonTree MINUS95_tree=null;
		CommonTree BLANK96_tree=null;
		CommonTree BLANK98_tree=null;
		CommonTree BLANK100_tree=null;
		RewriteRuleTokenStream stream_DIGIT=new RewriteRuleTokenStream(adaptor,"token DIGIT");
		RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_redir_dest=new RewriteRuleSubtreeStream(adaptor,"rule redir_dest");
		RewriteRuleSubtreeStream stream_redir_op=new RewriteRuleSubtreeStream(adaptor,"rule redir_op");

		try {
			// com/caseystella/parser/bashast.g:119:9: ( ( BLANK !)* here_string_op ^ ( BLANK !)* fname | ( BLANK !)* here_doc_op ^ ( BLANK !)* fname EOL ! heredoc | ( BLANK )* redir_op ( BLANK )* DIGIT ( MINUS )? -> ^( REDIR redir_op DIGIT ( MINUS )? ) | ( BLANK )* redir_op ( BLANK )* redir_dest -> ^( REDIR redir_op redir_dest ) | ( BLANK !)* proc_sub )
			int alt52=5;
			switch ( input.LA(1) ) {
			case BLANK:
				{
				int LA52_1 = input.LA(2);
				if ( (synpred67_bashast()) ) {
					alt52=1;
				}
				else if ( (synpred70_bashast()) ) {
					alt52=2;
				}
				else if ( (synpred74_bashast()) ) {
					alt52=3;
				}
				else if ( (synpred77_bashast()) ) {
					alt52=4;
				}
				else if ( (true) ) {
					alt52=5;
				}

				}
				break;
			case HERE_STRING_OP:
				{
				alt52=1;
				}
				break;
			case LSHIFT:
				{
				alt52=2;
				}
				break;
			case AMP:
				{
				int LA52_4 = input.LA(2);
				if ( (synpred74_bashast()) ) {
					alt52=3;
				}
				else if ( (synpred77_bashast()) ) {
					alt52=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 52, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GT:
				{
				int LA52_5 = input.LA(2);
				if ( (synpred74_bashast()) ) {
					alt52=3;
				}
				else if ( (synpred77_bashast()) ) {
					alt52=4;
				}
				else if ( (true) ) {
					alt52=5;
				}

				}
				break;
			case LT:
				{
				int LA52_6 = input.LA(2);
				if ( (synpred74_bashast()) ) {
					alt52=3;
				}
				else if ( (synpred77_bashast()) ) {
					alt52=4;
				}
				else if ( (true) ) {
					alt52=5;
				}

				}
				break;
			case RSHIFT:
				{
				int LA52_7 = input.LA(2);
				if ( (synpred74_bashast()) ) {
					alt52=3;
				}
				else if ( (synpred77_bashast()) ) {
					alt52=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 52, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DIGIT:
				{
				int LA52_8 = input.LA(2);
				if ( (synpred74_bashast()) ) {
					alt52=3;
				}
				else if ( (synpred77_bashast()) ) {
					alt52=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 52, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 52, 0, input);
				throw nvae;
			}
			switch (alt52) {
				case 1 :
					// com/caseystella/parser/bashast.g:119:11: ( BLANK !)* here_string_op ^ ( BLANK !)* fname
					{
					root_0 = (CommonTree)adaptor.nil();


					// com/caseystella/parser/bashast.g:119:16: ( BLANK !)*
					loop42:
					while (true) {
						int alt42=2;
						int LA42_0 = input.LA(1);
						if ( (LA42_0==BLANK) ) {
							alt42=1;
						}

						switch (alt42) {
						case 1 :
							// com/caseystella/parser/bashast.g:119:16: BLANK !
							{
							BLANK81=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirect643); if (state.failed) return retval;
							}
							break;

						default :
							break loop42;
						}
					}

					pushFollow(FOLLOW_here_string_op_in_redirect647);
					here_string_op82=here_string_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(here_string_op82.getTree(), root_0);
					// com/caseystella/parser/bashast.g:119:40: ( BLANK !)*
					loop43:
					while (true) {
						int alt43=2;
						int LA43_0 = input.LA(1);
						if ( (LA43_0==BLANK) ) {
							alt43=1;
						}

						switch (alt43) {
						case 1 :
							// com/caseystella/parser/bashast.g:119:40: BLANK !
							{
							BLANK83=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirect650); if (state.failed) return retval;
							}
							break;

						default :
							break loop43;
						}
					}

					pushFollow(FOLLOW_fname_in_redirect654);
					fname84=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname84.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:120:4: ( BLANK !)* here_doc_op ^ ( BLANK !)* fname EOL ! heredoc
					{
					root_0 = (CommonTree)adaptor.nil();


					// com/caseystella/parser/bashast.g:120:9: ( BLANK !)*
					loop44:
					while (true) {
						int alt44=2;
						int LA44_0 = input.LA(1);
						if ( (LA44_0==BLANK) ) {
							alt44=1;
						}

						switch (alt44) {
						case 1 :
							// com/caseystella/parser/bashast.g:120:9: BLANK !
							{
							BLANK85=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirect659); if (state.failed) return retval;
							}
							break;

						default :
							break loop44;
						}
					}

					pushFollow(FOLLOW_here_doc_op_in_redirect663);
					here_doc_op86=here_doc_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(here_doc_op86.getTree(), root_0);
					// com/caseystella/parser/bashast.g:120:30: ( BLANK !)*
					loop45:
					while (true) {
						int alt45=2;
						int LA45_0 = input.LA(1);
						if ( (LA45_0==BLANK) ) {
							alt45=1;
						}

						switch (alt45) {
						case 1 :
							// com/caseystella/parser/bashast.g:120:30: BLANK !
							{
							BLANK87=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirect666); if (state.failed) return retval;
							}
							break;

						default :
							break loop45;
						}
					}

					pushFollow(FOLLOW_fname_in_redirect670);
					fname88=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname88.getTree());

					EOL89=(Token)match(input,EOL,FOLLOW_EOL_in_redirect672); if (state.failed) return retval;
					pushFollow(FOLLOW_heredoc_in_redirect675);
					heredoc90=heredoc();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, heredoc90.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:121:4: ( BLANK )* redir_op ( BLANK )* DIGIT ( MINUS )?
					{
					// com/caseystella/parser/bashast.g:121:4: ( BLANK )*
					loop46:
					while (true) {
						int alt46=2;
						int LA46_0 = input.LA(1);
						if ( (LA46_0==BLANK) ) {
							alt46=1;
						}

						switch (alt46) {
						case 1 :
							// com/caseystella/parser/bashast.g:121:4: BLANK
							{
							BLANK91=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirect680); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK91);

							}
							break;

						default :
							break loop46;
						}
					}

					pushFollow(FOLLOW_redir_op_in_redirect683);
					redir_op92=redir_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_redir_op.add(redir_op92.getTree());
					// com/caseystella/parser/bashast.g:121:20: ( BLANK )*
					loop47:
					while (true) {
						int alt47=2;
						int LA47_0 = input.LA(1);
						if ( (LA47_0==BLANK) ) {
							alt47=1;
						}

						switch (alt47) {
						case 1 :
							// com/caseystella/parser/bashast.g:121:20: BLANK
							{
							BLANK93=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirect685); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK93);

							}
							break;

						default :
							break loop47;
						}
					}

					DIGIT94=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_redirect688); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DIGIT.add(DIGIT94);

					// com/caseystella/parser/bashast.g:121:33: ( MINUS )?
					int alt48=2;
					int LA48_0 = input.LA(1);
					if ( (LA48_0==MINUS) ) {
						alt48=1;
					}
					switch (alt48) {
						case 1 :
							// com/caseystella/parser/bashast.g:121:33: MINUS
							{
							MINUS95=(Token)match(input,MINUS,FOLLOW_MINUS_in_redirect690); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_MINUS.add(MINUS95);

							}
							break;

					}

					// AST REWRITE
					// elements: redir_op, MINUS, DIGIT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 121:40: -> ^( REDIR redir_op DIGIT ( MINUS )? )
					{
						// com/caseystella/parser/bashast.g:121:43: ^( REDIR redir_op DIGIT ( MINUS )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REDIR, "REDIR"), root_1);
						adaptor.addChild(root_1, stream_redir_op.nextTree());
						adaptor.addChild(root_1, stream_DIGIT.nextNode());
						// com/caseystella/parser/bashast.g:121:66: ( MINUS )?
						if ( stream_MINUS.hasNext() ) {
							adaptor.addChild(root_1, stream_MINUS.nextNode());
						}
						stream_MINUS.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:122:4: ( BLANK )* redir_op ( BLANK )* redir_dest
					{
					// com/caseystella/parser/bashast.g:122:4: ( BLANK )*
					loop49:
					while (true) {
						int alt49=2;
						int LA49_0 = input.LA(1);
						if ( (LA49_0==BLANK) ) {
							alt49=1;
						}

						switch (alt49) {
						case 1 :
							// com/caseystella/parser/bashast.g:122:4: BLANK
							{
							BLANK96=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirect709); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK96);

							}
							break;

						default :
							break loop49;
						}
					}

					pushFollow(FOLLOW_redir_op_in_redirect712);
					redir_op97=redir_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_redir_op.add(redir_op97.getTree());
					// com/caseystella/parser/bashast.g:122:20: ( BLANK )*
					loop50:
					while (true) {
						int alt50=2;
						int LA50_0 = input.LA(1);
						if ( (LA50_0==BLANK) ) {
							alt50=1;
						}

						switch (alt50) {
						case 1 :
							// com/caseystella/parser/bashast.g:122:20: BLANK
							{
							BLANK98=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirect714); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK98);

							}
							break;

						default :
							break loop50;
						}
					}

					pushFollow(FOLLOW_redir_dest_in_redirect717);
					redir_dest99=redir_dest();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_redir_dest.add(redir_dest99.getTree());
					// AST REWRITE
					// elements: redir_dest, redir_op
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 122:38: -> ^( REDIR redir_op redir_dest )
					{
						// com/caseystella/parser/bashast.g:122:41: ^( REDIR redir_op redir_dest )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REDIR, "REDIR"), root_1);
						adaptor.addChild(root_1, stream_redir_op.nextTree());
						adaptor.addChild(root_1, stream_redir_dest.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:123:4: ( BLANK !)* proc_sub
					{
					root_0 = (CommonTree)adaptor.nil();


					// com/caseystella/parser/bashast.g:123:9: ( BLANK !)*
					loop51:
					while (true) {
						int alt51=2;
						int LA51_0 = input.LA(1);
						if ( (LA51_0==BLANK) ) {
							alt51=1;
						}

						switch (alt51) {
						case 1 :
							// com/caseystella/parser/bashast.g:123:9: BLANK !
							{
							BLANK100=(Token)match(input,BLANK,FOLLOW_BLANK_in_redirect732); if (state.failed) return retval;
							}
							break;

						default :
							break loop51;
						}
					}

					pushFollow(FOLLOW_proc_sub_in_redirect736);
					proc_sub101=proc_sub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, proc_sub101.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "redirect"


	public static class redir_dest_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "redir_dest"
	// com/caseystella/parser/bashast.g:124:1: redir_dest : ( fname | file_desc_as_file );
	public final bashastParser.redir_dest_return redir_dest() throws RecognitionException {
		bashastParser.redir_dest_return retval = new bashastParser.redir_dest_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope fname102 =null;
		ParserRuleReturnScope file_desc_as_file103 =null;


		try {
			// com/caseystella/parser/bashast.g:125:2: ( fname | file_desc_as_file )
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==ARITH_ASSIGN||(LA53_0 >= AT && LA53_0 <= BANG)||LA53_0==BOP||(LA53_0 >= CARET && LA53_0 <= CASE)||LA53_0==COLON||(LA53_0 >= DEC && LA53_0 <= DOTDOT)||(LA53_0 >= ELIF && LA53_0 <= ELSE)||LA53_0==EQUALS||(LA53_0 >= ESAC && LA53_0 <= ESC_CHAR)||LA53_0==FI||LA53_0==FOR||LA53_0==FUNCTION||(LA53_0 >= IF && LA53_0 <= INC)||LA53_0==LETTER||LA53_0==LSQUARE||(LA53_0 >= MINUS && LA53_0 <= NAME)||(LA53_0 >= NQSTR && LA53_0 <= NUMBER)||(LA53_0 >= PCT && LA53_0 <= PCTPCT)||LA53_0==PLUS||(LA53_0 >= QMARK && LA53_0 <= QUOTE)||(LA53_0 >= RSQUARE && LA53_0 <= SELECT)||(LA53_0 >= SLASH && LA53_0 <= SQUOTE)||(LA53_0 >= TEST && LA53_0 <= UOP)||LA53_0==WHILE||LA53_0==138) ) {
				alt53=1;
			}
			else if ( (LA53_0==AMP) ) {
				alt53=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 53, 0, input);
				throw nvae;
			}

			switch (alt53) {
				case 1 :
					// com/caseystella/parser/bashast.g:125:4: fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fname_in_redir_dest744);
					fname102=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname102.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:126:4: file_desc_as_file
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_file_desc_as_file_in_redir_dest750);
					file_desc_as_file103=file_desc_as_file();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, file_desc_as_file103.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "redir_dest"


	public static class file_desc_as_file_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "file_desc_as_file"
	// com/caseystella/parser/bashast.g:127:1: file_desc_as_file : ( AMP DIGIT -> FILE_DESCRIPTOR[$DIGIT] | AMP DIGIT MINUS -> FILE_DESCRIPTOR_MOVE[$DIGIT] );
	public final bashastParser.file_desc_as_file_return file_desc_as_file() throws RecognitionException {
		bashastParser.file_desc_as_file_return retval = new bashastParser.file_desc_as_file_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token AMP104=null;
		Token DIGIT105=null;
		Token AMP106=null;
		Token DIGIT107=null;
		Token MINUS108=null;

		CommonTree AMP104_tree=null;
		CommonTree DIGIT105_tree=null;
		CommonTree AMP106_tree=null;
		CommonTree DIGIT107_tree=null;
		CommonTree MINUS108_tree=null;
		RewriteRuleTokenStream stream_DIGIT=new RewriteRuleTokenStream(adaptor,"token DIGIT");
		RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
		RewriteRuleTokenStream stream_AMP=new RewriteRuleTokenStream(adaptor,"token AMP");

		try {
			// com/caseystella/parser/bashast.g:128:2: ( AMP DIGIT -> FILE_DESCRIPTOR[$DIGIT] | AMP DIGIT MINUS -> FILE_DESCRIPTOR_MOVE[$DIGIT] )
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==AMP) ) {
				int LA54_1 = input.LA(2);
				if ( (LA54_1==DIGIT) ) {
					int LA54_2 = input.LA(3);
					if ( (LA54_2==MINUS) ) {
						alt54=2;
					}
					else if ( (LA54_2==EOF||LA54_2==AMP||LA54_2==BLANK||LA54_2==DIGIT||LA54_2==DOUBLE_SEMIC||LA54_2==EOL||(LA54_2 >= GT && LA54_2 <= HERE_STRING_OP)||(LA54_2 >= LOGICAND && LA54_2 <= LOGICOR)||LA54_2==LSHIFT||LA54_2==LT||LA54_2==PIPE||LA54_2==RPAREN||LA54_2==RSHIFT||LA54_2==SEMIC||LA54_2==TICK) ) {
						alt54=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 54, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 54, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 54, 0, input);
				throw nvae;
			}

			switch (alt54) {
				case 1 :
					// com/caseystella/parser/bashast.g:128:4: AMP DIGIT
					{
					AMP104=(Token)match(input,AMP,FOLLOW_AMP_in_file_desc_as_file759); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AMP.add(AMP104);

					DIGIT105=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_file_desc_as_file761); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DIGIT.add(DIGIT105);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 128:14: -> FILE_DESCRIPTOR[$DIGIT]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(FILE_DESCRIPTOR, DIGIT105));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:129:4: AMP DIGIT MINUS
					{
					AMP106=(Token)match(input,AMP,FOLLOW_AMP_in_file_desc_as_file771); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AMP.add(AMP106);

					DIGIT107=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_file_desc_as_file773); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DIGIT.add(DIGIT107);

					MINUS108=(Token)match(input,MINUS,FOLLOW_MINUS_in_file_desc_as_file775); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_MINUS.add(MINUS108);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 129:20: -> FILE_DESCRIPTOR_MOVE[$DIGIT]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(FILE_DESCRIPTOR_MOVE, DIGIT107));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "file_desc_as_file"


	public static class heredoc_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "heredoc"
	// com/caseystella/parser/bashast.g:130:1: heredoc : ( fname EOL !)* ;
	public final bashastParser.heredoc_return heredoc() throws RecognitionException {
		bashastParser.heredoc_return retval = new bashastParser.heredoc_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token EOL110=null;
		ParserRuleReturnScope fname109 =null;

		CommonTree EOL110_tree=null;

		try {
			// com/caseystella/parser/bashast.g:130:9: ( ( fname EOL !)* )
			// com/caseystella/parser/bashast.g:130:11: ( fname EOL !)*
			{
			root_0 = (CommonTree)adaptor.nil();


			// com/caseystella/parser/bashast.g:130:11: ( fname EOL !)*
			loop55:
			while (true) {
				int alt55=2;
				switch ( input.LA(1) ) {
				case TICK:
					{
					int LA55_2 = input.LA(2);
					if ( (synpred81_bashast()) ) {
						alt55=1;
					}

					}
					break;
				case DIGIT:
					{
					int LA55_3 = input.LA(2);
					if ( (LA55_3==DIGIT) ) {
						int LA55_5 = input.LA(3);
						if ( (LA55_5==DIGIT) ) {
							int LA55_6 = input.LA(4);
							if ( (LA55_6==DIGIT) ) {
								int LA55_7 = input.LA(5);
								if ( (LA55_7==DIGIT) ) {
									int LA55_8 = input.LA(6);
									if ( (synpred81_bashast()) ) {
										alt55=1;
									}

								}
								else if ( (LA55_7==ARITH_ASSIGN||(LA55_7 >= AT && LA55_7 <= BANG)||LA55_7==BOP||(LA55_7 >= CARET && LA55_7 <= CASE)||LA55_7==COLON||LA55_7==DEC||(LA55_7 >= DO && LA55_7 <= DOTDOT)||(LA55_7 >= ELIF && LA55_7 <= EQUALS)||(LA55_7 >= ESAC && LA55_7 <= ESC_CHAR)||LA55_7==FI||LA55_7==FOR||LA55_7==FUNCTION||(LA55_7 >= IF && LA55_7 <= INC)||LA55_7==LETTER||LA55_7==LSQUARE||(LA55_7 >= MINUS && LA55_7 <= NAME)||(LA55_7 >= NQSTR && LA55_7 <= NUMBER)||(LA55_7 >= PCT && LA55_7 <= PCTPCT)||LA55_7==PLUS||(LA55_7 >= POUND && LA55_7 <= POUNDPOUND)||(LA55_7 >= QMARK && LA55_7 <= QUOTE)||(LA55_7 >= RSQUARE && LA55_7 <= SELECT)||(LA55_7 >= SLASH && LA55_7 <= SQUOTE)||(LA55_7 >= TEST && LA55_7 <= UOP)||LA55_7==WHILE||LA55_7==138) ) {
									alt55=1;
								}

							}
							else if ( (LA55_6==ARITH_ASSIGN||(LA55_6 >= AT && LA55_6 <= BANG)||LA55_6==BOP||(LA55_6 >= CARET && LA55_6 <= CASE)||LA55_6==COLON||LA55_6==DEC||(LA55_6 >= DO && LA55_6 <= DOTDOT)||(LA55_6 >= ELIF && LA55_6 <= EQUALS)||(LA55_6 >= ESAC && LA55_6 <= ESC_CHAR)||LA55_6==FI||LA55_6==FOR||LA55_6==FUNCTION||(LA55_6 >= IF && LA55_6 <= INC)||LA55_6==LETTER||LA55_6==LSQUARE||(LA55_6 >= MINUS && LA55_6 <= NAME)||(LA55_6 >= NQSTR && LA55_6 <= NUMBER)||(LA55_6 >= PCT && LA55_6 <= PCTPCT)||LA55_6==PLUS||(LA55_6 >= POUND && LA55_6 <= POUNDPOUND)||(LA55_6 >= QMARK && LA55_6 <= QUOTE)||(LA55_6 >= RSQUARE && LA55_6 <= SELECT)||(LA55_6 >= SLASH && LA55_6 <= SQUOTE)||(LA55_6 >= TEST && LA55_6 <= UOP)||LA55_6==WHILE||LA55_6==138) ) {
								alt55=1;
							}

						}
						else if ( (LA55_5==ARITH_ASSIGN||(LA55_5 >= AT && LA55_5 <= BANG)||LA55_5==BOP||(LA55_5 >= CARET && LA55_5 <= CASE)||LA55_5==COLON||LA55_5==DEC||(LA55_5 >= DO && LA55_5 <= DOTDOT)||(LA55_5 >= ELIF && LA55_5 <= EQUALS)||(LA55_5 >= ESAC && LA55_5 <= ESC_CHAR)||LA55_5==FI||LA55_5==FOR||LA55_5==FUNCTION||(LA55_5 >= IF && LA55_5 <= INC)||LA55_5==LETTER||LA55_5==LSQUARE||(LA55_5 >= MINUS && LA55_5 <= NAME)||(LA55_5 >= NQSTR && LA55_5 <= NUMBER)||(LA55_5 >= PCT && LA55_5 <= PCTPCT)||LA55_5==PLUS||(LA55_5 >= POUND && LA55_5 <= POUNDPOUND)||(LA55_5 >= QMARK && LA55_5 <= QUOTE)||(LA55_5 >= RSQUARE && LA55_5 <= SELECT)||(LA55_5 >= SLASH && LA55_5 <= SQUOTE)||(LA55_5 >= TEST && LA55_5 <= UOP)||LA55_5==WHILE||LA55_5==138) ) {
							alt55=1;
						}

					}
					else if ( (LA55_3==ARITH_ASSIGN||(LA55_3 >= AT && LA55_3 <= BANG)||LA55_3==BOP||(LA55_3 >= CARET && LA55_3 <= CASE)||LA55_3==COLON||LA55_3==DEC||(LA55_3 >= DO && LA55_3 <= DOTDOT)||(LA55_3 >= ELIF && LA55_3 <= EQUALS)||(LA55_3 >= ESAC && LA55_3 <= ESC_CHAR)||LA55_3==FI||LA55_3==FOR||LA55_3==FUNCTION||(LA55_3 >= IF && LA55_3 <= INC)||LA55_3==LETTER||LA55_3==LSQUARE||(LA55_3 >= MINUS && LA55_3 <= NAME)||(LA55_3 >= NQSTR && LA55_3 <= NUMBER)||(LA55_3 >= PCT && LA55_3 <= PCTPCT)||LA55_3==PLUS||(LA55_3 >= POUND && LA55_3 <= POUNDPOUND)||(LA55_3 >= QMARK && LA55_3 <= QUOTE)||(LA55_3 >= RSQUARE && LA55_3 <= SELECT)||(LA55_3 >= SLASH && LA55_3 <= SQUOTE)||(LA55_3 >= TEST && LA55_3 <= UOP)||LA55_3==WHILE||LA55_3==138) ) {
						alt55=1;
					}

					}
					break;
				case ARITH_ASSIGN:
				case AT:
				case BANG:
				case BOP:
				case CARET:
				case CASE:
				case COLON:
				case DEC:
				case DO:
				case DOLLAR:
				case DONE:
				case DOT:
				case DOTDOT:
				case ELIF:
				case ELSE:
				case EQUALS:
				case ESAC:
				case ESC_CHAR:
				case FI:
				case FOR:
				case FUNCTION:
				case IF:
				case IN:
				case INC:
				case LETTER:
				case LSQUARE:
				case MINUS:
				case NAME:
				case NQSTR:
				case NUMBER:
				case PCT:
				case PCTPCT:
				case PLUS:
				case QMARK:
				case QUOTE:
				case RSQUARE:
				case SELECT:
				case SLASH:
				case SQUOTE:
				case TEST:
				case THEN:
				case TILDE:
				case TIME:
				case TIMES:
				case UNTIL:
				case UOP:
				case WHILE:
				case 138:
					{
					alt55=1;
					}
					break;
				}
				switch (alt55) {
				case 1 :
					// com/caseystella/parser/bashast.g:130:12: fname EOL !
					{
					pushFollow(FOLLOW_fname_in_heredoc788);
					fname109=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname109.getTree());

					EOL110=(Token)match(input,EOL,FOLLOW_EOL_in_heredoc790); if (state.failed) return retval;
					}
					break;

				default :
					break loop55;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "heredoc"


	public static class here_string_op_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "here_string_op"
	// com/caseystella/parser/bashast.g:131:1: here_string_op : HERE_STRING_OP ;
	public final bashastParser.here_string_op_return here_string_op() throws RecognitionException {
		bashastParser.here_string_op_return retval = new bashastParser.here_string_op_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token HERE_STRING_OP111=null;

		CommonTree HERE_STRING_OP111_tree=null;

		try {
			// com/caseystella/parser/bashast.g:132:2: ( HERE_STRING_OP )
			// com/caseystella/parser/bashast.g:132:4: HERE_STRING_OP
			{
			root_0 = (CommonTree)adaptor.nil();


			HERE_STRING_OP111=(Token)match(input,HERE_STRING_OP,FOLLOW_HERE_STRING_OP_in_here_string_op801); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			HERE_STRING_OP111_tree = (CommonTree)adaptor.create(HERE_STRING_OP111);
			adaptor.addChild(root_0, HERE_STRING_OP111_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "here_string_op"


	public static class here_doc_op_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "here_doc_op"
	// com/caseystella/parser/bashast.g:133:1: here_doc_op : ( LSHIFT MINUS -> OP[\"<<-\"] | LSHIFT -> OP[\"<<\"] );
	public final bashastParser.here_doc_op_return here_doc_op() throws RecognitionException {
		bashastParser.here_doc_op_return retval = new bashastParser.here_doc_op_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LSHIFT112=null;
		Token MINUS113=null;
		Token LSHIFT114=null;

		CommonTree LSHIFT112_tree=null;
		CommonTree MINUS113_tree=null;
		CommonTree LSHIFT114_tree=null;
		RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
		RewriteRuleTokenStream stream_LSHIFT=new RewriteRuleTokenStream(adaptor,"token LSHIFT");

		try {
			// com/caseystella/parser/bashast.g:134:2: ( LSHIFT MINUS -> OP[\"<<-\"] | LSHIFT -> OP[\"<<\"] )
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==LSHIFT) ) {
				int LA56_1 = input.LA(2);
				if ( (LA56_1==MINUS) ) {
					int LA56_2 = input.LA(3);
					if ( (synpred82_bashast()) ) {
						alt56=1;
					}
					else if ( (true) ) {
						alt56=2;
					}

				}
				else if ( (LA56_1==ARITH_ASSIGN||(LA56_1 >= AT && LA56_1 <= BOP)||(LA56_1 >= CARET && LA56_1 <= CASE)||LA56_1==COLON||(LA56_1 >= DEC && LA56_1 <= DOTDOT)||(LA56_1 >= ELIF && LA56_1 <= ELSE)||LA56_1==EQUALS||(LA56_1 >= ESAC && LA56_1 <= ESC_CHAR)||LA56_1==FI||LA56_1==FOR||LA56_1==FUNCTION||(LA56_1 >= IF && LA56_1 <= INC)||LA56_1==LETTER||LA56_1==LSQUARE||LA56_1==NAME||(LA56_1 >= NQSTR && LA56_1 <= NUMBER)||(LA56_1 >= PCT && LA56_1 <= PCTPCT)||LA56_1==PLUS||(LA56_1 >= QMARK && LA56_1 <= QUOTE)||(LA56_1 >= RSQUARE && LA56_1 <= SELECT)||(LA56_1 >= SLASH && LA56_1 <= SQUOTE)||(LA56_1 >= TEST && LA56_1 <= UOP)||LA56_1==WHILE||LA56_1==138) ) {
					alt56=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 56, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 56, 0, input);
				throw nvae;
			}

			switch (alt56) {
				case 1 :
					// com/caseystella/parser/bashast.g:134:4: LSHIFT MINUS
					{
					LSHIFT112=(Token)match(input,LSHIFT,FOLLOW_LSHIFT_in_here_doc_op809); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSHIFT.add(LSHIFT112);

					MINUS113=(Token)match(input,MINUS,FOLLOW_MINUS_in_here_doc_op811); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_MINUS.add(MINUS113);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 134:17: -> OP[\"<<-\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "<<-"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:135:4: LSHIFT
					{
					LSHIFT114=(Token)match(input,LSHIFT,FOLLOW_LSHIFT_in_here_doc_op821); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSHIFT.add(LSHIFT114);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 135:11: -> OP[\"<<\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "<<"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "here_doc_op"


	public static class redir_op_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "redir_op"
	// com/caseystella/parser/bashast.g:136:1: redir_op : ( AMP LT -> OP[\"&<\"] | GT AMP -> OP[\">&\"] | LT AMP -> OP[\"<&\"] | LT GT -> OP[\"<>\"] | RSHIFT -> OP[\">>\"] | AMP GT -> OP[\"&>\"] | AMP RSHIFT -> OP[\"&>>\"] | LT | GT | DIGIT redir_op );
	public final bashastParser.redir_op_return redir_op() throws RecognitionException {
		bashastParser.redir_op_return retval = new bashastParser.redir_op_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token AMP115=null;
		Token LT116=null;
		Token GT117=null;
		Token AMP118=null;
		Token LT119=null;
		Token AMP120=null;
		Token LT121=null;
		Token GT122=null;
		Token RSHIFT123=null;
		Token AMP124=null;
		Token GT125=null;
		Token AMP126=null;
		Token RSHIFT127=null;
		Token LT128=null;
		Token GT129=null;
		Token DIGIT130=null;
		ParserRuleReturnScope redir_op131 =null;

		CommonTree AMP115_tree=null;
		CommonTree LT116_tree=null;
		CommonTree GT117_tree=null;
		CommonTree AMP118_tree=null;
		CommonTree LT119_tree=null;
		CommonTree AMP120_tree=null;
		CommonTree LT121_tree=null;
		CommonTree GT122_tree=null;
		CommonTree RSHIFT123_tree=null;
		CommonTree AMP124_tree=null;
		CommonTree GT125_tree=null;
		CommonTree AMP126_tree=null;
		CommonTree RSHIFT127_tree=null;
		CommonTree LT128_tree=null;
		CommonTree GT129_tree=null;
		CommonTree DIGIT130_tree=null;
		RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
		RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
		RewriteRuleTokenStream stream_RSHIFT=new RewriteRuleTokenStream(adaptor,"token RSHIFT");
		RewriteRuleTokenStream stream_AMP=new RewriteRuleTokenStream(adaptor,"token AMP");

		try {
			// com/caseystella/parser/bashast.g:136:9: ( AMP LT -> OP[\"&<\"] | GT AMP -> OP[\">&\"] | LT AMP -> OP[\"<&\"] | LT GT -> OP[\"<>\"] | RSHIFT -> OP[\">>\"] | AMP GT -> OP[\"&>\"] | AMP RSHIFT -> OP[\"&>>\"] | LT | GT | DIGIT redir_op )
			int alt57=10;
			switch ( input.LA(1) ) {
			case AMP:
				{
				switch ( input.LA(2) ) {
				case LT:
					{
					alt57=1;
					}
					break;
				case GT:
					{
					alt57=6;
					}
					break;
				case RSHIFT:
					{
					alt57=7;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 57, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case GT:
				{
				int LA57_2 = input.LA(2);
				if ( (LA57_2==AMP) ) {
					int LA57_9 = input.LA(3);
					if ( (LA57_9==DIGIT) ) {
						int LA57_14 = input.LA(4);
						if ( (synpred84_bashast()) ) {
							alt57=2;
						}
						else if ( (synpred91_bashast()) ) {
							alt57=9;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 57, 14, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA57_9==AMP||LA57_9==ARITH_ASSIGN||(LA57_9 >= AT && LA57_9 <= BOP)||(LA57_9 >= CARET && LA57_9 <= CASE)||LA57_9==COLON||LA57_9==DEC||(LA57_9 >= DO && LA57_9 <= DOTDOT)||(LA57_9 >= ELIF && LA57_9 <= ELSE)||LA57_9==EQUALS||(LA57_9 >= ESAC && LA57_9 <= ESC_CHAR)||LA57_9==FI||LA57_9==FOR||LA57_9==FUNCTION||(LA57_9 >= IF && LA57_9 <= INC)||LA57_9==LETTER||LA57_9==LSQUARE||(LA57_9 >= MINUS && LA57_9 <= NAME)||(LA57_9 >= NQSTR && LA57_9 <= NUMBER)||(LA57_9 >= PCT && LA57_9 <= PCTPCT)||LA57_9==PLUS||(LA57_9 >= QMARK && LA57_9 <= QUOTE)||(LA57_9 >= RSQUARE && LA57_9 <= SELECT)||(LA57_9 >= SLASH && LA57_9 <= SQUOTE)||(LA57_9 >= TEST && LA57_9 <= UOP)||LA57_9==WHILE||LA57_9==138) ) {
						alt57=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 57, 9, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA57_2==ARITH_ASSIGN||(LA57_2 >= AT && LA57_2 <= BOP)||(LA57_2 >= CARET && LA57_2 <= CASE)||LA57_2==COLON||(LA57_2 >= DEC && LA57_2 <= DOTDOT)||(LA57_2 >= ELIF && LA57_2 <= ELSE)||LA57_2==EQUALS||(LA57_2 >= ESAC && LA57_2 <= ESC_CHAR)||LA57_2==FI||LA57_2==FOR||LA57_2==FUNCTION||(LA57_2 >= IF && LA57_2 <= INC)||LA57_2==LETTER||LA57_2==LSQUARE||(LA57_2 >= MINUS && LA57_2 <= NAME)||(LA57_2 >= NQSTR && LA57_2 <= NUMBER)||(LA57_2 >= PCT && LA57_2 <= PCTPCT)||LA57_2==PLUS||(LA57_2 >= QMARK && LA57_2 <= QUOTE)||(LA57_2 >= RSQUARE && LA57_2 <= SELECT)||(LA57_2 >= SLASH && LA57_2 <= SQUOTE)||(LA57_2 >= TEST && LA57_2 <= UOP)||LA57_2==WHILE||LA57_2==138) ) {
					alt57=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 57, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LT:
				{
				switch ( input.LA(2) ) {
				case AMP:
					{
					int LA57_11 = input.LA(3);
					if ( (LA57_11==DIGIT) ) {
						int LA57_16 = input.LA(4);
						if ( (synpred85_bashast()) ) {
							alt57=3;
						}
						else if ( (synpred90_bashast()) ) {
							alt57=8;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 57, 16, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA57_11==AMP||LA57_11==ARITH_ASSIGN||(LA57_11 >= AT && LA57_11 <= BOP)||(LA57_11 >= CARET && LA57_11 <= CASE)||LA57_11==COLON||LA57_11==DEC||(LA57_11 >= DO && LA57_11 <= DOTDOT)||(LA57_11 >= ELIF && LA57_11 <= ELSE)||LA57_11==EQUALS||(LA57_11 >= ESAC && LA57_11 <= ESC_CHAR)||LA57_11==FI||LA57_11==FOR||LA57_11==FUNCTION||(LA57_11 >= IF && LA57_11 <= INC)||LA57_11==LETTER||LA57_11==LSQUARE||(LA57_11 >= MINUS && LA57_11 <= NAME)||(LA57_11 >= NQSTR && LA57_11 <= NUMBER)||(LA57_11 >= PCT && LA57_11 <= PCTPCT)||LA57_11==PLUS||(LA57_11 >= QMARK && LA57_11 <= QUOTE)||(LA57_11 >= RSQUARE && LA57_11 <= SELECT)||(LA57_11 >= SLASH && LA57_11 <= SQUOTE)||(LA57_11 >= TEST && LA57_11 <= UOP)||LA57_11==WHILE||LA57_11==138) ) {
						alt57=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 57, 11, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case GT:
					{
					alt57=4;
					}
					break;
				case ARITH_ASSIGN:
				case AT:
				case BANG:
				case BLANK:
				case BOP:
				case CARET:
				case CASE:
				case COLON:
				case DEC:
				case DIGIT:
				case DO:
				case DOLLAR:
				case DONE:
				case DOT:
				case DOTDOT:
				case ELIF:
				case ELSE:
				case EQUALS:
				case ESAC:
				case ESC_CHAR:
				case FI:
				case FOR:
				case FUNCTION:
				case IF:
				case IN:
				case INC:
				case LETTER:
				case LSQUARE:
				case MINUS:
				case NAME:
				case NQSTR:
				case NUMBER:
				case PCT:
				case PCTPCT:
				case PLUS:
				case QMARK:
				case QUOTE:
				case RSQUARE:
				case SELECT:
				case SLASH:
				case SQUOTE:
				case TEST:
				case THEN:
				case TICK:
				case TILDE:
				case TIME:
				case TIMES:
				case UNTIL:
				case UOP:
				case WHILE:
				case 138:
					{
					alt57=8;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 57, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case RSHIFT:
				{
				alt57=5;
				}
				break;
			case DIGIT:
				{
				alt57=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 57, 0, input);
				throw nvae;
			}
			switch (alt57) {
				case 1 :
					// com/caseystella/parser/bashast.g:136:11: AMP LT
					{
					AMP115=(Token)match(input,AMP,FOLLOW_AMP_in_redir_op832); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AMP.add(AMP115);

					LT116=(Token)match(input,LT,FOLLOW_LT_in_redir_op834); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LT.add(LT116);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 136:18: -> OP[\"&<\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "&<"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:137:4: GT AMP
					{
					GT117=(Token)match(input,GT,FOLLOW_GT_in_redir_op844); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_GT.add(GT117);

					AMP118=(Token)match(input,AMP,FOLLOW_AMP_in_redir_op846); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AMP.add(AMP118);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 137:11: -> OP[\">&\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, ">&"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:138:4: LT AMP
					{
					LT119=(Token)match(input,LT,FOLLOW_LT_in_redir_op856); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LT.add(LT119);

					AMP120=(Token)match(input,AMP,FOLLOW_AMP_in_redir_op858); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AMP.add(AMP120);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 138:11: -> OP[\"<&\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "<&"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:139:4: LT GT
					{
					LT121=(Token)match(input,LT,FOLLOW_LT_in_redir_op868); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LT.add(LT121);

					GT122=(Token)match(input,GT,FOLLOW_GT_in_redir_op870); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_GT.add(GT122);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 139:10: -> OP[\"<>\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "<>"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:140:4: RSHIFT
					{
					RSHIFT123=(Token)match(input,RSHIFT,FOLLOW_RSHIFT_in_redir_op880); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSHIFT.add(RSHIFT123);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 140:11: -> OP[\">>\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, ">>"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:141:4: AMP GT
					{
					AMP124=(Token)match(input,AMP,FOLLOW_AMP_in_redir_op890); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AMP.add(AMP124);

					GT125=(Token)match(input,GT,FOLLOW_GT_in_redir_op892); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_GT.add(GT125);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 141:11: -> OP[\"&>\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "&>"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:142:4: AMP RSHIFT
					{
					AMP126=(Token)match(input,AMP,FOLLOW_AMP_in_redir_op902); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AMP.add(AMP126);

					RSHIFT127=(Token)match(input,RSHIFT,FOLLOW_RSHIFT_in_redir_op904); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSHIFT.add(RSHIFT127);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 142:15: -> OP[\"&>>\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "&>>"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:143:4: LT
					{
					root_0 = (CommonTree)adaptor.nil();


					LT128=(Token)match(input,LT,FOLLOW_LT_in_redir_op915); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LT128_tree = (CommonTree)adaptor.create(LT128);
					adaptor.addChild(root_0, LT128_tree);
					}

					}
					break;
				case 9 :
					// com/caseystella/parser/bashast.g:144:4: GT
					{
					root_0 = (CommonTree)adaptor.nil();


					GT129=(Token)match(input,GT,FOLLOW_GT_in_redir_op920); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					GT129_tree = (CommonTree)adaptor.create(GT129);
					adaptor.addChild(root_0, GT129_tree);
					}

					}
					break;
				case 10 :
					// com/caseystella/parser/bashast.g:145:4: DIGIT redir_op
					{
					root_0 = (CommonTree)adaptor.nil();


					DIGIT130=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_redir_op925); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIGIT130_tree = (CommonTree)adaptor.create(DIGIT130);
					adaptor.addChild(root_0, DIGIT130_tree);
					}

					pushFollow(FOLLOW_redir_op_in_redir_op927);
					redir_op131=redir_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, redir_op131.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "redir_op"


	public static class brace_expansion_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "brace_expansion"
	// com/caseystella/parser/bashast.g:146:1: brace_expansion : (pre= fname )? brace (post= fname )? -> ^( BRACE_EXP ( $pre)? brace ( $post)? ) ;
	public final bashastParser.brace_expansion_return brace_expansion() throws RecognitionException {
		bashastParser.brace_expansion_return retval = new bashastParser.brace_expansion_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope pre =null;
		ParserRuleReturnScope post =null;
		ParserRuleReturnScope brace132 =null;

		RewriteRuleSubtreeStream stream_brace=new RewriteRuleSubtreeStream(adaptor,"rule brace");
		RewriteRuleSubtreeStream stream_fname=new RewriteRuleSubtreeStream(adaptor,"rule fname");

		try {
			// com/caseystella/parser/bashast.g:147:2: ( (pre= fname )? brace (post= fname )? -> ^( BRACE_EXP ( $pre)? brace ( $post)? ) )
			// com/caseystella/parser/bashast.g:147:4: (pre= fname )? brace (post= fname )?
			{
			// com/caseystella/parser/bashast.g:147:7: (pre= fname )?
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==ARITH_ASSIGN||(LA58_0 >= AT && LA58_0 <= BANG)||LA58_0==BOP||(LA58_0 >= CARET && LA58_0 <= CASE)||LA58_0==COLON||(LA58_0 >= DEC && LA58_0 <= DOTDOT)||(LA58_0 >= ELIF && LA58_0 <= ELSE)||LA58_0==EQUALS||(LA58_0 >= ESAC && LA58_0 <= ESC_CHAR)||LA58_0==FI||LA58_0==FOR||LA58_0==FUNCTION||(LA58_0 >= IF && LA58_0 <= INC)||LA58_0==LETTER||LA58_0==LSQUARE||(LA58_0 >= MINUS && LA58_0 <= NAME)||(LA58_0 >= NQSTR && LA58_0 <= NUMBER)||(LA58_0 >= PCT && LA58_0 <= PCTPCT)||LA58_0==PLUS||(LA58_0 >= QMARK && LA58_0 <= QUOTE)||(LA58_0 >= RSQUARE && LA58_0 <= SELECT)||(LA58_0 >= SLASH && LA58_0 <= SQUOTE)||(LA58_0 >= TEST && LA58_0 <= UOP)||LA58_0==WHILE||LA58_0==138) ) {
				alt58=1;
			}
			switch (alt58) {
				case 1 :
					// com/caseystella/parser/bashast.g:147:7: pre= fname
					{
					pushFollow(FOLLOW_fname_in_brace_expansion937);
					pre=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(pre.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_brace_in_brace_expansion940);
			brace132=brace();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_brace.add(brace132.getTree());
			// com/caseystella/parser/bashast.g:147:25: (post= fname )?
			int alt59=2;
			switch ( input.LA(1) ) {
				case ARITH_ASSIGN:
				case AT:
				case CARET:
				case CASE:
				case COLON:
				case DEC:
				case DO:
				case DOLLAR:
				case DONE:
				case DOT:
				case DOTDOT:
				case ELIF:
				case ELSE:
				case ESAC:
				case ESC_CHAR:
				case FI:
				case FOR:
				case FUNCTION:
				case IF:
				case IN:
				case INC:
				case LETTER:
				case LSQUARE:
				case MINUS:
				case NAME:
				case NQSTR:
				case NUMBER:
				case PCT:
				case PCTPCT:
				case PLUS:
				case QMARK:
				case QUOTE:
				case RSQUARE:
				case SELECT:
				case SLASH:
				case SQUOTE:
				case TEST:
				case THEN:
				case TILDE:
				case TIME:
				case TIMES:
				case UNTIL:
				case UOP:
				case WHILE:
				case 138:
					{
					alt59=1;
					}
					break;
				case BANG:
					{
					int LA59_6 = input.LA(2);
					if ( (synpred93_bashast()) ) {
						alt59=1;
					}
					}
					break;
				case TICK:
					{
					int LA59_8 = input.LA(2);
					if ( (synpred93_bashast()) ) {
						alt59=1;
					}
					}
					break;
				case DIGIT:
					{
					int LA59_11 = input.LA(2);
					if ( (synpred93_bashast()) ) {
						alt59=1;
					}
					}
					break;
				case EQUALS:
					{
					int LA59_14 = input.LA(2);
					if ( (synpred93_bashast()) ) {
						alt59=1;
					}
					}
					break;
				case BOP:
					{
					int LA59_21 = input.LA(2);
					if ( (synpred93_bashast()) ) {
						alt59=1;
					}
					}
					break;
			}
			switch (alt59) {
				case 1 :
					// com/caseystella/parser/bashast.g:147:25: post= fname
					{
					pushFollow(FOLLOW_fname_in_brace_expansion944);
					post=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(post.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: brace, pre, post
			// token labels: 
			// rule labels: retval, post, pre
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_post=new RewriteRuleSubtreeStream(adaptor,"rule post",post!=null?post.getTree():null);
			RewriteRuleSubtreeStream stream_pre=new RewriteRuleSubtreeStream(adaptor,"rule pre",pre!=null?pre.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 147:33: -> ^( BRACE_EXP ( $pre)? brace ( $post)? )
			{
				// com/caseystella/parser/bashast.g:147:36: ^( BRACE_EXP ( $pre)? brace ( $post)? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRACE_EXP, "BRACE_EXP"), root_1);
				// com/caseystella/parser/bashast.g:147:48: ( $pre)?
				if ( stream_pre.hasNext() ) {
					adaptor.addChild(root_1, stream_pre.nextTree());
				}
				stream_pre.reset();

				adaptor.addChild(root_1, stream_brace.nextTree());
				// com/caseystella/parser/bashast.g:147:62: ( $post)?
				if ( stream_post.hasNext() ) {
					adaptor.addChild(root_1, stream_post.nextTree());
				}
				stream_post.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "brace_expansion"


	public static class brace_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "brace"
	// com/caseystella/parser/bashast.g:148:1: brace : LBRACE ( BLANK )* brace_expansion_inside ( BLANK )? RBRACE -> ^( BRACE brace_expansion_inside ) ;
	public final bashastParser.brace_return brace() throws RecognitionException {
		bashastParser.brace_return retval = new bashastParser.brace_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LBRACE133=null;
		Token BLANK134=null;
		Token BLANK136=null;
		Token RBRACE137=null;
		ParserRuleReturnScope brace_expansion_inside135 =null;

		CommonTree LBRACE133_tree=null;
		CommonTree BLANK134_tree=null;
		CommonTree BLANK136_tree=null;
		CommonTree RBRACE137_tree=null;
		RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
		RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_brace_expansion_inside=new RewriteRuleSubtreeStream(adaptor,"rule brace_expansion_inside");

		try {
			// com/caseystella/parser/bashast.g:149:2: ( LBRACE ( BLANK )* brace_expansion_inside ( BLANK )? RBRACE -> ^( BRACE brace_expansion_inside ) )
			// com/caseystella/parser/bashast.g:149:4: LBRACE ( BLANK )* brace_expansion_inside ( BLANK )? RBRACE
			{
			LBRACE133=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_brace973); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACE.add(LBRACE133);

			// com/caseystella/parser/bashast.g:149:11: ( BLANK )*
			loop60:
			while (true) {
				int alt60=2;
				int LA60_0 = input.LA(1);
				if ( (LA60_0==BLANK) ) {
					alt60=1;
				}

				switch (alt60) {
				case 1 :
					// com/caseystella/parser/bashast.g:149:11: BLANK
					{
					BLANK134=(Token)match(input,BLANK,FOLLOW_BLANK_in_brace975); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK134);

					}
					break;

				default :
					break loop60;
				}
			}

			pushFollow(FOLLOW_brace_expansion_inside_in_brace978);
			brace_expansion_inside135=brace_expansion_inside();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_brace_expansion_inside.add(brace_expansion_inside135.getTree());
			// com/caseystella/parser/bashast.g:149:41: ( BLANK )?
			int alt61=2;
			int LA61_0 = input.LA(1);
			if ( (LA61_0==BLANK) ) {
				alt61=1;
			}
			switch (alt61) {
				case 1 :
					// com/caseystella/parser/bashast.g:149:41: BLANK
					{
					BLANK136=(Token)match(input,BLANK,FOLLOW_BLANK_in_brace980); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK136);

					}
					break;

			}

			RBRACE137=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_brace982); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACE.add(RBRACE137);

			// AST REWRITE
			// elements: brace_expansion_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 149:54: -> ^( BRACE brace_expansion_inside )
			{
				// com/caseystella/parser/bashast.g:149:57: ^( BRACE brace_expansion_inside )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BRACE, "BRACE"), root_1);
				adaptor.addChild(root_1, stream_brace_expansion_inside.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "brace"


	public static class brace_expansion_inside_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "brace_expansion_inside"
	// com/caseystella/parser/bashast.g:150:1: brace_expansion_inside : ( commasep | range );
	public final bashastParser.brace_expansion_inside_return brace_expansion_inside() throws RecognitionException {
		bashastParser.brace_expansion_inside_return retval = new bashastParser.brace_expansion_inside_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope commasep138 =null;
		ParserRuleReturnScope range139 =null;


		try {
			// com/caseystella/parser/bashast.g:151:2: ( commasep | range )
			int alt62=2;
			switch ( input.LA(1) ) {
			case ARITH_ASSIGN:
			case AT:
			case BANG:
			case BOP:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DO:
			case DOLLAR:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LBRACE:
			case LSQUARE:
			case MINUS:
			case NAME:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case PLUS:
			case QMARK:
			case QUOTE:
			case RSQUARE:
			case SELECT:
			case SLASH:
			case SQUOTE:
			case TEST:
			case THEN:
			case TICK:
			case TILDE:
			case TIME:
			case TIMES:
			case UNTIL:
			case UOP:
			case WHILE:
			case 138:
				{
				alt62=1;
				}
				break;
			case DIGIT:
				{
				int LA62_2 = input.LA(2);
				if ( (LA62_2==DOTDOT) ) {
					int LA62_4 = input.LA(3);
					if ( (LA62_4==DIGIT) ) {
						int LA62_6 = input.LA(4);
						if ( (LA62_6==BLANK||LA62_6==RBRACE) ) {
							alt62=2;
						}
						else if ( (LA62_6==ARITH_ASSIGN||(LA62_6 >= AT && LA62_6 <= BANG)||LA62_6==BOP||(LA62_6 >= CARET && LA62_6 <= CASE)||(LA62_6 >= COLON && LA62_6 <= COMMA)||(LA62_6 >= DEC && LA62_6 <= DOTDOT)||(LA62_6 >= ELIF && LA62_6 <= ELSE)||LA62_6==EQUALS||(LA62_6 >= ESAC && LA62_6 <= ESC_CHAR)||LA62_6==FI||LA62_6==FOR||LA62_6==FUNCTION||(LA62_6 >= IF && LA62_6 <= INC)||LA62_6==LETTER||LA62_6==LSQUARE||(LA62_6 >= MINUS && LA62_6 <= NAME)||(LA62_6 >= NQSTR && LA62_6 <= NUMBER)||(LA62_6 >= PCT && LA62_6 <= PCTPCT)||LA62_6==PLUS||(LA62_6 >= POUND && LA62_6 <= POUNDPOUND)||(LA62_6 >= QMARK && LA62_6 <= QUOTE)||(LA62_6 >= RSQUARE && LA62_6 <= SELECT)||(LA62_6 >= SLASH && LA62_6 <= SQUOTE)||(LA62_6 >= TEST && LA62_6 <= UOP)||LA62_6==WHILE||LA62_6==138) ) {
							alt62=1;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 62, 6, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA62_4==ARITH_ASSIGN||(LA62_4 >= AT && LA62_4 <= BANG)||LA62_4==BOP||(LA62_4 >= CARET && LA62_4 <= CASE)||(LA62_4 >= COLON && LA62_4 <= COMMA)||LA62_4==DEC||(LA62_4 >= DO && LA62_4 <= DOTDOT)||(LA62_4 >= ELIF && LA62_4 <= ELSE)||LA62_4==EQUALS||(LA62_4 >= ESAC && LA62_4 <= ESC_CHAR)||LA62_4==FI||LA62_4==FOR||LA62_4==FUNCTION||(LA62_4 >= IF && LA62_4 <= INC)||LA62_4==LETTER||LA62_4==LSQUARE||(LA62_4 >= MINUS && LA62_4 <= NAME)||(LA62_4 >= NQSTR && LA62_4 <= NUMBER)||(LA62_4 >= PCT && LA62_4 <= PCTPCT)||LA62_4==PLUS||(LA62_4 >= POUND && LA62_4 <= POUNDPOUND)||(LA62_4 >= QMARK && LA62_4 <= QUOTE)||(LA62_4 >= RSQUARE && LA62_4 <= SELECT)||(LA62_4 >= SLASH && LA62_4 <= SQUOTE)||(LA62_4 >= TEST && LA62_4 <= UOP)||LA62_4==WHILE||LA62_4==138) ) {
						alt62=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 62, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA62_2==ARITH_ASSIGN||(LA62_2 >= AT && LA62_2 <= BANG)||LA62_2==BOP||(LA62_2 >= CARET && LA62_2 <= CASE)||(LA62_2 >= COLON && LA62_2 <= COMMA)||(LA62_2 >= DEC && LA62_2 <= DOT)||(LA62_2 >= ELIF && LA62_2 <= ELSE)||LA62_2==EQUALS||(LA62_2 >= ESAC && LA62_2 <= ESC_CHAR)||LA62_2==FI||LA62_2==FOR||LA62_2==FUNCTION||(LA62_2 >= IF && LA62_2 <= INC)||LA62_2==LETTER||LA62_2==LSQUARE||(LA62_2 >= MINUS && LA62_2 <= NAME)||(LA62_2 >= NQSTR && LA62_2 <= NUMBER)||(LA62_2 >= PCT && LA62_2 <= PCTPCT)||LA62_2==PLUS||(LA62_2 >= POUND && LA62_2 <= POUNDPOUND)||(LA62_2 >= QMARK && LA62_2 <= QUOTE)||(LA62_2 >= RSQUARE && LA62_2 <= SELECT)||(LA62_2 >= SLASH && LA62_2 <= SQUOTE)||(LA62_2 >= TEST && LA62_2 <= UOP)||LA62_2==WHILE||LA62_2==138) ) {
					alt62=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 62, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LETTER:
				{
				int LA62_3 = input.LA(2);
				if ( (LA62_3==DOTDOT) ) {
					int LA62_5 = input.LA(3);
					if ( (LA62_5==LETTER) ) {
						int LA62_7 = input.LA(4);
						if ( (LA62_7==BLANK||LA62_7==RBRACE) ) {
							alt62=2;
						}
						else if ( (LA62_7==ARITH_ASSIGN||(LA62_7 >= AT && LA62_7 <= BANG)||LA62_7==BOP||(LA62_7 >= CARET && LA62_7 <= CASE)||(LA62_7 >= COLON && LA62_7 <= COMMA)||(LA62_7 >= DEC && LA62_7 <= DOTDOT)||(LA62_7 >= ELIF && LA62_7 <= ELSE)||LA62_7==EQUALS||(LA62_7 >= ESAC && LA62_7 <= ESC_CHAR)||LA62_7==FI||LA62_7==FOR||LA62_7==FUNCTION||(LA62_7 >= IF && LA62_7 <= INC)||LA62_7==LETTER||LA62_7==LSQUARE||(LA62_7 >= MINUS && LA62_7 <= NAME)||(LA62_7 >= NQSTR && LA62_7 <= NUMBER)||(LA62_7 >= PCT && LA62_7 <= PCTPCT)||LA62_7==PLUS||(LA62_7 >= POUND && LA62_7 <= POUNDPOUND)||(LA62_7 >= QMARK && LA62_7 <= QUOTE)||(LA62_7 >= RSQUARE && LA62_7 <= SELECT)||(LA62_7 >= SLASH && LA62_7 <= SQUOTE)||(LA62_7 >= TEST && LA62_7 <= UOP)||LA62_7==WHILE||LA62_7==138) ) {
							alt62=1;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 62, 7, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA62_5==ARITH_ASSIGN||(LA62_5 >= AT && LA62_5 <= BANG)||LA62_5==BOP||(LA62_5 >= CARET && LA62_5 <= CASE)||(LA62_5 >= COLON && LA62_5 <= COMMA)||(LA62_5 >= DEC && LA62_5 <= DOTDOT)||(LA62_5 >= ELIF && LA62_5 <= ELSE)||LA62_5==EQUALS||(LA62_5 >= ESAC && LA62_5 <= ESC_CHAR)||LA62_5==FI||LA62_5==FOR||LA62_5==FUNCTION||(LA62_5 >= IF && LA62_5 <= INC)||LA62_5==LSQUARE||(LA62_5 >= MINUS && LA62_5 <= NAME)||(LA62_5 >= NQSTR && LA62_5 <= NUMBER)||(LA62_5 >= PCT && LA62_5 <= PCTPCT)||LA62_5==PLUS||(LA62_5 >= POUND && LA62_5 <= POUNDPOUND)||(LA62_5 >= QMARK && LA62_5 <= QUOTE)||(LA62_5 >= RSQUARE && LA62_5 <= SELECT)||(LA62_5 >= SLASH && LA62_5 <= SQUOTE)||(LA62_5 >= TEST && LA62_5 <= UOP)||LA62_5==WHILE||LA62_5==138) ) {
						alt62=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 62, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA62_3==ARITH_ASSIGN||(LA62_3 >= AT && LA62_3 <= BANG)||LA62_3==BOP||(LA62_3 >= CARET && LA62_3 <= CASE)||(LA62_3 >= COLON && LA62_3 <= COMMA)||(LA62_3 >= DEC && LA62_3 <= DOT)||(LA62_3 >= ELIF && LA62_3 <= ELSE)||LA62_3==EQUALS||(LA62_3 >= ESAC && LA62_3 <= ESC_CHAR)||LA62_3==FI||LA62_3==FOR||LA62_3==FUNCTION||(LA62_3 >= IF && LA62_3 <= INC)||LA62_3==LETTER||LA62_3==LSQUARE||(LA62_3 >= MINUS && LA62_3 <= NAME)||(LA62_3 >= NQSTR && LA62_3 <= NUMBER)||(LA62_3 >= PCT && LA62_3 <= PCTPCT)||LA62_3==PLUS||(LA62_3 >= POUND && LA62_3 <= POUNDPOUND)||(LA62_3 >= QMARK && LA62_3 <= QUOTE)||(LA62_3 >= RSQUARE && LA62_3 <= SELECT)||(LA62_3 >= SLASH && LA62_3 <= SQUOTE)||(LA62_3 >= TEST && LA62_3 <= UOP)||LA62_3==WHILE||LA62_3==138) ) {
					alt62=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 62, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 62, 0, input);
				throw nvae;
			}
			switch (alt62) {
				case 1 :
					// com/caseystella/parser/bashast.g:151:4: commasep
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_commasep_in_brace_expansion_inside998);
					commasep138=commasep();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, commasep138.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:151:13: range
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_range_in_brace_expansion_inside1000);
					range139=range();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, range139.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "brace_expansion_inside"


	public static class range_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "range"
	// com/caseystella/parser/bashast.g:152:1: range : ( DIGIT DOTDOT ^ DIGIT | LETTER DOTDOT ^ LETTER );
	public final bashastParser.range_return range() throws RecognitionException {
		bashastParser.range_return retval = new bashastParser.range_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DIGIT140=null;
		Token DOTDOT141=null;
		Token DIGIT142=null;
		Token LETTER143=null;
		Token DOTDOT144=null;
		Token LETTER145=null;

		CommonTree DIGIT140_tree=null;
		CommonTree DOTDOT141_tree=null;
		CommonTree DIGIT142_tree=null;
		CommonTree LETTER143_tree=null;
		CommonTree DOTDOT144_tree=null;
		CommonTree LETTER145_tree=null;

		try {
			// com/caseystella/parser/bashast.g:152:7: ( DIGIT DOTDOT ^ DIGIT | LETTER DOTDOT ^ LETTER )
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==DIGIT) ) {
				alt63=1;
			}
			else if ( (LA63_0==LETTER) ) {
				alt63=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 63, 0, input);
				throw nvae;
			}

			switch (alt63) {
				case 1 :
					// com/caseystella/parser/bashast.g:152:9: DIGIT DOTDOT ^ DIGIT
					{
					root_0 = (CommonTree)adaptor.nil();


					DIGIT140=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_range1007); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIGIT140_tree = (CommonTree)adaptor.create(DIGIT140);
					adaptor.addChild(root_0, DIGIT140_tree);
					}

					DOTDOT141=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_range1009); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOTDOT141_tree = (CommonTree)adaptor.create(DOTDOT141);
					root_0 = (CommonTree)adaptor.becomeRoot(DOTDOT141_tree, root_0);
					}

					DIGIT142=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_range1012); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIGIT142_tree = (CommonTree)adaptor.create(DIGIT142);
					adaptor.addChild(root_0, DIGIT142_tree);
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:153:4: LETTER DOTDOT ^ LETTER
					{
					root_0 = (CommonTree)adaptor.nil();


					LETTER143=(Token)match(input,LETTER,FOLLOW_LETTER_in_range1017); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LETTER143_tree = (CommonTree)adaptor.create(LETTER143);
					adaptor.addChild(root_0, LETTER143_tree);
					}

					DOTDOT144=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_range1019); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOTDOT144_tree = (CommonTree)adaptor.create(DOTDOT144);
					root_0 = (CommonTree)adaptor.becomeRoot(DOTDOT144_tree, root_0);
					}

					LETTER145=(Token)match(input,LETTER,FOLLOW_LETTER_in_range1022); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LETTER145_tree = (CommonTree)adaptor.create(LETTER145);
					adaptor.addChild(root_0, LETTER145_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "range"


	public static class brace_expansion_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "brace_expansion_part"
	// com/caseystella/parser/bashast.g:154:1: brace_expansion_part : ( fname | brace | var_ref | command_sub );
	public final bashastParser.brace_expansion_part_return brace_expansion_part() throws RecognitionException {
		bashastParser.brace_expansion_part_return retval = new bashastParser.brace_expansion_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope fname146 =null;
		ParserRuleReturnScope brace147 =null;
		ParserRuleReturnScope var_ref148 =null;
		ParserRuleReturnScope command_sub149 =null;


		try {
			// com/caseystella/parser/bashast.g:155:2: ( fname | brace | var_ref | command_sub )
			int alt64=4;
			switch ( input.LA(1) ) {
			case ARITH_ASSIGN:
			case AT:
			case BANG:
			case BOP:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DIGIT:
			case DO:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LETTER:
			case LSQUARE:
			case MINUS:
			case NAME:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case PLUS:
			case QMARK:
			case QUOTE:
			case RSQUARE:
			case SELECT:
			case SLASH:
			case SQUOTE:
			case TEST:
			case THEN:
			case TILDE:
			case TIME:
			case TIMES:
			case UNTIL:
			case UOP:
			case WHILE:
			case 138:
				{
				alt64=1;
				}
				break;
			case DOLLAR:
				{
				int LA64_7 = input.LA(2);
				if ( (synpred98_bashast()) ) {
					alt64=1;
				}
				else if ( (synpred100_bashast()) ) {
					alt64=3;
				}
				else if ( (true) ) {
					alt64=4;
				}

				}
				break;
			case TICK:
				{
				int LA64_8 = input.LA(2);
				if ( (synpred98_bashast()) ) {
					alt64=1;
				}
				else if ( (true) ) {
					alt64=4;
				}

				}
				break;
			case LBRACE:
				{
				alt64=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 64, 0, input);
				throw nvae;
			}
			switch (alt64) {
				case 1 :
					// com/caseystella/parser/bashast.g:155:4: fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fname_in_brace_expansion_part1030);
					fname146=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname146.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:156:4: brace
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_brace_in_brace_expansion_part1035);
					brace147=brace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, brace147.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:157:4: var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_ref_in_brace_expansion_part1040);
					var_ref148=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref148.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:158:4: command_sub
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_command_sub_in_brace_expansion_part1045);
					command_sub149=command_sub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, command_sub149.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "brace_expansion_part"


	public static class commasep_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "commasep"
	// com/caseystella/parser/bashast.g:159:1: commasep : brace_expansion_part ( COMMA ! brace_expansion_part )+ ;
	public final bashastParser.commasep_return commasep() throws RecognitionException {
		bashastParser.commasep_return retval = new bashastParser.commasep_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COMMA151=null;
		ParserRuleReturnScope brace_expansion_part150 =null;
		ParserRuleReturnScope brace_expansion_part152 =null;

		CommonTree COMMA151_tree=null;

		try {
			// com/caseystella/parser/bashast.g:159:9: ( brace_expansion_part ( COMMA ! brace_expansion_part )+ )
			// com/caseystella/parser/bashast.g:159:11: brace_expansion_part ( COMMA ! brace_expansion_part )+
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_brace_expansion_part_in_commasep1051);
			brace_expansion_part150=brace_expansion_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_expansion_part150.getTree());

			// com/caseystella/parser/bashast.g:159:31: ( COMMA ! brace_expansion_part )+
			int cnt65=0;
			loop65:
			while (true) {
				int alt65=2;
				int LA65_0 = input.LA(1);
				if ( (LA65_0==COMMA) ) {
					alt65=1;
				}

				switch (alt65) {
				case 1 :
					// com/caseystella/parser/bashast.g:159:32: COMMA ! brace_expansion_part
					{
					COMMA151=(Token)match(input,COMMA,FOLLOW_COMMA_in_commasep1053); if (state.failed) return retval;
					pushFollow(FOLLOW_brace_expansion_part_in_commasep1056);
					brace_expansion_part152=brace_expansion_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_expansion_part152.getTree());

					}
					break;

				default :
					if ( cnt65 >= 1 ) break loop65;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(65, input);
					throw eee;
				}
				cnt65++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commasep"


	public static class command_sub_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "command_sub"
	// com/caseystella/parser/bashast.g:160:1: command_sub : ( DOLLAR LPAREN ( BLANK )* pipeline ( BLANK )? RPAREN -> ^( COMMAND_SUB pipeline ) | TICK ( BLANK )* pipeline ( BLANK )? TICK -> ^( COMMAND_SUB pipeline ) );
	public final bashastParser.command_sub_return command_sub() throws RecognitionException {
		bashastParser.command_sub_return retval = new bashastParser.command_sub_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DOLLAR153=null;
		Token LPAREN154=null;
		Token BLANK155=null;
		Token BLANK157=null;
		Token RPAREN158=null;
		Token TICK159=null;
		Token BLANK160=null;
		Token BLANK162=null;
		Token TICK163=null;
		ParserRuleReturnScope pipeline156 =null;
		ParserRuleReturnScope pipeline161 =null;

		CommonTree DOLLAR153_tree=null;
		CommonTree LPAREN154_tree=null;
		CommonTree BLANK155_tree=null;
		CommonTree BLANK157_tree=null;
		CommonTree RPAREN158_tree=null;
		CommonTree TICK159_tree=null;
		CommonTree BLANK160_tree=null;
		CommonTree BLANK162_tree=null;
		CommonTree TICK163_tree=null;
		RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
		RewriteRuleTokenStream stream_TICK=new RewriteRuleTokenStream(adaptor,"token TICK");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_pipeline=new RewriteRuleSubtreeStream(adaptor,"rule pipeline");

		try {
			// com/caseystella/parser/bashast.g:161:2: ( DOLLAR LPAREN ( BLANK )* pipeline ( BLANK )? RPAREN -> ^( COMMAND_SUB pipeline ) | TICK ( BLANK )* pipeline ( BLANK )? TICK -> ^( COMMAND_SUB pipeline ) )
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==DOLLAR) ) {
				alt70=1;
			}
			else if ( (LA70_0==TICK) ) {
				alt70=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}

			switch (alt70) {
				case 1 :
					// com/caseystella/parser/bashast.g:161:4: DOLLAR LPAREN ( BLANK )* pipeline ( BLANK )? RPAREN
					{
					DOLLAR153=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_command_sub1066); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR153);

					LPAREN154=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_command_sub1068); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN154);

					// com/caseystella/parser/bashast.g:161:18: ( BLANK )*
					loop66:
					while (true) {
						int alt66=2;
						int LA66_0 = input.LA(1);
						if ( (LA66_0==BLANK) ) {
							int LA66_1 = input.LA(2);
							if ( (synpred102_bashast()) ) {
								alt66=1;
							}

						}

						switch (alt66) {
						case 1 :
							// com/caseystella/parser/bashast.g:161:18: BLANK
							{
							BLANK155=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_sub1070); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK155);

							}
							break;

						default :
							break loop66;
						}
					}

					pushFollow(FOLLOW_pipeline_in_command_sub1073);
					pipeline156=pipeline();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pipeline.add(pipeline156.getTree());
					// com/caseystella/parser/bashast.g:161:34: ( BLANK )?
					int alt67=2;
					int LA67_0 = input.LA(1);
					if ( (LA67_0==BLANK) ) {
						alt67=1;
					}
					switch (alt67) {
						case 1 :
							// com/caseystella/parser/bashast.g:161:34: BLANK
							{
							BLANK157=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_sub1075); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK157);

							}
							break;

					}

					RPAREN158=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_command_sub1078); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN158);

					// AST REWRITE
					// elements: pipeline
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 161:48: -> ^( COMMAND_SUB pipeline )
					{
						// com/caseystella/parser/bashast.g:161:51: ^( COMMAND_SUB pipeline )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMAND_SUB, "COMMAND_SUB"), root_1);
						adaptor.addChild(root_1, stream_pipeline.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:162:4: TICK ( BLANK )* pipeline ( BLANK )? TICK
					{
					TICK159=(Token)match(input,TICK,FOLLOW_TICK_in_command_sub1091); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TICK.add(TICK159);

					// com/caseystella/parser/bashast.g:162:9: ( BLANK )*
					loop68:
					while (true) {
						int alt68=2;
						int LA68_0 = input.LA(1);
						if ( (LA68_0==BLANK) ) {
							int LA68_1 = input.LA(2);
							if ( (synpred105_bashast()) ) {
								alt68=1;
							}

						}

						switch (alt68) {
						case 1 :
							// com/caseystella/parser/bashast.g:162:9: BLANK
							{
							BLANK160=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_sub1093); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK160);

							}
							break;

						default :
							break loop68;
						}
					}

					pushFollow(FOLLOW_pipeline_in_command_sub1096);
					pipeline161=pipeline();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pipeline.add(pipeline161.getTree());
					// com/caseystella/parser/bashast.g:162:25: ( BLANK )?
					int alt69=2;
					int LA69_0 = input.LA(1);
					if ( (LA69_0==BLANK) ) {
						alt69=1;
					}
					switch (alt69) {
						case 1 :
							// com/caseystella/parser/bashast.g:162:25: BLANK
							{
							BLANK162=(Token)match(input,BLANK,FOLLOW_BLANK_in_command_sub1098); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK162);

							}
							break;

					}

					TICK163=(Token)match(input,TICK,FOLLOW_TICK_in_command_sub1101); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TICK.add(TICK163);

					// AST REWRITE
					// elements: pipeline
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 162:37: -> ^( COMMAND_SUB pipeline )
					{
						// com/caseystella/parser/bashast.g:162:40: ^( COMMAND_SUB pipeline )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMMAND_SUB, "COMMAND_SUB"), root_1);
						adaptor.addChild(root_1, stream_pipeline.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "command_sub"


	public static class compound_command_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "compound_command"
	// com/caseystella/parser/bashast.g:164:1: compound_command : ( for_expr | sel_expr | if_expr | while_expr | until_expr | case_expr | subshell | currshell | arith_comparison | cond_comparison );
	public final bashastParser.compound_command_return compound_command() throws RecognitionException {
		bashastParser.compound_command_return retval = new bashastParser.compound_command_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope for_expr164 =null;
		ParserRuleReturnScope sel_expr165 =null;
		ParserRuleReturnScope if_expr166 =null;
		ParserRuleReturnScope while_expr167 =null;
		ParserRuleReturnScope until_expr168 =null;
		ParserRuleReturnScope case_expr169 =null;
		ParserRuleReturnScope subshell170 =null;
		ParserRuleReturnScope currshell171 =null;
		ParserRuleReturnScope arith_comparison172 =null;
		ParserRuleReturnScope cond_comparison173 =null;


		try {
			// com/caseystella/parser/bashast.g:165:2: ( for_expr | sel_expr | if_expr | while_expr | until_expr | case_expr | subshell | currshell | arith_comparison | cond_comparison )
			int alt71=10;
			switch ( input.LA(1) ) {
			case FOR:
				{
				alt71=1;
				}
				break;
			case SELECT:
				{
				alt71=2;
				}
				break;
			case IF:
				{
				alt71=3;
				}
				break;
			case WHILE:
				{
				alt71=4;
				}
				break;
			case UNTIL:
				{
				alt71=5;
				}
				break;
			case CASE:
				{
				alt71=6;
				}
				break;
			case LPAREN:
				{
				alt71=7;
				}
				break;
			case LBRACE:
				{
				alt71=8;
				}
				break;
			case LLPAREN:
				{
				alt71=9;
				}
				break;
			case LSQUARE:
			case TEST:
				{
				alt71=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 71, 0, input);
				throw nvae;
			}
			switch (alt71) {
				case 1 :
					// com/caseystella/parser/bashast.g:165:4: for_expr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_for_expr_in_compound_command1119);
					for_expr164=for_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, for_expr164.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:166:4: sel_expr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_sel_expr_in_compound_command1124);
					sel_expr165=sel_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, sel_expr165.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:167:4: if_expr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_if_expr_in_compound_command1129);
					if_expr166=if_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, if_expr166.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:168:4: while_expr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_while_expr_in_compound_command1134);
					while_expr167=while_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, while_expr167.getTree());

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:169:4: until_expr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_until_expr_in_compound_command1139);
					until_expr168=until_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, until_expr168.getTree());

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:170:4: case_expr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_case_expr_in_compound_command1144);
					case_expr169=case_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_expr169.getTree());

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:171:4: subshell
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_subshell_in_compound_command1149);
					subshell170=subshell();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subshell170.getTree());

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:172:4: currshell
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_currshell_in_compound_command1154);
					currshell171=currshell();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, currshell171.getTree());

					}
					break;
				case 9 :
					// com/caseystella/parser/bashast.g:173:4: arith_comparison
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arith_comparison_in_compound_command1159);
					arith_comparison172=arith_comparison();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arith_comparison172.getTree());

					}
					break;
				case 10 :
					// com/caseystella/parser/bashast.g:174:4: cond_comparison
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_cond_comparison_in_compound_command1164);
					cond_comparison173=cond_comparison();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cond_comparison173.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compound_command"


	public static class for_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "for_expr"
	// com/caseystella/parser/bashast.g:176:1: for_expr : ( FOR ( BLANK )+ name ( wspace IN ( BLANK )+ word )? semiel DO ( wspace )* clist semiel DONE -> ^( FOR name ( word )? clist ) | FOR ( BLANK )* LLPAREN ( EOL )? ( ( BLANK )* init= arithmetic ( BLANK )* | ( BLANK )+ )? ( SEMIC ( ( BLANK )? fcond= arithmetic ( BLANK )* | ( BLANK )+ )? SEMIC | DOUBLE_SEMIC ) ( ( BLANK )* mod= arithmetic )? ( wspace )* RRPAREN semiel DO wspace clist semiel DONE -> ^( FOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? ( ^( FOR_MOD $mod) )? clist ) );
	public final bashastParser.for_expr_return for_expr() throws RecognitionException {
		bashastParser.for_expr_return retval = new bashastParser.for_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token FOR174=null;
		Token BLANK175=null;
		Token IN178=null;
		Token BLANK179=null;
		Token DO182=null;
		Token DONE186=null;
		Token FOR187=null;
		Token BLANK188=null;
		Token LLPAREN189=null;
		Token EOL190=null;
		Token BLANK191=null;
		Token BLANK192=null;
		Token BLANK193=null;
		Token SEMIC194=null;
		Token BLANK195=null;
		Token BLANK196=null;
		Token BLANK197=null;
		Token SEMIC198=null;
		Token DOUBLE_SEMIC199=null;
		Token BLANK200=null;
		Token RRPAREN202=null;
		Token DO204=null;
		Token DONE208=null;
		ParserRuleReturnScope init =null;
		ParserRuleReturnScope fcond =null;
		ParserRuleReturnScope mod =null;
		ParserRuleReturnScope name176 =null;
		ParserRuleReturnScope wspace177 =null;
		ParserRuleReturnScope word180 =null;
		ParserRuleReturnScope semiel181 =null;
		ParserRuleReturnScope wspace183 =null;
		ParserRuleReturnScope clist184 =null;
		ParserRuleReturnScope semiel185 =null;
		ParserRuleReturnScope wspace201 =null;
		ParserRuleReturnScope semiel203 =null;
		ParserRuleReturnScope wspace205 =null;
		ParserRuleReturnScope clist206 =null;
		ParserRuleReturnScope semiel207 =null;

		CommonTree FOR174_tree=null;
		CommonTree BLANK175_tree=null;
		CommonTree IN178_tree=null;
		CommonTree BLANK179_tree=null;
		CommonTree DO182_tree=null;
		CommonTree DONE186_tree=null;
		CommonTree FOR187_tree=null;
		CommonTree BLANK188_tree=null;
		CommonTree LLPAREN189_tree=null;
		CommonTree EOL190_tree=null;
		CommonTree BLANK191_tree=null;
		CommonTree BLANK192_tree=null;
		CommonTree BLANK193_tree=null;
		CommonTree SEMIC194_tree=null;
		CommonTree BLANK195_tree=null;
		CommonTree BLANK196_tree=null;
		CommonTree BLANK197_tree=null;
		CommonTree SEMIC198_tree=null;
		CommonTree DOUBLE_SEMIC199_tree=null;
		CommonTree BLANK200_tree=null;
		CommonTree RRPAREN202_tree=null;
		CommonTree DO204_tree=null;
		CommonTree DONE208_tree=null;
		RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
		RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
		RewriteRuleTokenStream stream_LLPAREN=new RewriteRuleTokenStream(adaptor,"token LLPAREN");
		RewriteRuleTokenStream stream_EOL=new RewriteRuleTokenStream(adaptor,"token EOL");
		RewriteRuleTokenStream stream_DOUBLE_SEMIC=new RewriteRuleTokenStream(adaptor,"token DOUBLE_SEMIC");
		RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
		RewriteRuleTokenStream stream_SEMIC=new RewriteRuleTokenStream(adaptor,"token SEMIC");
		RewriteRuleTokenStream stream_DONE=new RewriteRuleTokenStream(adaptor,"token DONE");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleTokenStream stream_RRPAREN=new RewriteRuleTokenStream(adaptor,"token RRPAREN");
		RewriteRuleSubtreeStream stream_arithmetic=new RewriteRuleSubtreeStream(adaptor,"rule arithmetic");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
		RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");
		RewriteRuleSubtreeStream stream_word=new RewriteRuleSubtreeStream(adaptor,"rule word");

		try {
			// com/caseystella/parser/bashast.g:176:9: ( FOR ( BLANK )+ name ( wspace IN ( BLANK )+ word )? semiel DO ( wspace )* clist semiel DONE -> ^( FOR name ( word )? clist ) | FOR ( BLANK )* LLPAREN ( EOL )? ( ( BLANK )* init= arithmetic ( BLANK )* | ( BLANK )+ )? ( SEMIC ( ( BLANK )? fcond= arithmetic ( BLANK )* | ( BLANK )+ )? SEMIC | DOUBLE_SEMIC ) ( ( BLANK )* mod= arithmetic )? ( wspace )* RRPAREN semiel DO wspace clist semiel DONE -> ^( FOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? ( ^( FOR_MOD $mod) )? clist ) )
			int alt90=2;
			alt90 = dfa90.predict(input);
			switch (alt90) {
				case 1 :
					// com/caseystella/parser/bashast.g:176:11: FOR ( BLANK )+ name ( wspace IN ( BLANK )+ word )? semiel DO ( wspace )* clist semiel DONE
					{
					FOR174=(Token)match(input,FOR,FOLLOW_FOR_in_for_expr1171); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FOR.add(FOR174);

					// com/caseystella/parser/bashast.g:176:15: ( BLANK )+
					int cnt72=0;
					loop72:
					while (true) {
						int alt72=2;
						int LA72_0 = input.LA(1);
						if ( (LA72_0==BLANK) ) {
							alt72=1;
						}

						switch (alt72) {
						case 1 :
							// com/caseystella/parser/bashast.g:176:15: BLANK
							{
							BLANK175=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr1173); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK175);

							}
							break;

						default :
							if ( cnt72 >= 1 ) break loop72;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(72, input);
							throw eee;
						}
						cnt72++;
					}

					pushFollow(FOLLOW_name_in_for_expr1176);
					name176=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name.add(name176.getTree());
					// com/caseystella/parser/bashast.g:176:27: ( wspace IN ( BLANK )+ word )?
					int alt74=2;
					int LA74_0 = input.LA(1);
					if ( (LA74_0==BLANK) ) {
						alt74=1;
					}
					else if ( (LA74_0==EOL) ) {
						int LA74_2 = input.LA(2);
						if ( (LA74_2==IN) ) {
							alt74=1;
						}
					}
					switch (alt74) {
						case 1 :
							// com/caseystella/parser/bashast.g:176:28: wspace IN ( BLANK )+ word
							{
							pushFollow(FOLLOW_wspace_in_for_expr1179);
							wspace177=wspace();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_wspace.add(wspace177.getTree());
							IN178=(Token)match(input,IN,FOLLOW_IN_in_for_expr1181); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_IN.add(IN178);

							// com/caseystella/parser/bashast.g:176:38: ( BLANK )+
							int cnt73=0;
							loop73:
							while (true) {
								int alt73=2;
								int LA73_0 = input.LA(1);
								if ( (LA73_0==BLANK) ) {
									alt73=1;
								}

								switch (alt73) {
								case 1 :
									// com/caseystella/parser/bashast.g:176:38: BLANK
									{
									BLANK179=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr1183); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK179);

									}
									break;

								default :
									if ( cnt73 >= 1 ) break loop73;
									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee = new EarlyExitException(73, input);
									throw eee;
								}
								cnt73++;
							}

							pushFollow(FOLLOW_word_in_for_expr1186);
							word180=word();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_word.add(word180.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_semiel_in_for_expr1190);
					semiel181=semiel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_semiel.add(semiel181.getTree());
					DO182=(Token)match(input,DO,FOLLOW_DO_in_for_expr1192); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DO.add(DO182);

					// com/caseystella/parser/bashast.g:176:62: ( wspace )*
					loop75:
					while (true) {
						int alt75=2;
						int LA75_0 = input.LA(1);
						if ( (LA75_0==BLANK) ) {
							int LA75_2 = input.LA(2);
							if ( (synpred119_bashast()) ) {
								alt75=1;
							}

						}
						else if ( (LA75_0==EOL) ) {
							alt75=1;
						}

						switch (alt75) {
						case 1 :
							// com/caseystella/parser/bashast.g:176:62: wspace
							{
							pushFollow(FOLLOW_wspace_in_for_expr1194);
							wspace183=wspace();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_wspace.add(wspace183.getTree());
							}
							break;

						default :
							break loop75;
						}
					}

					pushFollow(FOLLOW_clist_in_for_expr1197);
					clist184=clist();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clist.add(clist184.getTree());
					pushFollow(FOLLOW_semiel_in_for_expr1199);
					semiel185=semiel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_semiel.add(semiel185.getTree());
					DONE186=(Token)match(input,DONE,FOLLOW_DONE_in_for_expr1201); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DONE.add(DONE186);

					// AST REWRITE
					// elements: name, clist, FOR, word
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 176:88: -> ^( FOR name ( word )? clist )
					{
						// com/caseystella/parser/bashast.g:176:91: ^( FOR name ( word )? clist )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						// com/caseystella/parser/bashast.g:176:102: ( word )?
						if ( stream_word.hasNext() ) {
							adaptor.addChild(root_1, stream_word.nextTree());
						}
						stream_word.reset();

						adaptor.addChild(root_1, stream_clist.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:177:4: FOR ( BLANK )* LLPAREN ( EOL )? ( ( BLANK )* init= arithmetic ( BLANK )* | ( BLANK )+ )? ( SEMIC ( ( BLANK )? fcond= arithmetic ( BLANK )* | ( BLANK )+ )? SEMIC | DOUBLE_SEMIC ) ( ( BLANK )* mod= arithmetic )? ( wspace )* RRPAREN semiel DO wspace clist semiel DONE
					{
					FOR187=(Token)match(input,FOR,FOLLOW_FOR_in_for_expr1221); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FOR.add(FOR187);

					// com/caseystella/parser/bashast.g:177:8: ( BLANK )*
					loop76:
					while (true) {
						int alt76=2;
						int LA76_0 = input.LA(1);
						if ( (LA76_0==BLANK) ) {
							alt76=1;
						}

						switch (alt76) {
						case 1 :
							// com/caseystella/parser/bashast.g:177:8: BLANK
							{
							BLANK188=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr1223); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK188);

							}
							break;

						default :
							break loop76;
						}
					}

					LLPAREN189=(Token)match(input,LLPAREN,FOLLOW_LLPAREN_in_for_expr1226); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LLPAREN.add(LLPAREN189);

					// com/caseystella/parser/bashast.g:177:23: ( EOL )?
					int alt77=2;
					int LA77_0 = input.LA(1);
					if ( (LA77_0==EOL) ) {
						alt77=1;
					}
					switch (alt77) {
						case 1 :
							// com/caseystella/parser/bashast.g:177:23: EOL
							{
							EOL190=(Token)match(input,EOL,FOLLOW_EOL_in_for_expr1228); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_EOL.add(EOL190);

							}
							break;

					}

					// com/caseystella/parser/bashast.g:177:28: ( ( BLANK )* init= arithmetic ( BLANK )* | ( BLANK )+ )?
					int alt81=3;
					alt81 = dfa81.predict(input);
					switch (alt81) {
						case 1 :
							// com/caseystella/parser/bashast.g:177:29: ( BLANK )* init= arithmetic ( BLANK )*
							{
							// com/caseystella/parser/bashast.g:177:29: ( BLANK )*
							loop78:
							while (true) {
								int alt78=2;
								int LA78_0 = input.LA(1);
								if ( (LA78_0==BLANK) ) {
									alt78=1;
								}

								switch (alt78) {
								case 1 :
									// com/caseystella/parser/bashast.g:177:29: BLANK
									{
									BLANK191=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr1232); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK191);

									}
									break;

								default :
									break loop78;
								}
							}

							pushFollow(FOLLOW_arithmetic_in_for_expr1237);
							init=arithmetic();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_arithmetic.add(init.getTree());
							// com/caseystella/parser/bashast.g:177:52: ( BLANK )*
							loop79:
							while (true) {
								int alt79=2;
								int LA79_0 = input.LA(1);
								if ( (LA79_0==BLANK) ) {
									alt79=1;
								}

								switch (alt79) {
								case 1 :
									// com/caseystella/parser/bashast.g:177:52: BLANK
									{
									BLANK192=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr1239); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK192);

									}
									break;

								default :
									break loop79;
								}
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:177:59: ( BLANK )+
							{
							// com/caseystella/parser/bashast.g:177:59: ( BLANK )+
							int cnt80=0;
							loop80:
							while (true) {
								int alt80=2;
								int LA80_0 = input.LA(1);
								if ( (LA80_0==BLANK) ) {
									alt80=1;
								}

								switch (alt80) {
								case 1 :
									// com/caseystella/parser/bashast.g:177:59: BLANK
									{
									BLANK193=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr1242); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK193);

									}
									break;

								default :
									if ( cnt80 >= 1 ) break loop80;
									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee = new EarlyExitException(80, input);
									throw eee;
								}
								cnt80++;
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:177:68: ( SEMIC ( ( BLANK )? fcond= arithmetic ( BLANK )* | ( BLANK )+ )? SEMIC | DOUBLE_SEMIC )
					int alt86=2;
					int LA86_0 = input.LA(1);
					if ( (LA86_0==SEMIC) ) {
						alt86=1;
					}
					else if ( (LA86_0==DOUBLE_SEMIC) ) {
						alt86=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 86, 0, input);
						throw nvae;
					}

					switch (alt86) {
						case 1 :
							// com/caseystella/parser/bashast.g:177:69: SEMIC ( ( BLANK )? fcond= arithmetic ( BLANK )* | ( BLANK )+ )? SEMIC
							{
							SEMIC194=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_for_expr1248); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_SEMIC.add(SEMIC194);

							// com/caseystella/parser/bashast.g:177:75: ( ( BLANK )? fcond= arithmetic ( BLANK )* | ( BLANK )+ )?
							int alt85=3;
							int LA85_0 = input.LA(1);
							if ( (LA85_0==BLANK) ) {
								int LA85_1 = input.LA(2);
								if ( (LA85_1==BANG||(LA85_1 >= DEC && LA85_1 <= DIGIT)||LA85_1==DOLLAR||LA85_1==INC||LA85_1==LETTER||LA85_1==LPAREN||(LA85_1 >= MINUS && LA85_1 <= NAME)||LA85_1==NUMBER||LA85_1==PLUS||(LA85_1 >= TICK && LA85_1 <= TILDE)||LA85_1==138) ) {
									alt85=1;
								}
								else if ( (LA85_1==BLANK||LA85_1==SEMIC) ) {
									alt85=2;
								}
							}
							else if ( (LA85_0==BANG||(LA85_0 >= DEC && LA85_0 <= DIGIT)||LA85_0==DOLLAR||LA85_0==INC||LA85_0==LETTER||LA85_0==LPAREN||(LA85_0 >= MINUS && LA85_0 <= NAME)||LA85_0==NUMBER||LA85_0==PLUS||(LA85_0 >= TICK && LA85_0 <= TILDE)||LA85_0==138) ) {
								alt85=1;
							}
							switch (alt85) {
								case 1 :
									// com/caseystella/parser/bashast.g:177:76: ( BLANK )? fcond= arithmetic ( BLANK )*
									{
									// com/caseystella/parser/bashast.g:177:76: ( BLANK )?
									int alt82=2;
									int LA82_0 = input.LA(1);
									if ( (LA82_0==BLANK) ) {
										alt82=1;
									}
									switch (alt82) {
										case 1 :
											// com/caseystella/parser/bashast.g:177:76: BLANK
											{
											BLANK195=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr1251); if (state.failed) return retval; 
											if ( state.backtracking==0 ) stream_BLANK.add(BLANK195);

											}
											break;

									}

									pushFollow(FOLLOW_arithmetic_in_for_expr1256);
									fcond=arithmetic();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_arithmetic.add(fcond.getTree());
									// com/caseystella/parser/bashast.g:177:100: ( BLANK )*
									loop83:
									while (true) {
										int alt83=2;
										int LA83_0 = input.LA(1);
										if ( (LA83_0==BLANK) ) {
											alt83=1;
										}

										switch (alt83) {
										case 1 :
											// com/caseystella/parser/bashast.g:177:100: BLANK
											{
											BLANK196=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr1258); if (state.failed) return retval; 
											if ( state.backtracking==0 ) stream_BLANK.add(BLANK196);

											}
											break;

										default :
											break loop83;
										}
									}

									}
									break;
								case 2 :
									// com/caseystella/parser/bashast.g:177:107: ( BLANK )+
									{
									// com/caseystella/parser/bashast.g:177:107: ( BLANK )+
									int cnt84=0;
									loop84:
									while (true) {
										int alt84=2;
										int LA84_0 = input.LA(1);
										if ( (LA84_0==BLANK) ) {
											alt84=1;
										}

										switch (alt84) {
										case 1 :
											// com/caseystella/parser/bashast.g:177:107: BLANK
											{
											BLANK197=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr1261); if (state.failed) return retval; 
											if ( state.backtracking==0 ) stream_BLANK.add(BLANK197);

											}
											break;

										default :
											if ( cnt84 >= 1 ) break loop84;
											if (state.backtracking>0) {state.failed=true; return retval;}
											EarlyExitException eee = new EarlyExitException(84, input);
											throw eee;
										}
										cnt84++;
									}

									}
									break;

							}

							SEMIC198=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_for_expr1266); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_SEMIC.add(SEMIC198);

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:177:122: DOUBLE_SEMIC
							{
							DOUBLE_SEMIC199=(Token)match(input,DOUBLE_SEMIC,FOLLOW_DOUBLE_SEMIC_in_for_expr1268); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_DOUBLE_SEMIC.add(DOUBLE_SEMIC199);

							}
							break;

					}

					// com/caseystella/parser/bashast.g:177:136: ( ( BLANK )* mod= arithmetic )?
					int alt88=2;
					alt88 = dfa88.predict(input);
					switch (alt88) {
						case 1 :
							// com/caseystella/parser/bashast.g:177:137: ( BLANK )* mod= arithmetic
							{
							// com/caseystella/parser/bashast.g:177:137: ( BLANK )*
							loop87:
							while (true) {
								int alt87=2;
								int LA87_0 = input.LA(1);
								if ( (LA87_0==BLANK) ) {
									alt87=1;
								}

								switch (alt87) {
								case 1 :
									// com/caseystella/parser/bashast.g:177:137: BLANK
									{
									BLANK200=(Token)match(input,BLANK,FOLLOW_BLANK_in_for_expr1272); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK200);

									}
									break;

								default :
									break loop87;
								}
							}

							pushFollow(FOLLOW_arithmetic_in_for_expr1277);
							mod=arithmetic();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_arithmetic.add(mod.getTree());
							}
							break;

					}

					// com/caseystella/parser/bashast.g:177:161: ( wspace )*
					loop89:
					while (true) {
						int alt89=2;
						int LA89_0 = input.LA(1);
						if ( (LA89_0==BLANK||LA89_0==EOL) ) {
							alt89=1;
						}

						switch (alt89) {
						case 1 :
							// com/caseystella/parser/bashast.g:177:161: wspace
							{
							pushFollow(FOLLOW_wspace_in_for_expr1281);
							wspace201=wspace();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_wspace.add(wspace201.getTree());
							}
							break;

						default :
							break loop89;
						}
					}

					RRPAREN202=(Token)match(input,RRPAREN,FOLLOW_RRPAREN_in_for_expr1284); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RRPAREN.add(RRPAREN202);

					pushFollow(FOLLOW_semiel_in_for_expr1286);
					semiel203=semiel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_semiel.add(semiel203.getTree());
					DO204=(Token)match(input,DO,FOLLOW_DO_in_for_expr1288); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DO.add(DO204);

					pushFollow(FOLLOW_wspace_in_for_expr1290);
					wspace205=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace205.getTree());
					pushFollow(FOLLOW_clist_in_for_expr1292);
					clist206=clist();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clist.add(clist206.getTree());
					pushFollow(FOLLOW_semiel_in_for_expr1294);
					semiel207=semiel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_semiel.add(semiel207.getTree());
					DONE208=(Token)match(input,DONE,FOLLOW_DONE_in_for_expr1296); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DONE.add(DONE208);

					// AST REWRITE
					// elements: mod, init, clist, fcond, FOR
					// token labels: 
					// rule labels: retval, fcond, mod, init
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_fcond=new RewriteRuleSubtreeStream(adaptor,"rule fcond",fcond!=null?fcond.getTree():null);
					RewriteRuleSubtreeStream stream_mod=new RewriteRuleSubtreeStream(adaptor,"rule mod",mod!=null?mod.getTree():null);
					RewriteRuleSubtreeStream stream_init=new RewriteRuleSubtreeStream(adaptor,"rule init",init!=null?init.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 178:3: -> ^( FOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? ( ^( FOR_MOD $mod) )? clist )
					{
						// com/caseystella/parser/bashast.g:178:6: ^( FOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? ( ^( FOR_MOD $mod) )? clist )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
						// com/caseystella/parser/bashast.g:178:12: ( ^( FOR_INIT $init) )?
						if ( stream_init.hasNext() ) {
							// com/caseystella/parser/bashast.g:178:12: ^( FOR_INIT $init)
							{
							CommonTree root_2 = (CommonTree)adaptor.nil();
							root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_INIT, "FOR_INIT"), root_2);
							adaptor.addChild(root_2, stream_init.nextTree());
							adaptor.addChild(root_1, root_2);
							}

						}
						stream_init.reset();

						// com/caseystella/parser/bashast.g:178:31: ( ^( FOR_COND $fcond) )?
						if ( stream_fcond.hasNext() ) {
							// com/caseystella/parser/bashast.g:178:31: ^( FOR_COND $fcond)
							{
							CommonTree root_2 = (CommonTree)adaptor.nil();
							root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_COND, "FOR_COND"), root_2);
							adaptor.addChild(root_2, stream_fcond.nextTree());
							adaptor.addChild(root_1, root_2);
							}

						}
						stream_fcond.reset();

						// com/caseystella/parser/bashast.g:178:51: ( ^( FOR_MOD $mod) )?
						if ( stream_mod.hasNext() ) {
							// com/caseystella/parser/bashast.g:178:51: ^( FOR_MOD $mod)
							{
							CommonTree root_2 = (CommonTree)adaptor.nil();
							root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_MOD, "FOR_MOD"), root_2);
							adaptor.addChild(root_2, stream_mod.nextTree());
							adaptor.addChild(root_1, root_2);
							}

						}
						stream_mod.reset();

						adaptor.addChild(root_1, stream_clist.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_expr"


	public static class sel_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "sel_expr"
	// com/caseystella/parser/bashast.g:180:1: sel_expr : SELECT ( BLANK )+ name ( wspace IN ( BLANK )+ word )? semiel DO ( wspace )* clist semiel DONE -> ^( SELECT name ( word )? clist ) ;
	public final bashastParser.sel_expr_return sel_expr() throws RecognitionException {
		bashastParser.sel_expr_return retval = new bashastParser.sel_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token SELECT209=null;
		Token BLANK210=null;
		Token IN213=null;
		Token BLANK214=null;
		Token DO217=null;
		Token DONE221=null;
		ParserRuleReturnScope name211 =null;
		ParserRuleReturnScope wspace212 =null;
		ParserRuleReturnScope word215 =null;
		ParserRuleReturnScope semiel216 =null;
		ParserRuleReturnScope wspace218 =null;
		ParserRuleReturnScope clist219 =null;
		ParserRuleReturnScope semiel220 =null;

		CommonTree SELECT209_tree=null;
		CommonTree BLANK210_tree=null;
		CommonTree IN213_tree=null;
		CommonTree BLANK214_tree=null;
		CommonTree DO217_tree=null;
		CommonTree DONE221_tree=null;
		RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
		RewriteRuleTokenStream stream_IN=new RewriteRuleTokenStream(adaptor,"token IN");
		RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
		RewriteRuleTokenStream stream_DONE=new RewriteRuleTokenStream(adaptor,"token DONE");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
		RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");
		RewriteRuleSubtreeStream stream_word=new RewriteRuleSubtreeStream(adaptor,"rule word");

		try {
			// com/caseystella/parser/bashast.g:180:9: ( SELECT ( BLANK )+ name ( wspace IN ( BLANK )+ word )? semiel DO ( wspace )* clist semiel DONE -> ^( SELECT name ( word )? clist ) )
			// com/caseystella/parser/bashast.g:180:11: SELECT ( BLANK )+ name ( wspace IN ( BLANK )+ word )? semiel DO ( wspace )* clist semiel DONE
			{
			SELECT209=(Token)match(input,SELECT,FOLLOW_SELECT_in_sel_expr1338); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SELECT.add(SELECT209);

			// com/caseystella/parser/bashast.g:180:18: ( BLANK )+
			int cnt91=0;
			loop91:
			while (true) {
				int alt91=2;
				int LA91_0 = input.LA(1);
				if ( (LA91_0==BLANK) ) {
					alt91=1;
				}

				switch (alt91) {
				case 1 :
					// com/caseystella/parser/bashast.g:180:18: BLANK
					{
					BLANK210=(Token)match(input,BLANK,FOLLOW_BLANK_in_sel_expr1340); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK210);

					}
					break;

				default :
					if ( cnt91 >= 1 ) break loop91;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(91, input);
					throw eee;
				}
				cnt91++;
			}

			pushFollow(FOLLOW_name_in_sel_expr1343);
			name211=name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_name.add(name211.getTree());
			// com/caseystella/parser/bashast.g:180:30: ( wspace IN ( BLANK )+ word )?
			int alt93=2;
			int LA93_0 = input.LA(1);
			if ( (LA93_0==BLANK) ) {
				alt93=1;
			}
			else if ( (LA93_0==EOL) ) {
				int LA93_2 = input.LA(2);
				if ( (LA93_2==IN) ) {
					alt93=1;
				}
			}
			switch (alt93) {
				case 1 :
					// com/caseystella/parser/bashast.g:180:31: wspace IN ( BLANK )+ word
					{
					pushFollow(FOLLOW_wspace_in_sel_expr1346);
					wspace212=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace212.getTree());
					IN213=(Token)match(input,IN,FOLLOW_IN_in_sel_expr1348); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_IN.add(IN213);

					// com/caseystella/parser/bashast.g:180:41: ( BLANK )+
					int cnt92=0;
					loop92:
					while (true) {
						int alt92=2;
						int LA92_0 = input.LA(1);
						if ( (LA92_0==BLANK) ) {
							alt92=1;
						}

						switch (alt92) {
						case 1 :
							// com/caseystella/parser/bashast.g:180:41: BLANK
							{
							BLANK214=(Token)match(input,BLANK,FOLLOW_BLANK_in_sel_expr1350); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK214);

							}
							break;

						default :
							if ( cnt92 >= 1 ) break loop92;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(92, input);
							throw eee;
						}
						cnt92++;
					}

					pushFollow(FOLLOW_word_in_sel_expr1353);
					word215=word();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_word.add(word215.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_semiel_in_sel_expr1357);
			semiel216=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel216.getTree());
			DO217=(Token)match(input,DO,FOLLOW_DO_in_sel_expr1359); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DO.add(DO217);

			// com/caseystella/parser/bashast.g:180:65: ( wspace )*
			loop94:
			while (true) {
				int alt94=2;
				int LA94_0 = input.LA(1);
				if ( (LA94_0==BLANK) ) {
					int LA94_2 = input.LA(2);
					if ( (synpred140_bashast()) ) {
						alt94=1;
					}

				}
				else if ( (LA94_0==EOL) ) {
					alt94=1;
				}

				switch (alt94) {
				case 1 :
					// com/caseystella/parser/bashast.g:180:65: wspace
					{
					pushFollow(FOLLOW_wspace_in_sel_expr1361);
					wspace218=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace218.getTree());
					}
					break;

				default :
					break loop94;
				}
			}

			pushFollow(FOLLOW_clist_in_sel_expr1364);
			clist219=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(clist219.getTree());
			pushFollow(FOLLOW_semiel_in_sel_expr1366);
			semiel220=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel220.getTree());
			DONE221=(Token)match(input,DONE,FOLLOW_DONE_in_sel_expr1368); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DONE.add(DONE221);

			// AST REWRITE
			// elements: name, clist, SELECT, word
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 180:91: -> ^( SELECT name ( word )? clist )
			{
				// com/caseystella/parser/bashast.g:180:94: ^( SELECT name ( word )? clist )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_SELECT.nextNode(), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// com/caseystella/parser/bashast.g:180:108: ( word )?
				if ( stream_word.hasNext() ) {
					adaptor.addChild(root_1, stream_word.nextTree());
				}
				stream_word.reset();

				adaptor.addChild(root_1, stream_clist.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sel_expr"


	public static class if_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "if_expr"
	// com/caseystella/parser/bashast.g:182:1: if_expr : IF ( wspace )+ ag= clist ( BLANK )* semiel THEN ( wspace )+ iflist= clist ( BLANK )? semiel ( EOL )* ( elif_expr )* ( ELSE ( wspace )+ else_list= clist ( BLANK )? semiel ( EOL )* )? FI -> ^( IF $ag $iflist ( elif_expr )* ( ^( $else_list) )? ) ;
	public final bashastParser.if_expr_return if_expr() throws RecognitionException {
		bashastParser.if_expr_return retval = new bashastParser.if_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token IF222=null;
		Token BLANK224=null;
		Token THEN226=null;
		Token BLANK228=null;
		Token EOL230=null;
		Token ELSE232=null;
		Token BLANK234=null;
		Token EOL236=null;
		Token FI237=null;
		ParserRuleReturnScope ag =null;
		ParserRuleReturnScope iflist =null;
		ParserRuleReturnScope else_list =null;
		ParserRuleReturnScope wspace223 =null;
		ParserRuleReturnScope semiel225 =null;
		ParserRuleReturnScope wspace227 =null;
		ParserRuleReturnScope semiel229 =null;
		ParserRuleReturnScope elif_expr231 =null;
		ParserRuleReturnScope wspace233 =null;
		ParserRuleReturnScope semiel235 =null;

		CommonTree IF222_tree=null;
		CommonTree BLANK224_tree=null;
		CommonTree THEN226_tree=null;
		CommonTree BLANK228_tree=null;
		CommonTree EOL230_tree=null;
		CommonTree ELSE232_tree=null;
		CommonTree BLANK234_tree=null;
		CommonTree EOL236_tree=null;
		CommonTree FI237_tree=null;
		RewriteRuleTokenStream stream_EOL=new RewriteRuleTokenStream(adaptor,"token EOL");
		RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
		RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
		RewriteRuleTokenStream stream_FI=new RewriteRuleTokenStream(adaptor,"token FI");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
		RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");
		RewriteRuleSubtreeStream stream_elif_expr=new RewriteRuleSubtreeStream(adaptor,"rule elif_expr");

		try {
			// com/caseystella/parser/bashast.g:182:9: ( IF ( wspace )+ ag= clist ( BLANK )* semiel THEN ( wspace )+ iflist= clist ( BLANK )? semiel ( EOL )* ( elif_expr )* ( ELSE ( wspace )+ else_list= clist ( BLANK )? semiel ( EOL )* )? FI -> ^( IF $ag $iflist ( elif_expr )* ( ^( $else_list) )? ) )
			// com/caseystella/parser/bashast.g:182:11: IF ( wspace )+ ag= clist ( BLANK )* semiel THEN ( wspace )+ iflist= clist ( BLANK )? semiel ( EOL )* ( elif_expr )* ( ELSE ( wspace )+ else_list= clist ( BLANK )? semiel ( EOL )* )? FI
			{
			IF222=(Token)match(input,IF,FOLLOW_IF_in_if_expr1392); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_IF.add(IF222);

			// com/caseystella/parser/bashast.g:182:14: ( wspace )+
			int cnt95=0;
			loop95:
			while (true) {
				int alt95=2;
				int LA95_0 = input.LA(1);
				if ( (LA95_0==BLANK) ) {
					int LA95_2 = input.LA(2);
					if ( (synpred141_bashast()) ) {
						alt95=1;
					}

				}
				else if ( (LA95_0==EOL) ) {
					alt95=1;
				}

				switch (alt95) {
				case 1 :
					// com/caseystella/parser/bashast.g:182:14: wspace
					{
					pushFollow(FOLLOW_wspace_in_if_expr1394);
					wspace223=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace223.getTree());
					}
					break;

				default :
					if ( cnt95 >= 1 ) break loop95;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(95, input);
					throw eee;
				}
				cnt95++;
			}

			pushFollow(FOLLOW_clist_in_if_expr1399);
			ag=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(ag.getTree());
			// com/caseystella/parser/bashast.g:182:31: ( BLANK )*
			loop96:
			while (true) {
				int alt96=2;
				int LA96_0 = input.LA(1);
				if ( (LA96_0==BLANK) ) {
					alt96=1;
				}

				switch (alt96) {
				case 1 :
					// com/caseystella/parser/bashast.g:182:31: BLANK
					{
					BLANK224=(Token)match(input,BLANK,FOLLOW_BLANK_in_if_expr1401); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK224);

					}
					break;

				default :
					break loop96;
				}
			}

			pushFollow(FOLLOW_semiel_in_if_expr1404);
			semiel225=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel225.getTree());
			THEN226=(Token)match(input,THEN,FOLLOW_THEN_in_if_expr1406); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_THEN.add(THEN226);

			// com/caseystella/parser/bashast.g:182:50: ( wspace )+
			int cnt97=0;
			loop97:
			while (true) {
				int alt97=2;
				int LA97_0 = input.LA(1);
				if ( (LA97_0==BLANK) ) {
					int LA97_2 = input.LA(2);
					if ( (synpred143_bashast()) ) {
						alt97=1;
					}

				}
				else if ( (LA97_0==EOL) ) {
					alt97=1;
				}

				switch (alt97) {
				case 1 :
					// com/caseystella/parser/bashast.g:182:50: wspace
					{
					pushFollow(FOLLOW_wspace_in_if_expr1408);
					wspace227=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace227.getTree());
					}
					break;

				default :
					if ( cnt97 >= 1 ) break loop97;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(97, input);
					throw eee;
				}
				cnt97++;
			}

			pushFollow(FOLLOW_clist_in_if_expr1413);
			iflist=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(iflist.getTree());
			// com/caseystella/parser/bashast.g:182:71: ( BLANK )?
			int alt98=2;
			int LA98_0 = input.LA(1);
			if ( (LA98_0==BLANK) ) {
				alt98=1;
			}
			switch (alt98) {
				case 1 :
					// com/caseystella/parser/bashast.g:182:71: BLANK
					{
					BLANK228=(Token)match(input,BLANK,FOLLOW_BLANK_in_if_expr1415); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK228);

					}
					break;

			}

			pushFollow(FOLLOW_semiel_in_if_expr1418);
			semiel229=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel229.getTree());
			// com/caseystella/parser/bashast.g:182:85: ( EOL )*
			loop99:
			while (true) {
				int alt99=2;
				int LA99_0 = input.LA(1);
				if ( (LA99_0==EOL) ) {
					alt99=1;
				}

				switch (alt99) {
				case 1 :
					// com/caseystella/parser/bashast.g:182:85: EOL
					{
					EOL230=(Token)match(input,EOL,FOLLOW_EOL_in_if_expr1420); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EOL.add(EOL230);

					}
					break;

				default :
					break loop99;
				}
			}

			// com/caseystella/parser/bashast.g:182:90: ( elif_expr )*
			loop100:
			while (true) {
				int alt100=2;
				int LA100_0 = input.LA(1);
				if ( (LA100_0==ELIF) ) {
					alt100=1;
				}

				switch (alt100) {
				case 1 :
					// com/caseystella/parser/bashast.g:182:91: elif_expr
					{
					pushFollow(FOLLOW_elif_expr_in_if_expr1424);
					elif_expr231=elif_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_elif_expr.add(elif_expr231.getTree());
					}
					break;

				default :
					break loop100;
				}
			}

			// com/caseystella/parser/bashast.g:182:103: ( ELSE ( wspace )+ else_list= clist ( BLANK )? semiel ( EOL )* )?
			int alt104=2;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==ELSE) ) {
				alt104=1;
			}
			switch (alt104) {
				case 1 :
					// com/caseystella/parser/bashast.g:182:104: ELSE ( wspace )+ else_list= clist ( BLANK )? semiel ( EOL )*
					{
					ELSE232=(Token)match(input,ELSE,FOLLOW_ELSE_in_if_expr1429); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ELSE.add(ELSE232);

					// com/caseystella/parser/bashast.g:182:109: ( wspace )+
					int cnt101=0;
					loop101:
					while (true) {
						int alt101=2;
						int LA101_0 = input.LA(1);
						if ( (LA101_0==BLANK) ) {
							int LA101_2 = input.LA(2);
							if ( (synpred147_bashast()) ) {
								alt101=1;
							}

						}
						else if ( (LA101_0==EOL) ) {
							alt101=1;
						}

						switch (alt101) {
						case 1 :
							// com/caseystella/parser/bashast.g:182:109: wspace
							{
							pushFollow(FOLLOW_wspace_in_if_expr1431);
							wspace233=wspace();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_wspace.add(wspace233.getTree());
							}
							break;

						default :
							if ( cnt101 >= 1 ) break loop101;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(101, input);
							throw eee;
						}
						cnt101++;
					}

					pushFollow(FOLLOW_clist_in_if_expr1436);
					else_list=clist();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clist.add(else_list.getTree());
					// com/caseystella/parser/bashast.g:182:133: ( BLANK )?
					int alt102=2;
					int LA102_0 = input.LA(1);
					if ( (LA102_0==BLANK) ) {
						alt102=1;
					}
					switch (alt102) {
						case 1 :
							// com/caseystella/parser/bashast.g:182:133: BLANK
							{
							BLANK234=(Token)match(input,BLANK,FOLLOW_BLANK_in_if_expr1438); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK234);

							}
							break;

					}

					pushFollow(FOLLOW_semiel_in_if_expr1441);
					semiel235=semiel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_semiel.add(semiel235.getTree());
					// com/caseystella/parser/bashast.g:182:147: ( EOL )*
					loop103:
					while (true) {
						int alt103=2;
						int LA103_0 = input.LA(1);
						if ( (LA103_0==EOL) ) {
							alt103=1;
						}

						switch (alt103) {
						case 1 :
							// com/caseystella/parser/bashast.g:182:147: EOL
							{
							EOL236=(Token)match(input,EOL,FOLLOW_EOL_in_if_expr1443); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_EOL.add(EOL236);

							}
							break;

						default :
							break loop103;
						}
					}

					}
					break;

			}

			FI237=(Token)match(input,FI,FOLLOW_FI_in_if_expr1448); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_FI.add(FI237);

			// AST REWRITE
			// elements: IF, ag, iflist, elif_expr, else_list
			// token labels: 
			// rule labels: retval, iflist, ag, else_list
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_iflist=new RewriteRuleSubtreeStream(adaptor,"rule iflist",iflist!=null?iflist.getTree():null);
			RewriteRuleSubtreeStream stream_ag=new RewriteRuleSubtreeStream(adaptor,"rule ag",ag!=null?ag.getTree():null);
			RewriteRuleSubtreeStream stream_else_list=new RewriteRuleSubtreeStream(adaptor,"rule else_list",else_list!=null?else_list.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 183:3: -> ^( IF $ag $iflist ( elif_expr )* ( ^( $else_list) )? )
			{
				// com/caseystella/parser/bashast.g:183:6: ^( IF $ag $iflist ( elif_expr )* ( ^( $else_list) )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_IF.nextNode(), root_1);
				adaptor.addChild(root_1, stream_ag.nextTree());
				adaptor.addChild(root_1, stream_iflist.nextTree());
				// com/caseystella/parser/bashast.g:183:23: ( elif_expr )*
				while ( stream_elif_expr.hasNext() ) {
					adaptor.addChild(root_1, stream_elif_expr.nextTree());
				}
				stream_elif_expr.reset();

				// com/caseystella/parser/bashast.g:183:36: ( ^( $else_list) )?
				if ( stream_else_list.hasNext() ) {
					// com/caseystella/parser/bashast.g:183:36: ^( $else_list)
					{
					CommonTree root_2 = (CommonTree)adaptor.nil();
					root_2 = (CommonTree)adaptor.becomeRoot(stream_else_list.nextNode(), root_2);
					adaptor.addChild(root_1, root_2);
					}

				}
				stream_else_list.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "if_expr"


	public static class elif_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "elif_expr"
	// com/caseystella/parser/bashast.g:185:1: elif_expr : ELIF ( BLANK )+ ag= clist ( BLANK )* semiel THEN ( wspace )+ iflist= clist ( BLANK )* semiel -> ^( IF[\"if\"] $ag $iflist) ;
	public final bashastParser.elif_expr_return elif_expr() throws RecognitionException {
		bashastParser.elif_expr_return retval = new bashastParser.elif_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token ELIF238=null;
		Token BLANK239=null;
		Token BLANK240=null;
		Token THEN242=null;
		Token BLANK244=null;
		ParserRuleReturnScope ag =null;
		ParserRuleReturnScope iflist =null;
		ParserRuleReturnScope semiel241 =null;
		ParserRuleReturnScope wspace243 =null;
		ParserRuleReturnScope semiel245 =null;

		CommonTree ELIF238_tree=null;
		CommonTree BLANK239_tree=null;
		CommonTree BLANK240_tree=null;
		CommonTree THEN242_tree=null;
		CommonTree BLANK244_tree=null;
		RewriteRuleTokenStream stream_ELIF=new RewriteRuleTokenStream(adaptor,"token ELIF");
		RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
		RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");

		try {
			// com/caseystella/parser/bashast.g:186:2: ( ELIF ( BLANK )+ ag= clist ( BLANK )* semiel THEN ( wspace )+ iflist= clist ( BLANK )* semiel -> ^( IF[\"if\"] $ag $iflist) )
			// com/caseystella/parser/bashast.g:186:4: ELIF ( BLANK )+ ag= clist ( BLANK )* semiel THEN ( wspace )+ iflist= clist ( BLANK )* semiel
			{
			ELIF238=(Token)match(input,ELIF,FOLLOW_ELIF_in_elif_expr1483); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ELIF.add(ELIF238);

			// com/caseystella/parser/bashast.g:186:9: ( BLANK )+
			int cnt105=0;
			loop105:
			while (true) {
				int alt105=2;
				int LA105_0 = input.LA(1);
				if ( (LA105_0==BLANK) ) {
					int LA105_2 = input.LA(2);
					if ( (synpred151_bashast()) ) {
						alt105=1;
					}

				}

				switch (alt105) {
				case 1 :
					// com/caseystella/parser/bashast.g:186:9: BLANK
					{
					BLANK239=(Token)match(input,BLANK,FOLLOW_BLANK_in_elif_expr1485); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK239);

					}
					break;

				default :
					if ( cnt105 >= 1 ) break loop105;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(105, input);
					throw eee;
				}
				cnt105++;
			}

			pushFollow(FOLLOW_clist_in_elif_expr1490);
			ag=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(ag.getTree());
			// com/caseystella/parser/bashast.g:186:25: ( BLANK )*
			loop106:
			while (true) {
				int alt106=2;
				int LA106_0 = input.LA(1);
				if ( (LA106_0==BLANK) ) {
					alt106=1;
				}

				switch (alt106) {
				case 1 :
					// com/caseystella/parser/bashast.g:186:25: BLANK
					{
					BLANK240=(Token)match(input,BLANK,FOLLOW_BLANK_in_elif_expr1492); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK240);

					}
					break;

				default :
					break loop106;
				}
			}

			pushFollow(FOLLOW_semiel_in_elif_expr1495);
			semiel241=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel241.getTree());
			THEN242=(Token)match(input,THEN,FOLLOW_THEN_in_elif_expr1497); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_THEN.add(THEN242);

			// com/caseystella/parser/bashast.g:186:44: ( wspace )+
			int cnt107=0;
			loop107:
			while (true) {
				int alt107=2;
				int LA107_0 = input.LA(1);
				if ( (LA107_0==BLANK) ) {
					int LA107_2 = input.LA(2);
					if ( (synpred153_bashast()) ) {
						alt107=1;
					}

				}
				else if ( (LA107_0==EOL) ) {
					alt107=1;
				}

				switch (alt107) {
				case 1 :
					// com/caseystella/parser/bashast.g:186:44: wspace
					{
					pushFollow(FOLLOW_wspace_in_elif_expr1499);
					wspace243=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace243.getTree());
					}
					break;

				default :
					if ( cnt107 >= 1 ) break loop107;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(107, input);
					throw eee;
				}
				cnt107++;
			}

			pushFollow(FOLLOW_clist_in_elif_expr1504);
			iflist=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(iflist.getTree());
			// com/caseystella/parser/bashast.g:186:65: ( BLANK )*
			loop108:
			while (true) {
				int alt108=2;
				int LA108_0 = input.LA(1);
				if ( (LA108_0==BLANK) ) {
					alt108=1;
				}

				switch (alt108) {
				case 1 :
					// com/caseystella/parser/bashast.g:186:65: BLANK
					{
					BLANK244=(Token)match(input,BLANK,FOLLOW_BLANK_in_elif_expr1506); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK244);

					}
					break;

				default :
					break loop108;
				}
			}

			pushFollow(FOLLOW_semiel_in_elif_expr1509);
			semiel245=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel245.getTree());
			// AST REWRITE
			// elements: ag, iflist
			// token labels: 
			// rule labels: retval, iflist, ag
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_iflist=new RewriteRuleSubtreeStream(adaptor,"rule iflist",iflist!=null?iflist.getTree():null);
			RewriteRuleSubtreeStream stream_ag=new RewriteRuleSubtreeStream(adaptor,"rule ag",ag!=null?ag.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 186:79: -> ^( IF[\"if\"] $ag $iflist)
			{
				// com/caseystella/parser/bashast.g:186:82: ^( IF[\"if\"] $ag $iflist)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IF, "if"), root_1);
				adaptor.addChild(root_1, stream_ag.nextTree());
				adaptor.addChild(root_1, stream_iflist.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "elif_expr"


	public static class while_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "while_expr"
	// com/caseystella/parser/bashast.g:187:1: while_expr : WHILE wspace istrue= clist semiel DO wspace dothis= clist semiel DONE -> ^( WHILE $istrue $dothis) ;
	public final bashastParser.while_expr_return while_expr() throws RecognitionException {
		bashastParser.while_expr_return retval = new bashastParser.while_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token WHILE246=null;
		Token DO249=null;
		Token DONE252=null;
		ParserRuleReturnScope istrue =null;
		ParserRuleReturnScope dothis =null;
		ParserRuleReturnScope wspace247 =null;
		ParserRuleReturnScope semiel248 =null;
		ParserRuleReturnScope wspace250 =null;
		ParserRuleReturnScope semiel251 =null;

		CommonTree WHILE246_tree=null;
		CommonTree DO249_tree=null;
		CommonTree DONE252_tree=null;
		RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
		RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
		RewriteRuleTokenStream stream_DONE=new RewriteRuleTokenStream(adaptor,"token DONE");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
		RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");

		try {
			// com/caseystella/parser/bashast.g:188:2: ( WHILE wspace istrue= clist semiel DO wspace dothis= clist semiel DONE -> ^( WHILE $istrue $dothis) )
			// com/caseystella/parser/bashast.g:188:4: WHILE wspace istrue= clist semiel DO wspace dothis= clist semiel DONE
			{
			WHILE246=(Token)match(input,WHILE,FOLLOW_WHILE_in_while_expr1530); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_WHILE.add(WHILE246);

			pushFollow(FOLLOW_wspace_in_while_expr1532);
			wspace247=wspace();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_wspace.add(wspace247.getTree());
			pushFollow(FOLLOW_clist_in_while_expr1536);
			istrue=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(istrue.getTree());
			pushFollow(FOLLOW_semiel_in_while_expr1538);
			semiel248=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel248.getTree());
			DO249=(Token)match(input,DO,FOLLOW_DO_in_while_expr1540); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DO.add(DO249);

			pushFollow(FOLLOW_wspace_in_while_expr1542);
			wspace250=wspace();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_wspace.add(wspace250.getTree());
			pushFollow(FOLLOW_clist_in_while_expr1546);
			dothis=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(dothis.getTree());
			pushFollow(FOLLOW_semiel_in_while_expr1548);
			semiel251=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel251.getTree());
			DONE252=(Token)match(input,DONE,FOLLOW_DONE_in_while_expr1550); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DONE.add(DONE252);

			// AST REWRITE
			// elements: WHILE, dothis, istrue
			// token labels: 
			// rule labels: istrue, retval, dothis
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_istrue=new RewriteRuleSubtreeStream(adaptor,"rule istrue",istrue!=null?istrue.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_dothis=new RewriteRuleSubtreeStream(adaptor,"rule dothis",dothis!=null?dothis.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 188:72: -> ^( WHILE $istrue $dothis)
			{
				// com/caseystella/parser/bashast.g:188:75: ^( WHILE $istrue $dothis)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_WHILE.nextNode(), root_1);
				adaptor.addChild(root_1, stream_istrue.nextTree());
				adaptor.addChild(root_1, stream_dothis.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "while_expr"


	public static class until_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "until_expr"
	// com/caseystella/parser/bashast.g:190:1: until_expr : UNTIL wspace istrue= clist semiel DO wspace dothis= clist semiel DONE -> ^( UNTIL $istrue $dothis) ;
	public final bashastParser.until_expr_return until_expr() throws RecognitionException {
		bashastParser.until_expr_return retval = new bashastParser.until_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token UNTIL253=null;
		Token DO256=null;
		Token DONE259=null;
		ParserRuleReturnScope istrue =null;
		ParserRuleReturnScope dothis =null;
		ParserRuleReturnScope wspace254 =null;
		ParserRuleReturnScope semiel255 =null;
		ParserRuleReturnScope wspace257 =null;
		ParserRuleReturnScope semiel258 =null;

		CommonTree UNTIL253_tree=null;
		CommonTree DO256_tree=null;
		CommonTree DONE259_tree=null;
		RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
		RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
		RewriteRuleTokenStream stream_DONE=new RewriteRuleTokenStream(adaptor,"token DONE");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
		RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");

		try {
			// com/caseystella/parser/bashast.g:191:2: ( UNTIL wspace istrue= clist semiel DO wspace dothis= clist semiel DONE -> ^( UNTIL $istrue $dothis) )
			// com/caseystella/parser/bashast.g:191:4: UNTIL wspace istrue= clist semiel DO wspace dothis= clist semiel DONE
			{
			UNTIL253=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_until_expr1572); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_UNTIL.add(UNTIL253);

			pushFollow(FOLLOW_wspace_in_until_expr1574);
			wspace254=wspace();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_wspace.add(wspace254.getTree());
			pushFollow(FOLLOW_clist_in_until_expr1578);
			istrue=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(istrue.getTree());
			pushFollow(FOLLOW_semiel_in_until_expr1580);
			semiel255=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel255.getTree());
			DO256=(Token)match(input,DO,FOLLOW_DO_in_until_expr1582); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DO.add(DO256);

			pushFollow(FOLLOW_wspace_in_until_expr1584);
			wspace257=wspace();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_wspace.add(wspace257.getTree());
			pushFollow(FOLLOW_clist_in_until_expr1588);
			dothis=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(dothis.getTree());
			pushFollow(FOLLOW_semiel_in_until_expr1590);
			semiel258=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel258.getTree());
			DONE259=(Token)match(input,DONE,FOLLOW_DONE_in_until_expr1592); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_DONE.add(DONE259);

			// AST REWRITE
			// elements: dothis, istrue, UNTIL
			// token labels: 
			// rule labels: istrue, retval, dothis
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_istrue=new RewriteRuleSubtreeStream(adaptor,"rule istrue",istrue!=null?istrue.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_dothis=new RewriteRuleSubtreeStream(adaptor,"rule dothis",dothis!=null?dothis.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 191:72: -> ^( UNTIL $istrue $dothis)
			{
				// com/caseystella/parser/bashast.g:191:75: ^( UNTIL $istrue $dothis)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot(stream_UNTIL.nextNode(), root_1);
				adaptor.addChild(root_1, stream_istrue.nextTree());
				adaptor.addChild(root_1, stream_dothis.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "until_expr"


	public static class case_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "case_expr"
	// com/caseystella/parser/bashast.g:193:1: case_expr : CASE ^ ( BLANK !)+ word wspace ! IN ! wspace ! ( case_stmt wspace !)* ( last_case )? ESAC !;
	public final bashastParser.case_expr_return case_expr() throws RecognitionException {
		bashastParser.case_expr_return retval = new bashastParser.case_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token CASE260=null;
		Token BLANK261=null;
		Token IN264=null;
		Token ESAC269=null;
		ParserRuleReturnScope word262 =null;
		ParserRuleReturnScope wspace263 =null;
		ParserRuleReturnScope wspace265 =null;
		ParserRuleReturnScope case_stmt266 =null;
		ParserRuleReturnScope wspace267 =null;
		ParserRuleReturnScope last_case268 =null;

		CommonTree CASE260_tree=null;
		CommonTree BLANK261_tree=null;
		CommonTree IN264_tree=null;
		CommonTree ESAC269_tree=null;

		try {
			// com/caseystella/parser/bashast.g:194:2: ( CASE ^ ( BLANK !)+ word wspace ! IN ! wspace ! ( case_stmt wspace !)* ( last_case )? ESAC !)
			// com/caseystella/parser/bashast.g:194:4: CASE ^ ( BLANK !)+ word wspace ! IN ! wspace ! ( case_stmt wspace !)* ( last_case )? ESAC !
			{
			root_0 = (CommonTree)adaptor.nil();


			CASE260=(Token)match(input,CASE,FOLLOW_CASE_in_case_expr1614); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CASE260_tree = (CommonTree)adaptor.create(CASE260);
			root_0 = (CommonTree)adaptor.becomeRoot(CASE260_tree, root_0);
			}

			// com/caseystella/parser/bashast.g:194:15: ( BLANK !)+
			int cnt109=0;
			loop109:
			while (true) {
				int alt109=2;
				int LA109_0 = input.LA(1);
				if ( (LA109_0==BLANK) ) {
					alt109=1;
				}

				switch (alt109) {
				case 1 :
					// com/caseystella/parser/bashast.g:194:15: BLANK !
					{
					BLANK261=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_expr1617); if (state.failed) return retval;
					}
					break;

				default :
					if ( cnt109 >= 1 ) break loop109;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(109, input);
					throw eee;
				}
				cnt109++;
			}

			pushFollow(FOLLOW_word_in_case_expr1621);
			word262=word();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, word262.getTree());

			pushFollow(FOLLOW_wspace_in_case_expr1623);
			wspace263=wspace();
			state._fsp--;
			if (state.failed) return retval;
			IN264=(Token)match(input,IN,FOLLOW_IN_in_case_expr1626); if (state.failed) return retval;
			pushFollow(FOLLOW_wspace_in_case_expr1629);
			wspace265=wspace();
			state._fsp--;
			if (state.failed) return retval;
			// com/caseystella/parser/bashast.g:194:43: ( case_stmt wspace !)*
			loop110:
			while (true) {
				int alt110=2;
				switch ( input.LA(1) ) {
				case BLANK:
					{
					int LA110_1 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case EOL:
					{
					int LA110_2 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case LPAREN:
					{
					int LA110_3 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case DOLLAR:
					{
					int LA110_4 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case TICK:
					{
					int LA110_5 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case LSQUARE:
					{
					int LA110_6 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case QMARK:
					{
					int LA110_7 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case TIMES:
					{
					int LA110_8 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case PLUS:
					{
					int LA110_9 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case AT:
					{
					int LA110_10 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case BANG:
					{
					int LA110_11 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case QUOTE:
					{
					int LA110_12 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case SQUOTE:
					{
					int LA110_13 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case DIGIT:
				case NUMBER:
					{
					int LA110_14 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case 138:
					{
					int LA110_15 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case NQSTR:
					{
					int LA110_16 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case EQUALS:
					{
					int LA110_17 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case PCT:
					{
					int LA110_18 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case PCTPCT:
					{
					int LA110_19 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case MINUS:
					{
					int LA110_20 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case DOT:
					{
					int LA110_21 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case DOTDOT:
					{
					int LA110_22 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case COLON:
					{
					int LA110_23 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case BOP:
					{
					int LA110_24 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case UOP:
					{
					int LA110_25 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case TEST:
					{
					int LA110_26 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case LETTER:
				case NAME:
					{
					int LA110_27 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case TILDE:
					{
					int LA110_28 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case INC:
					{
					int LA110_29 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case DEC:
					{
					int LA110_30 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case ARITH_ASSIGN:
					{
					int LA110_31 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case ESC_CHAR:
					{
					int LA110_32 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case CARET:
					{
					int LA110_33 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case ESAC:
					{
					int LA110_34 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case SLASH:
					{
					int LA110_35 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case RSQUARE:
					{
					int LA110_36 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				case CASE:
				case DO:
				case DONE:
				case ELIF:
				case ELSE:
				case FI:
				case FOR:
				case FUNCTION:
				case IF:
				case IN:
				case SELECT:
				case THEN:
				case TIME:
				case UNTIL:
				case WHILE:
					{
					int LA110_37 = input.LA(2);
					if ( (synpred156_bashast()) ) {
						alt110=1;
					}

					}
					break;
				}
				switch (alt110) {
				case 1 :
					// com/caseystella/parser/bashast.g:194:44: case_stmt wspace !
					{
					pushFollow(FOLLOW_case_stmt_in_case_expr1633);
					case_stmt266=case_stmt();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt266.getTree());

					pushFollow(FOLLOW_wspace_in_case_expr1635);
					wspace267=wspace();
					state._fsp--;
					if (state.failed) return retval;
					}
					break;

				default :
					break loop110;
				}
			}

			// com/caseystella/parser/bashast.g:194:64: ( last_case )?
			int alt111=2;
			int LA111_0 = input.LA(1);
			if ( (LA111_0==ARITH_ASSIGN||(LA111_0 >= AT && LA111_0 <= BOP)||(LA111_0 >= CARET && LA111_0 <= CASE)||LA111_0==COLON||(LA111_0 >= DEC && LA111_0 <= DOTDOT)||(LA111_0 >= ELIF && LA111_0 <= EQUALS)||LA111_0==ESC_CHAR||LA111_0==FI||LA111_0==FOR||LA111_0==FUNCTION||(LA111_0 >= IF && LA111_0 <= INC)||LA111_0==LETTER||LA111_0==LPAREN||LA111_0==LSQUARE||(LA111_0 >= MINUS && LA111_0 <= NAME)||(LA111_0 >= NQSTR && LA111_0 <= NUMBER)||(LA111_0 >= PCT && LA111_0 <= PCTPCT)||LA111_0==PLUS||(LA111_0 >= QMARK && LA111_0 <= QUOTE)||(LA111_0 >= RSQUARE && LA111_0 <= SELECT)||(LA111_0 >= SLASH && LA111_0 <= SQUOTE)||(LA111_0 >= TEST && LA111_0 <= UOP)||LA111_0==WHILE||LA111_0==138) ) {
				alt111=1;
			}
			else if ( (LA111_0==ESAC) ) {
				int LA111_34 = input.LA(2);
				if ( (synpred157_bashast()) ) {
					alt111=1;
				}
			}
			switch (alt111) {
				case 1 :
					// com/caseystella/parser/bashast.g:194:64: last_case
					{
					pushFollow(FOLLOW_last_case_in_case_expr1640);
					last_case268=last_case();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, last_case268.getTree());

					}
					break;

			}

			ESAC269=(Token)match(input,ESAC,FOLLOW_ESAC_in_case_expr1643); if (state.failed) return retval;
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_expr"


	public static class case_stmt_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "case_stmt"
	// com/caseystella/parser/bashast.g:195:1: case_stmt options {greedy=false; } : ( ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )* PIPE ( BLANK )? pattern )* ( BLANK )* RPAREN ( wspace )* clist ( wspace )* DOUBLE_SEMIC -> ^( CASE_PATTERN ( pattern )+ clist ) | ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )? PIPE ( BLANK )* pattern )* ( BLANK )* RPAREN ( wspace )* DOUBLE_SEMIC -> ^( CASE_PATTERN ( pattern )+ ) );
	public final bashastParser.case_stmt_return case_stmt() throws RecognitionException {
		bashastParser.case_stmt_return retval = new bashastParser.case_stmt_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN271=null;
		Token BLANK272=null;
		Token BLANK274=null;
		Token PIPE275=null;
		Token BLANK276=null;
		Token BLANK278=null;
		Token RPAREN279=null;
		Token DOUBLE_SEMIC283=null;
		Token LPAREN285=null;
		Token BLANK286=null;
		Token BLANK288=null;
		Token PIPE289=null;
		Token BLANK290=null;
		Token BLANK292=null;
		Token RPAREN293=null;
		Token DOUBLE_SEMIC295=null;
		ParserRuleReturnScope wspace270 =null;
		ParserRuleReturnScope pattern273 =null;
		ParserRuleReturnScope pattern277 =null;
		ParserRuleReturnScope wspace280 =null;
		ParserRuleReturnScope clist281 =null;
		ParserRuleReturnScope wspace282 =null;
		ParserRuleReturnScope wspace284 =null;
		ParserRuleReturnScope pattern287 =null;
		ParserRuleReturnScope pattern291 =null;
		ParserRuleReturnScope wspace294 =null;

		CommonTree LPAREN271_tree=null;
		CommonTree BLANK272_tree=null;
		CommonTree BLANK274_tree=null;
		CommonTree PIPE275_tree=null;
		CommonTree BLANK276_tree=null;
		CommonTree BLANK278_tree=null;
		CommonTree RPAREN279_tree=null;
		CommonTree DOUBLE_SEMIC283_tree=null;
		CommonTree LPAREN285_tree=null;
		CommonTree BLANK286_tree=null;
		CommonTree BLANK288_tree=null;
		CommonTree PIPE289_tree=null;
		CommonTree BLANK290_tree=null;
		CommonTree BLANK292_tree=null;
		CommonTree RPAREN293_tree=null;
		CommonTree DOUBLE_SEMIC295_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_PIPE=new RewriteRuleTokenStream(adaptor,"token PIPE");
		RewriteRuleTokenStream stream_DOUBLE_SEMIC=new RewriteRuleTokenStream(adaptor,"token DOUBLE_SEMIC");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");

		try {
			// com/caseystella/parser/bashast.g:197:2: ( ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )* PIPE ( BLANK )? pattern )* ( BLANK )* RPAREN ( wspace )* clist ( wspace )* DOUBLE_SEMIC -> ^( CASE_PATTERN ( pattern )+ clist ) | ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )? PIPE ( BLANK )* pattern )* ( BLANK )* RPAREN ( wspace )* DOUBLE_SEMIC -> ^( CASE_PATTERN ( pattern )+ ) )
			int alt129=2;
			switch ( input.LA(1) ) {
			case BLANK:
				{
				int LA129_1 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case EOL:
				{
				int LA129_2 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case LPAREN:
				{
				int LA129_3 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case DOLLAR:
				{
				int LA129_4 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case TICK:
				{
				int LA129_5 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case LSQUARE:
				{
				int LA129_6 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case QMARK:
				{
				int LA129_7 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case TIMES:
				{
				int LA129_8 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case PLUS:
				{
				int LA129_9 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case AT:
				{
				int LA129_10 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case BANG:
				{
				int LA129_11 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case QUOTE:
				{
				int LA129_12 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case SQUOTE:
				{
				int LA129_13 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case DIGIT:
			case NUMBER:
				{
				int LA129_14 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case 138:
				{
				int LA129_15 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case NQSTR:
				{
				int LA129_16 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case EQUALS:
				{
				int LA129_17 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case PCT:
				{
				int LA129_18 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case PCTPCT:
				{
				int LA129_19 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case MINUS:
				{
				int LA129_20 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case DOT:
				{
				int LA129_21 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case DOTDOT:
				{
				int LA129_22 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case COLON:
				{
				int LA129_23 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case BOP:
				{
				int LA129_24 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case UOP:
				{
				int LA129_25 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case TEST:
				{
				int LA129_26 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case LETTER:
			case NAME:
				{
				int LA129_27 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case TILDE:
				{
				int LA129_28 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case INC:
				{
				int LA129_29 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case DEC:
				{
				int LA129_30 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case ARITH_ASSIGN:
				{
				int LA129_31 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case ESC_CHAR:
				{
				int LA129_32 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case CARET:
				{
				int LA129_33 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case CASE:
			case DO:
			case DONE:
			case ELIF:
			case ELSE:
			case ESAC:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case SELECT:
			case THEN:
			case TIME:
			case UNTIL:
			case WHILE:
				{
				int LA129_34 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case SLASH:
				{
				int LA129_35 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			case RSQUARE:
				{
				int LA129_36 = input.LA(2);
				if ( (synpred167_bashast()) ) {
					alt129=1;
				}
				else if ( (true) ) {
					alt129=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 129, 0, input);
				throw nvae;
			}
			switch (alt129) {
				case 1 :
					// com/caseystella/parser/bashast.g:197:4: ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )* PIPE ( BLANK )? pattern )* ( BLANK )* RPAREN ( wspace )* clist ( wspace )* DOUBLE_SEMIC
					{
					// com/caseystella/parser/bashast.g:197:4: ( wspace )*
					loop112:
					while (true) {
						int alt112=2;
						int LA112_0 = input.LA(1);
						if ( (LA112_0==BLANK||LA112_0==EOL) ) {
							alt112=1;
						}

						switch (alt112) {
						case 1 :
							// com/caseystella/parser/bashast.g:197:4: wspace
							{
							pushFollow(FOLLOW_wspace_in_case_stmt1659);
							wspace270=wspace();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_wspace.add(wspace270.getTree());
							}
							break;

						default :
							break loop112;
						}
					}

					// com/caseystella/parser/bashast.g:197:12: ( LPAREN ( BLANK )* )?
					int alt114=2;
					int LA114_0 = input.LA(1);
					if ( (LA114_0==LPAREN) ) {
						alt114=1;
					}
					switch (alt114) {
						case 1 :
							// com/caseystella/parser/bashast.g:197:13: LPAREN ( BLANK )*
							{
							LPAREN271=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_case_stmt1663); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN271);

							// com/caseystella/parser/bashast.g:197:20: ( BLANK )*
							loop113:
							while (true) {
								int alt113=2;
								int LA113_0 = input.LA(1);
								if ( (LA113_0==BLANK) ) {
									alt113=1;
								}

								switch (alt113) {
								case 1 :
									// com/caseystella/parser/bashast.g:197:20: BLANK
									{
									BLANK272=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_stmt1665); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK272);

									}
									break;

								default :
									break loop113;
								}
							}

							}
							break;

					}

					pushFollow(FOLLOW_pattern_in_case_stmt1670);
					pattern273=pattern();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pattern.add(pattern273.getTree());
					// com/caseystella/parser/bashast.g:197:37: ( ( BLANK )* PIPE ( BLANK )? pattern )*
					loop117:
					while (true) {
						int alt117=2;
						alt117 = dfa117.predict(input);
						switch (alt117) {
						case 1 :
							// com/caseystella/parser/bashast.g:197:38: ( BLANK )* PIPE ( BLANK )? pattern
							{
							// com/caseystella/parser/bashast.g:197:38: ( BLANK )*
							loop115:
							while (true) {
								int alt115=2;
								int LA115_0 = input.LA(1);
								if ( (LA115_0==BLANK) ) {
									alt115=1;
								}

								switch (alt115) {
								case 1 :
									// com/caseystella/parser/bashast.g:197:38: BLANK
									{
									BLANK274=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_stmt1673); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK274);

									}
									break;

								default :
									break loop115;
								}
							}

							PIPE275=(Token)match(input,PIPE,FOLLOW_PIPE_in_case_stmt1676); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_PIPE.add(PIPE275);

							// com/caseystella/parser/bashast.g:197:50: ( BLANK )?
							int alt116=2;
							int LA116_0 = input.LA(1);
							if ( (LA116_0==BLANK) ) {
								alt116=1;
							}
							switch (alt116) {
								case 1 :
									// com/caseystella/parser/bashast.g:197:50: BLANK
									{
									BLANK276=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_stmt1678); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK276);

									}
									break;

							}

							pushFollow(FOLLOW_pattern_in_case_stmt1681);
							pattern277=pattern();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pattern.add(pattern277.getTree());
							}
							break;

						default :
							break loop117;
						}
					}

					// com/caseystella/parser/bashast.g:197:67: ( BLANK )*
					loop118:
					while (true) {
						int alt118=2;
						int LA118_0 = input.LA(1);
						if ( (LA118_0==BLANK) ) {
							alt118=1;
						}

						switch (alt118) {
						case 1 :
							// com/caseystella/parser/bashast.g:197:67: BLANK
							{
							BLANK278=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_stmt1685); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK278);

							}
							break;

						default :
							break loop118;
						}
					}

					RPAREN279=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_case_stmt1688); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN279);

					// com/caseystella/parser/bashast.g:197:81: ( wspace )*
					loop119:
					while (true) {
						int alt119=2;
						int LA119_0 = input.LA(1);
						if ( (LA119_0==BLANK) ) {
							int LA119_2 = input.LA(2);
							if ( (synpred165_bashast()) ) {
								alt119=1;
							}

						}
						else if ( (LA119_0==EOL) ) {
							alt119=1;
						}

						switch (alt119) {
						case 1 :
							// com/caseystella/parser/bashast.g:197:81: wspace
							{
							pushFollow(FOLLOW_wspace_in_case_stmt1690);
							wspace280=wspace();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_wspace.add(wspace280.getTree());
							}
							break;

						default :
							break loop119;
						}
					}

					pushFollow(FOLLOW_clist_in_case_stmt1693);
					clist281=clist();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clist.add(clist281.getTree());
					// com/caseystella/parser/bashast.g:197:95: ( wspace )*
					loop120:
					while (true) {
						int alt120=2;
						int LA120_0 = input.LA(1);
						if ( (LA120_0==BLANK||LA120_0==EOL) ) {
							alt120=1;
						}

						switch (alt120) {
						case 1 :
							// com/caseystella/parser/bashast.g:197:95: wspace
							{
							pushFollow(FOLLOW_wspace_in_case_stmt1695);
							wspace282=wspace();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_wspace.add(wspace282.getTree());
							}
							break;

						default :
							break loop120;
						}
					}

					DOUBLE_SEMIC283=(Token)match(input,DOUBLE_SEMIC,FOLLOW_DOUBLE_SEMIC_in_case_stmt1698); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOUBLE_SEMIC.add(DOUBLE_SEMIC283);

					// AST REWRITE
					// elements: clist, pattern
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 198:3: -> ^( CASE_PATTERN ( pattern )+ clist )
					{
						// com/caseystella/parser/bashast.g:198:6: ^( CASE_PATTERN ( pattern )+ clist )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE_PATTERN, "CASE_PATTERN"), root_1);
						if ( !(stream_pattern.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_pattern.hasNext() ) {
							adaptor.addChild(root_1, stream_pattern.nextTree());
						}
						stream_pattern.reset();

						adaptor.addChild(root_1, stream_clist.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:199:4: ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )? PIPE ( BLANK )* pattern )* ( BLANK )* RPAREN ( wspace )* DOUBLE_SEMIC
					{
					// com/caseystella/parser/bashast.g:199:4: ( wspace )*
					loop121:
					while (true) {
						int alt121=2;
						int LA121_0 = input.LA(1);
						if ( (LA121_0==BLANK||LA121_0==EOL) ) {
							alt121=1;
						}

						switch (alt121) {
						case 1 :
							// com/caseystella/parser/bashast.g:199:4: wspace
							{
							pushFollow(FOLLOW_wspace_in_case_stmt1716);
							wspace284=wspace();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_wspace.add(wspace284.getTree());
							}
							break;

						default :
							break loop121;
						}
					}

					// com/caseystella/parser/bashast.g:199:12: ( LPAREN ( BLANK )* )?
					int alt123=2;
					int LA123_0 = input.LA(1);
					if ( (LA123_0==LPAREN) ) {
						alt123=1;
					}
					switch (alt123) {
						case 1 :
							// com/caseystella/parser/bashast.g:199:13: LPAREN ( BLANK )*
							{
							LPAREN285=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_case_stmt1720); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN285);

							// com/caseystella/parser/bashast.g:199:20: ( BLANK )*
							loop122:
							while (true) {
								int alt122=2;
								int LA122_0 = input.LA(1);
								if ( (LA122_0==BLANK) ) {
									alt122=1;
								}

								switch (alt122) {
								case 1 :
									// com/caseystella/parser/bashast.g:199:20: BLANK
									{
									BLANK286=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_stmt1722); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK286);

									}
									break;

								default :
									break loop122;
								}
							}

							}
							break;

					}

					pushFollow(FOLLOW_pattern_in_case_stmt1727);
					pattern287=pattern();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pattern.add(pattern287.getTree());
					// com/caseystella/parser/bashast.g:199:37: ( ( BLANK )? PIPE ( BLANK )* pattern )*
					loop126:
					while (true) {
						int alt126=2;
						int LA126_0 = input.LA(1);
						if ( (LA126_0==BLANK) ) {
							int LA126_1 = input.LA(2);
							if ( (LA126_1==PIPE) ) {
								alt126=1;
							}

						}
						else if ( (LA126_0==PIPE) ) {
							alt126=1;
						}

						switch (alt126) {
						case 1 :
							// com/caseystella/parser/bashast.g:199:38: ( BLANK )? PIPE ( BLANK )* pattern
							{
							// com/caseystella/parser/bashast.g:199:38: ( BLANK )?
							int alt124=2;
							int LA124_0 = input.LA(1);
							if ( (LA124_0==BLANK) ) {
								alt124=1;
							}
							switch (alt124) {
								case 1 :
									// com/caseystella/parser/bashast.g:199:38: BLANK
									{
									BLANK288=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_stmt1730); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK288);

									}
									break;

							}

							PIPE289=(Token)match(input,PIPE,FOLLOW_PIPE_in_case_stmt1733); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_PIPE.add(PIPE289);

							// com/caseystella/parser/bashast.g:199:50: ( BLANK )*
							loop125:
							while (true) {
								int alt125=2;
								int LA125_0 = input.LA(1);
								if ( (LA125_0==BLANK) ) {
									alt125=1;
								}

								switch (alt125) {
								case 1 :
									// com/caseystella/parser/bashast.g:199:50: BLANK
									{
									BLANK290=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_stmt1735); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK290);

									}
									break;

								default :
									break loop125;
								}
							}

							pushFollow(FOLLOW_pattern_in_case_stmt1738);
							pattern291=pattern();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pattern.add(pattern291.getTree());
							}
							break;

						default :
							break loop126;
						}
					}

					// com/caseystella/parser/bashast.g:199:67: ( BLANK )*
					loop127:
					while (true) {
						int alt127=2;
						int LA127_0 = input.LA(1);
						if ( (LA127_0==BLANK) ) {
							alt127=1;
						}

						switch (alt127) {
						case 1 :
							// com/caseystella/parser/bashast.g:199:67: BLANK
							{
							BLANK292=(Token)match(input,BLANK,FOLLOW_BLANK_in_case_stmt1742); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK292);

							}
							break;

						default :
							break loop127;
						}
					}

					RPAREN293=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_case_stmt1745); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN293);

					// com/caseystella/parser/bashast.g:199:81: ( wspace )*
					loop128:
					while (true) {
						int alt128=2;
						int LA128_0 = input.LA(1);
						if ( (LA128_0==BLANK||LA128_0==EOL) ) {
							alt128=1;
						}

						switch (alt128) {
						case 1 :
							// com/caseystella/parser/bashast.g:199:81: wspace
							{
							pushFollow(FOLLOW_wspace_in_case_stmt1747);
							wspace294=wspace();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_wspace.add(wspace294.getTree());
							}
							break;

						default :
							break loop128;
						}
					}

					DOUBLE_SEMIC295=(Token)match(input,DOUBLE_SEMIC,FOLLOW_DOUBLE_SEMIC_in_case_stmt1750); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOUBLE_SEMIC.add(DOUBLE_SEMIC295);

					// AST REWRITE
					// elements: pattern
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 200:3: -> ^( CASE_PATTERN ( pattern )+ )
					{
						// com/caseystella/parser/bashast.g:200:6: ^( CASE_PATTERN ( pattern )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE_PATTERN, "CASE_PATTERN"), root_1);
						if ( !(stream_pattern.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_pattern.hasNext() ) {
							adaptor.addChild(root_1, stream_pattern.nextTree());
						}
						stream_pattern.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_stmt"


	public static class last_case_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "last_case"
	// com/caseystella/parser/bashast.g:203:1: last_case options {greedy=false; } : ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )* PIPE ( BLANK )? pattern )* ( BLANK )* RPAREN ( wspace )* ( clist )? ( ( wspace )* DOUBLE_SEMIC | ( ( BLANK )* EOL )+ ) -> ^( CASE_PATTERN ( pattern )+ ( clist )? ) ;
	public final bashastParser.last_case_return last_case() throws RecognitionException {
		bashastParser.last_case_return retval = new bashastParser.last_case_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN297=null;
		Token BLANK298=null;
		Token BLANK300=null;
		Token PIPE301=null;
		Token BLANK302=null;
		Token BLANK304=null;
		Token RPAREN305=null;
		Token DOUBLE_SEMIC309=null;
		Token BLANK310=null;
		Token EOL311=null;
		ParserRuleReturnScope wspace296 =null;
		ParserRuleReturnScope pattern299 =null;
		ParserRuleReturnScope pattern303 =null;
		ParserRuleReturnScope wspace306 =null;
		ParserRuleReturnScope clist307 =null;
		ParserRuleReturnScope wspace308 =null;

		CommonTree LPAREN297_tree=null;
		CommonTree BLANK298_tree=null;
		CommonTree BLANK300_tree=null;
		CommonTree PIPE301_tree=null;
		CommonTree BLANK302_tree=null;
		CommonTree BLANK304_tree=null;
		CommonTree RPAREN305_tree=null;
		CommonTree DOUBLE_SEMIC309_tree=null;
		CommonTree BLANK310_tree=null;
		CommonTree EOL311_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_PIPE=new RewriteRuleTokenStream(adaptor,"token PIPE");
		RewriteRuleTokenStream stream_DOUBLE_SEMIC=new RewriteRuleTokenStream(adaptor,"token DOUBLE_SEMIC");
		RewriteRuleTokenStream stream_EOL=new RewriteRuleTokenStream(adaptor,"token EOL");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_pattern=new RewriteRuleSubtreeStream(adaptor,"rule pattern");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");

		try {
			// com/caseystella/parser/bashast.g:205:2: ( ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )* PIPE ( BLANK )? pattern )* ( BLANK )* RPAREN ( wspace )* ( clist )? ( ( wspace )* DOUBLE_SEMIC | ( ( BLANK )* EOL )+ ) -> ^( CASE_PATTERN ( pattern )+ ( clist )? ) )
			// com/caseystella/parser/bashast.g:205:4: ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )* PIPE ( BLANK )? pattern )* ( BLANK )* RPAREN ( wspace )* ( clist )? ( ( wspace )* DOUBLE_SEMIC | ( ( BLANK )* EOL )+ )
			{
			// com/caseystella/parser/bashast.g:205:4: ( wspace )*
			loop130:
			while (true) {
				int alt130=2;
				int LA130_0 = input.LA(1);
				if ( (LA130_0==BLANK||LA130_0==EOL) ) {
					alt130=1;
				}

				switch (alt130) {
				case 1 :
					// com/caseystella/parser/bashast.g:205:4: wspace
					{
					pushFollow(FOLLOW_wspace_in_last_case1779);
					wspace296=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace296.getTree());
					}
					break;

				default :
					break loop130;
				}
			}

			// com/caseystella/parser/bashast.g:205:12: ( LPAREN ( BLANK )* )?
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==LPAREN) ) {
				alt132=1;
			}
			switch (alt132) {
				case 1 :
					// com/caseystella/parser/bashast.g:205:13: LPAREN ( BLANK )*
					{
					LPAREN297=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_last_case1783); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN297);

					// com/caseystella/parser/bashast.g:205:20: ( BLANK )*
					loop131:
					while (true) {
						int alt131=2;
						int LA131_0 = input.LA(1);
						if ( (LA131_0==BLANK) ) {
							alt131=1;
						}

						switch (alt131) {
						case 1 :
							// com/caseystella/parser/bashast.g:205:20: BLANK
							{
							BLANK298=(Token)match(input,BLANK,FOLLOW_BLANK_in_last_case1785); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK298);

							}
							break;

						default :
							break loop131;
						}
					}

					}
					break;

			}

			pushFollow(FOLLOW_pattern_in_last_case1790);
			pattern299=pattern();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_pattern.add(pattern299.getTree());
			// com/caseystella/parser/bashast.g:205:37: ( ( BLANK )* PIPE ( BLANK )? pattern )*
			loop135:
			while (true) {
				int alt135=2;
				alt135 = dfa135.predict(input);
				switch (alt135) {
				case 1 :
					// com/caseystella/parser/bashast.g:205:38: ( BLANK )* PIPE ( BLANK )? pattern
					{
					// com/caseystella/parser/bashast.g:205:38: ( BLANK )*
					loop133:
					while (true) {
						int alt133=2;
						int LA133_0 = input.LA(1);
						if ( (LA133_0==BLANK) ) {
							alt133=1;
						}

						switch (alt133) {
						case 1 :
							// com/caseystella/parser/bashast.g:205:38: BLANK
							{
							BLANK300=(Token)match(input,BLANK,FOLLOW_BLANK_in_last_case1793); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK300);

							}
							break;

						default :
							break loop133;
						}
					}

					PIPE301=(Token)match(input,PIPE,FOLLOW_PIPE_in_last_case1796); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PIPE.add(PIPE301);

					// com/caseystella/parser/bashast.g:205:50: ( BLANK )?
					int alt134=2;
					int LA134_0 = input.LA(1);
					if ( (LA134_0==BLANK) ) {
						alt134=1;
					}
					switch (alt134) {
						case 1 :
							// com/caseystella/parser/bashast.g:205:50: BLANK
							{
							BLANK302=(Token)match(input,BLANK,FOLLOW_BLANK_in_last_case1798); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK302);

							}
							break;

					}

					pushFollow(FOLLOW_pattern_in_last_case1801);
					pattern303=pattern();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pattern.add(pattern303.getTree());
					}
					break;

				default :
					break loop135;
				}
			}

			// com/caseystella/parser/bashast.g:205:67: ( BLANK )*
			loop136:
			while (true) {
				int alt136=2;
				int LA136_0 = input.LA(1);
				if ( (LA136_0==BLANK) ) {
					alt136=1;
				}

				switch (alt136) {
				case 1 :
					// com/caseystella/parser/bashast.g:205:67: BLANK
					{
					BLANK304=(Token)match(input,BLANK,FOLLOW_BLANK_in_last_case1805); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK304);

					}
					break;

				default :
					break loop136;
				}
			}

			RPAREN305=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_last_case1808); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN305);

			// com/caseystella/parser/bashast.g:205:81: ( wspace )*
			loop137:
			while (true) {
				int alt137=2;
				int LA137_0 = input.LA(1);
				if ( (LA137_0==BLANK) ) {
					int LA137_2 = input.LA(2);
					if ( (synpred183_bashast()) ) {
						alt137=1;
					}

				}
				else if ( (LA137_0==EOL) ) {
					int LA137_3 = input.LA(2);
					if ( (synpred183_bashast()) ) {
						alt137=1;
					}

				}

				switch (alt137) {
				case 1 :
					// com/caseystella/parser/bashast.g:205:81: wspace
					{
					pushFollow(FOLLOW_wspace_in_last_case1810);
					wspace306=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace306.getTree());
					}
					break;

				default :
					break loop137;
				}
			}

			// com/caseystella/parser/bashast.g:205:89: ( clist )?
			int alt138=2;
			alt138 = dfa138.predict(input);
			switch (alt138) {
				case 1 :
					// com/caseystella/parser/bashast.g:205:89: clist
					{
					pushFollow(FOLLOW_clist_in_last_case1813);
					clist307=clist();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clist.add(clist307.getTree());
					}
					break;

			}

			// com/caseystella/parser/bashast.g:205:96: ( ( wspace )* DOUBLE_SEMIC | ( ( BLANK )* EOL )+ )
			int alt142=2;
			alt142 = dfa142.predict(input);
			switch (alt142) {
				case 1 :
					// com/caseystella/parser/bashast.g:205:97: ( wspace )* DOUBLE_SEMIC
					{
					// com/caseystella/parser/bashast.g:205:97: ( wspace )*
					loop139:
					while (true) {
						int alt139=2;
						int LA139_0 = input.LA(1);
						if ( (LA139_0==BLANK||LA139_0==EOL) ) {
							alt139=1;
						}

						switch (alt139) {
						case 1 :
							// com/caseystella/parser/bashast.g:205:97: wspace
							{
							pushFollow(FOLLOW_wspace_in_last_case1817);
							wspace308=wspace();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_wspace.add(wspace308.getTree());
							}
							break;

						default :
							break loop139;
						}
					}

					DOUBLE_SEMIC309=(Token)match(input,DOUBLE_SEMIC,FOLLOW_DOUBLE_SEMIC_in_last_case1820); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOUBLE_SEMIC.add(DOUBLE_SEMIC309);

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:205:118: ( ( BLANK )* EOL )+
					{
					// com/caseystella/parser/bashast.g:205:118: ( ( BLANK )* EOL )+
					int cnt141=0;
					loop141:
					while (true) {
						int alt141=2;
						int LA141_0 = input.LA(1);
						if ( (LA141_0==BLANK||LA141_0==EOL) ) {
							alt141=1;
						}

						switch (alt141) {
						case 1 :
							// com/caseystella/parser/bashast.g:205:119: ( BLANK )* EOL
							{
							// com/caseystella/parser/bashast.g:205:119: ( BLANK )*
							loop140:
							while (true) {
								int alt140=2;
								int LA140_0 = input.LA(1);
								if ( (LA140_0==BLANK) ) {
									alt140=1;
								}

								switch (alt140) {
								case 1 :
									// com/caseystella/parser/bashast.g:205:119: BLANK
									{
									BLANK310=(Token)match(input,BLANK,FOLLOW_BLANK_in_last_case1823); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK310);

									}
									break;

								default :
									break loop140;
								}
							}

							EOL311=(Token)match(input,EOL,FOLLOW_EOL_in_last_case1826); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_EOL.add(EOL311);

							}
							break;

						default :
							if ( cnt141 >= 1 ) break loop141;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(141, input);
							throw eee;
						}
						cnt141++;
					}

					}
					break;

			}

			// AST REWRITE
			// elements: pattern, clist
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 206:3: -> ^( CASE_PATTERN ( pattern )+ ( clist )? )
			{
				// com/caseystella/parser/bashast.g:206:6: ^( CASE_PATTERN ( pattern )+ ( clist )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE_PATTERN, "CASE_PATTERN"), root_1);
				if ( !(stream_pattern.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_pattern.hasNext() ) {
					adaptor.addChild(root_1, stream_pattern.nextTree());
				}
				stream_pattern.reset();

				// com/caseystella/parser/bashast.g:206:30: ( clist )?
				if ( stream_clist.hasNext() ) {
					adaptor.addChild(root_1, stream_clist.nextTree());
				}
				stream_clist.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "last_case"


	public static class subshell_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "subshell"
	// com/caseystella/parser/bashast.g:209:1: subshell : LPAREN ( wspace )? clist ( ( BLANK )* SEMIC )? ( ( BLANK )* EOL )* ( BLANK )* RPAREN -> ^( SUBSHELL clist ) ;
	public final bashastParser.subshell_return subshell() throws RecognitionException {
		bashastParser.subshell_return retval = new bashastParser.subshell_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN312=null;
		Token BLANK315=null;
		Token SEMIC316=null;
		Token BLANK317=null;
		Token EOL318=null;
		Token BLANK319=null;
		Token RPAREN320=null;
		ParserRuleReturnScope wspace313 =null;
		ParserRuleReturnScope clist314 =null;

		CommonTree LPAREN312_tree=null;
		CommonTree BLANK315_tree=null;
		CommonTree SEMIC316_tree=null;
		CommonTree BLANK317_tree=null;
		CommonTree EOL318_tree=null;
		CommonTree BLANK319_tree=null;
		CommonTree RPAREN320_tree=null;
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_EOL=new RewriteRuleTokenStream(adaptor,"token EOL");
		RewriteRuleTokenStream stream_SEMIC=new RewriteRuleTokenStream(adaptor,"token SEMIC");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");

		try {
			// com/caseystella/parser/bashast.g:209:9: ( LPAREN ( wspace )? clist ( ( BLANK )* SEMIC )? ( ( BLANK )* EOL )* ( BLANK )* RPAREN -> ^( SUBSHELL clist ) )
			// com/caseystella/parser/bashast.g:209:11: LPAREN ( wspace )? clist ( ( BLANK )* SEMIC )? ( ( BLANK )* EOL )* ( BLANK )* RPAREN
			{
			LPAREN312=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subshell1852); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN312);

			// com/caseystella/parser/bashast.g:209:18: ( wspace )?
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==BLANK) ) {
				int LA143_1 = input.LA(2);
				if ( (synpred189_bashast()) ) {
					alt143=1;
				}
			}
			else if ( (LA143_0==EOL) ) {
				alt143=1;
			}
			switch (alt143) {
				case 1 :
					// com/caseystella/parser/bashast.g:209:18: wspace
					{
					pushFollow(FOLLOW_wspace_in_subshell1854);
					wspace313=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace313.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_clist_in_subshell1857);
			clist314=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(clist314.getTree());
			// com/caseystella/parser/bashast.g:209:32: ( ( BLANK )* SEMIC )?
			int alt145=2;
			alt145 = dfa145.predict(input);
			switch (alt145) {
				case 1 :
					// com/caseystella/parser/bashast.g:209:33: ( BLANK )* SEMIC
					{
					// com/caseystella/parser/bashast.g:209:33: ( BLANK )*
					loop144:
					while (true) {
						int alt144=2;
						int LA144_0 = input.LA(1);
						if ( (LA144_0==BLANK) ) {
							alt144=1;
						}

						switch (alt144) {
						case 1 :
							// com/caseystella/parser/bashast.g:209:33: BLANK
							{
							BLANK315=(Token)match(input,BLANK,FOLLOW_BLANK_in_subshell1860); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK315);

							}
							break;

						default :
							break loop144;
						}
					}

					SEMIC316=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_subshell1863); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMIC.add(SEMIC316);

					}
					break;

			}

			// com/caseystella/parser/bashast.g:209:48: ( ( BLANK )* EOL )*
			loop147:
			while (true) {
				int alt147=2;
				alt147 = dfa147.predict(input);
				switch (alt147) {
				case 1 :
					// com/caseystella/parser/bashast.g:209:49: ( BLANK )* EOL
					{
					// com/caseystella/parser/bashast.g:209:49: ( BLANK )*
					loop146:
					while (true) {
						int alt146=2;
						int LA146_0 = input.LA(1);
						if ( (LA146_0==BLANK) ) {
							alt146=1;
						}

						switch (alt146) {
						case 1 :
							// com/caseystella/parser/bashast.g:209:49: BLANK
							{
							BLANK317=(Token)match(input,BLANK,FOLLOW_BLANK_in_subshell1868); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK317);

							}
							break;

						default :
							break loop146;
						}
					}

					EOL318=(Token)match(input,EOL,FOLLOW_EOL_in_subshell1871); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EOL.add(EOL318);

					}
					break;

				default :
					break loop147;
				}
			}

			// com/caseystella/parser/bashast.g:209:62: ( BLANK )*
			loop148:
			while (true) {
				int alt148=2;
				int LA148_0 = input.LA(1);
				if ( (LA148_0==BLANK) ) {
					alt148=1;
				}

				switch (alt148) {
				case 1 :
					// com/caseystella/parser/bashast.g:209:62: BLANK
					{
					BLANK319=(Token)match(input,BLANK,FOLLOW_BLANK_in_subshell1875); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK319);

					}
					break;

				default :
					break loop148;
				}
			}

			RPAREN320=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subshell1878); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN320);

			// AST REWRITE
			// elements: clist
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 209:76: -> ^( SUBSHELL clist )
			{
				// com/caseystella/parser/bashast.g:209:79: ^( SUBSHELL clist )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSHELL, "SUBSHELL"), root_1);
				adaptor.addChild(root_1, stream_clist.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subshell"


	public static class currshell_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "currshell"
	// com/caseystella/parser/bashast.g:211:1: currshell : LBRACE wspace clist semiel RBRACE -> ^( CURRSHELL clist ) ;
	public final bashastParser.currshell_return currshell() throws RecognitionException {
		bashastParser.currshell_return retval = new bashastParser.currshell_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LBRACE321=null;
		Token RBRACE325=null;
		ParserRuleReturnScope wspace322 =null;
		ParserRuleReturnScope clist323 =null;
		ParserRuleReturnScope semiel324 =null;

		CommonTree LBRACE321_tree=null;
		CommonTree RBRACE325_tree=null;
		RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
		RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
		RewriteRuleSubtreeStream stream_semiel=new RewriteRuleSubtreeStream(adaptor,"rule semiel");

		try {
			// com/caseystella/parser/bashast.g:212:2: ( LBRACE wspace clist semiel RBRACE -> ^( CURRSHELL clist ) )
			// com/caseystella/parser/bashast.g:212:4: LBRACE wspace clist semiel RBRACE
			{
			LBRACE321=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_currshell1895); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LBRACE.add(LBRACE321);

			pushFollow(FOLLOW_wspace_in_currshell1897);
			wspace322=wspace();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_wspace.add(wspace322.getTree());
			pushFollow(FOLLOW_clist_in_currshell1899);
			clist323=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(clist323.getTree());
			pushFollow(FOLLOW_semiel_in_currshell1901);
			semiel324=semiel();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_semiel.add(semiel324.getTree());
			RBRACE325=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_currshell1903); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RBRACE.add(RBRACE325);

			// AST REWRITE
			// elements: clist
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 212:38: -> ^( CURRSHELL clist )
			{
				// com/caseystella/parser/bashast.g:212:41: ^( CURRSHELL clist )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CURRSHELL, "CURRSHELL"), root_1);
				adaptor.addChild(root_1, stream_clist.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "currshell"


	public static class arith_comparison_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arith_comparison"
	// com/caseystella/parser/bashast.g:214:1: arith_comparison : LLPAREN ( wspace )? arithmetic ( wspace )? RRPAREN -> ^( COMPOUND_ARITH arithmetic ) ;
	public final bashastParser.arith_comparison_return arith_comparison() throws RecognitionException {
		bashastParser.arith_comparison_return retval = new bashastParser.arith_comparison_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LLPAREN326=null;
		Token RRPAREN330=null;
		ParserRuleReturnScope wspace327 =null;
		ParserRuleReturnScope arithmetic328 =null;
		ParserRuleReturnScope wspace329 =null;

		CommonTree LLPAREN326_tree=null;
		CommonTree RRPAREN330_tree=null;
		RewriteRuleTokenStream stream_LLPAREN=new RewriteRuleTokenStream(adaptor,"token LLPAREN");
		RewriteRuleTokenStream stream_RRPAREN=new RewriteRuleTokenStream(adaptor,"token RRPAREN");
		RewriteRuleSubtreeStream stream_arithmetic=new RewriteRuleSubtreeStream(adaptor,"rule arithmetic");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");

		try {
			// com/caseystella/parser/bashast.g:215:2: ( LLPAREN ( wspace )? arithmetic ( wspace )? RRPAREN -> ^( COMPOUND_ARITH arithmetic ) )
			// com/caseystella/parser/bashast.g:215:4: LLPAREN ( wspace )? arithmetic ( wspace )? RRPAREN
			{
			LLPAREN326=(Token)match(input,LLPAREN,FOLLOW_LLPAREN_in_arith_comparison1920); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LLPAREN.add(LLPAREN326);

			// com/caseystella/parser/bashast.g:215:12: ( wspace )?
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==BLANK||LA149_0==EOL) ) {
				alt149=1;
			}
			switch (alt149) {
				case 1 :
					// com/caseystella/parser/bashast.g:215:12: wspace
					{
					pushFollow(FOLLOW_wspace_in_arith_comparison1922);
					wspace327=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace327.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_arithmetic_in_arith_comparison1925);
			arithmetic328=arithmetic();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_arithmetic.add(arithmetic328.getTree());
			// com/caseystella/parser/bashast.g:215:31: ( wspace )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==BLANK||LA150_0==EOL) ) {
				alt150=1;
			}
			switch (alt150) {
				case 1 :
					// com/caseystella/parser/bashast.g:215:31: wspace
					{
					pushFollow(FOLLOW_wspace_in_arith_comparison1927);
					wspace329=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace329.getTree());
					}
					break;

			}

			RRPAREN330=(Token)match(input,RRPAREN,FOLLOW_RRPAREN_in_arith_comparison1930); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RRPAREN.add(RRPAREN330);

			// AST REWRITE
			// elements: arithmetic
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 215:47: -> ^( COMPOUND_ARITH arithmetic )
			{
				// com/caseystella/parser/bashast.g:215:50: ^( COMPOUND_ARITH arithmetic )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPOUND_ARITH, "COMPOUND_ARITH"), root_1);
				adaptor.addChild(root_1, stream_arithmetic.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "arith_comparison"


	public static class cond_comparison_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "cond_comparison"
	// com/caseystella/parser/bashast.g:216:1: cond_comparison : cond_expr -> ^( COMPOUND_COND cond_expr ) ;
	public final bashastParser.cond_comparison_return cond_comparison() throws RecognitionException {
		bashastParser.cond_comparison_return retval = new bashastParser.cond_comparison_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope cond_expr331 =null;

		RewriteRuleSubtreeStream stream_cond_expr=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr");

		try {
			// com/caseystella/parser/bashast.g:217:2: ( cond_expr -> ^( COMPOUND_COND cond_expr ) )
			// com/caseystella/parser/bashast.g:217:4: cond_expr
			{
			pushFollow(FOLLOW_cond_expr_in_cond_comparison1946);
			cond_expr331=cond_expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_cond_expr.add(cond_expr331.getTree());
			// AST REWRITE
			// elements: cond_expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 217:14: -> ^( COMPOUND_COND cond_expr )
			{
				// com/caseystella/parser/bashast.g:217:17: ^( COMPOUND_COND cond_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COMPOUND_COND, "COMPOUND_COND"), root_1);
				adaptor.addChild(root_1, stream_cond_expr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cond_comparison"


	public static class var_def_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "var_def"
	// com/caseystella/parser/bashast.g:220:1: var_def : ( ( BLANK )* name LSQUARE ( BLANK )? index ( BLANK )* RSQUARE EQUALS value ( BLANK )* -> ^( EQUALS ^( name index ) value ) | ( BLANK !)* name EQUALS ^ value ( BLANK !)* | ( BLANK !)* LET ! name EQUALS ^ arithmetic ( BLANK !)* );
	public final bashastParser.var_def_return var_def() throws RecognitionException {
		bashastParser.var_def_return retval = new bashastParser.var_def_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK332=null;
		Token LSQUARE334=null;
		Token BLANK335=null;
		Token BLANK337=null;
		Token RSQUARE338=null;
		Token EQUALS339=null;
		Token BLANK341=null;
		Token BLANK342=null;
		Token EQUALS344=null;
		Token BLANK346=null;
		Token BLANK347=null;
		Token LET348=null;
		Token EQUALS350=null;
		Token BLANK352=null;
		ParserRuleReturnScope name333 =null;
		ParserRuleReturnScope index336 =null;
		ParserRuleReturnScope value340 =null;
		ParserRuleReturnScope name343 =null;
		ParserRuleReturnScope value345 =null;
		ParserRuleReturnScope name349 =null;
		ParserRuleReturnScope arithmetic351 =null;

		CommonTree BLANK332_tree=null;
		CommonTree LSQUARE334_tree=null;
		CommonTree BLANK335_tree=null;
		CommonTree BLANK337_tree=null;
		CommonTree RSQUARE338_tree=null;
		CommonTree EQUALS339_tree=null;
		CommonTree BLANK341_tree=null;
		CommonTree BLANK342_tree=null;
		CommonTree EQUALS344_tree=null;
		CommonTree BLANK346_tree=null;
		CommonTree BLANK347_tree=null;
		CommonTree LET348_tree=null;
		CommonTree EQUALS350_tree=null;
		CommonTree BLANK352_tree=null;
		RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
		RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
		RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_index=new RewriteRuleSubtreeStream(adaptor,"rule index");
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
		RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");

		try {
			// com/caseystella/parser/bashast.g:220:9: ( ( BLANK )* name LSQUARE ( BLANK )? index ( BLANK )* RSQUARE EQUALS value ( BLANK )* -> ^( EQUALS ^( name index ) value ) | ( BLANK !)* name EQUALS ^ value ( BLANK !)* | ( BLANK !)* LET ! name EQUALS ^ arithmetic ( BLANK !)* )
			int alt159=3;
			alt159 = dfa159.predict(input);
			switch (alt159) {
				case 1 :
					// com/caseystella/parser/bashast.g:220:11: ( BLANK )* name LSQUARE ( BLANK )? index ( BLANK )* RSQUARE EQUALS value ( BLANK )*
					{
					// com/caseystella/parser/bashast.g:220:11: ( BLANK )*
					loop151:
					while (true) {
						int alt151=2;
						int LA151_0 = input.LA(1);
						if ( (LA151_0==BLANK) ) {
							alt151=1;
						}

						switch (alt151) {
						case 1 :
							// com/caseystella/parser/bashast.g:220:11: BLANK
							{
							BLANK332=(Token)match(input,BLANK,FOLLOW_BLANK_in_var_def1963); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK332);

							}
							break;

						default :
							break loop151;
						}
					}

					pushFollow(FOLLOW_name_in_var_def1966);
					name333=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name.add(name333.getTree());
					LSQUARE334=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_var_def1968); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE334);

					// com/caseystella/parser/bashast.g:220:31: ( BLANK )?
					int alt152=2;
					int LA152_0 = input.LA(1);
					if ( (LA152_0==BLANK) ) {
						alt152=1;
					}
					switch (alt152) {
						case 1 :
							// com/caseystella/parser/bashast.g:220:31: BLANK
							{
							BLANK335=(Token)match(input,BLANK,FOLLOW_BLANK_in_var_def1970); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK335);

							}
							break;

					}

					pushFollow(FOLLOW_index_in_var_def1973);
					index336=index();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_index.add(index336.getTree());
					// com/caseystella/parser/bashast.g:220:44: ( BLANK )*
					loop153:
					while (true) {
						int alt153=2;
						int LA153_0 = input.LA(1);
						if ( (LA153_0==BLANK) ) {
							alt153=1;
						}

						switch (alt153) {
						case 1 :
							// com/caseystella/parser/bashast.g:220:44: BLANK
							{
							BLANK337=(Token)match(input,BLANK,FOLLOW_BLANK_in_var_def1975); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK337);

							}
							break;

						default :
							break loop153;
						}
					}

					RSQUARE338=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_var_def1978); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE338);

					EQUALS339=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_var_def1980); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS339);

					pushFollow(FOLLOW_value_in_var_def1982);
					value340=value();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_value.add(value340.getTree());
					// com/caseystella/parser/bashast.g:220:72: ( BLANK )*
					loop154:
					while (true) {
						int alt154=2;
						int LA154_0 = input.LA(1);
						if ( (LA154_0==BLANK) ) {
							int LA154_1 = input.LA(2);
							if ( (synpred200_bashast()) ) {
								alt154=1;
							}

						}

						switch (alt154) {
						case 1 :
							// com/caseystella/parser/bashast.g:220:72: BLANK
							{
							BLANK341=(Token)match(input,BLANK,FOLLOW_BLANK_in_var_def1984); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK341);

							}
							break;

						default :
							break loop154;
						}
					}

					// AST REWRITE
					// elements: name, value, index, EQUALS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 220:79: -> ^( EQUALS ^( name index ) value )
					{
						// com/caseystella/parser/bashast.g:220:82: ^( EQUALS ^( name index ) value )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_EQUALS.nextNode(), root_1);
						// com/caseystella/parser/bashast.g:220:91: ^( name index )
						{
						CommonTree root_2 = (CommonTree)adaptor.nil();
						root_2 = (CommonTree)adaptor.becomeRoot(stream_name.nextNode(), root_2);
						adaptor.addChild(root_2, stream_index.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_1, stream_value.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:221:4: ( BLANK !)* name EQUALS ^ value ( BLANK !)*
					{
					root_0 = (CommonTree)adaptor.nil();


					// com/caseystella/parser/bashast.g:221:9: ( BLANK !)*
					loop155:
					while (true) {
						int alt155=2;
						int LA155_0 = input.LA(1);
						if ( (LA155_0==BLANK) ) {
							alt155=1;
						}

						switch (alt155) {
						case 1 :
							// com/caseystella/parser/bashast.g:221:9: BLANK !
							{
							BLANK342=(Token)match(input,BLANK,FOLLOW_BLANK_in_var_def2005); if (state.failed) return retval;
							}
							break;

						default :
							break loop155;
						}
					}

					pushFollow(FOLLOW_name_in_var_def2009);
					name343=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, name343.getTree());

					EQUALS344=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_var_def2011); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQUALS344_tree = (CommonTree)adaptor.create(EQUALS344);
					root_0 = (CommonTree)adaptor.becomeRoot(EQUALS344_tree, root_0);
					}

					pushFollow(FOLLOW_value_in_var_def2014);
					value345=value();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, value345.getTree());

					// com/caseystella/parser/bashast.g:221:36: ( BLANK !)*
					loop156:
					while (true) {
						int alt156=2;
						int LA156_0 = input.LA(1);
						if ( (LA156_0==BLANK) ) {
							int LA156_1 = input.LA(2);
							if ( (synpred203_bashast()) ) {
								alt156=1;
							}

						}

						switch (alt156) {
						case 1 :
							// com/caseystella/parser/bashast.g:221:36: BLANK !
							{
							BLANK346=(Token)match(input,BLANK,FOLLOW_BLANK_in_var_def2016); if (state.failed) return retval;
							}
							break;

						default :
							break loop156;
						}
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:222:4: ( BLANK !)* LET ! name EQUALS ^ arithmetic ( BLANK !)*
					{
					root_0 = (CommonTree)adaptor.nil();


					// com/caseystella/parser/bashast.g:222:9: ( BLANK !)*
					loop157:
					while (true) {
						int alt157=2;
						int LA157_0 = input.LA(1);
						if ( (LA157_0==BLANK) ) {
							alt157=1;
						}

						switch (alt157) {
						case 1 :
							// com/caseystella/parser/bashast.g:222:9: BLANK !
							{
							BLANK347=(Token)match(input,BLANK,FOLLOW_BLANK_in_var_def2023); if (state.failed) return retval;
							}
							break;

						default :
							break loop157;
						}
					}

					LET348=(Token)match(input,LET,FOLLOW_LET_in_var_def2027); if (state.failed) return retval;
					pushFollow(FOLLOW_name_in_var_def2030);
					name349=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, name349.getTree());

					EQUALS350=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_var_def2032); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQUALS350_tree = (CommonTree)adaptor.create(EQUALS350);
					root_0 = (CommonTree)adaptor.becomeRoot(EQUALS350_tree, root_0);
					}

					pushFollow(FOLLOW_arithmetic_in_var_def2035);
					arithmetic351=arithmetic();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic351.getTree());

					// com/caseystella/parser/bashast.g:222:46: ( BLANK !)*
					loop158:
					while (true) {
						int alt158=2;
						int LA158_0 = input.LA(1);
						if ( (LA158_0==BLANK) ) {
							int LA158_1 = input.LA(2);
							if ( (synpred206_bashast()) ) {
								alt158=1;
							}

						}

						switch (alt158) {
						case 1 :
							// com/caseystella/parser/bashast.g:222:46: BLANK !
							{
							BLANK352=(Token)match(input,BLANK,FOLLOW_BLANK_in_var_def2037); if (state.failed) return retval;
							}
							break;

						default :
							break loop158;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "var_def"


	public static class value_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "value"
	// com/caseystella/parser/bashast.g:224:1: value : ( num | var_ref | fname | LPAREN ! ( wspace !)? arr_val RPAREN !);
	public final bashastParser.value_return value() throws RecognitionException {
		bashastParser.value_return retval = new bashastParser.value_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN356=null;
		Token RPAREN359=null;
		ParserRuleReturnScope num353 =null;
		ParserRuleReturnScope var_ref354 =null;
		ParserRuleReturnScope fname355 =null;
		ParserRuleReturnScope wspace357 =null;
		ParserRuleReturnScope arr_val358 =null;

		CommonTree LPAREN356_tree=null;
		CommonTree RPAREN359_tree=null;

		try {
			// com/caseystella/parser/bashast.g:224:7: ( num | var_ref | fname | LPAREN ! ( wspace !)? arr_val RPAREN !)
			int alt161=4;
			switch ( input.LA(1) ) {
			case DIGIT:
			case NUMBER:
				{
				int LA161_1 = input.LA(2);
				if ( (synpred207_bashast()) ) {
					alt161=1;
				}
				else if ( (synpred209_bashast()) ) {
					alt161=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 161, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOLLAR:
				{
				int LA161_2 = input.LA(2);
				if ( (synpred208_bashast()) ) {
					alt161=2;
				}
				else if ( (synpred209_bashast()) ) {
					alt161=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 161, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ARITH_ASSIGN:
			case AT:
			case BANG:
			case BOP:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DO:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LETTER:
			case LSQUARE:
			case MINUS:
			case NAME:
			case NQSTR:
			case PCT:
			case PCTPCT:
			case PLUS:
			case QMARK:
			case QUOTE:
			case RSQUARE:
			case SELECT:
			case SLASH:
			case SQUOTE:
			case TEST:
			case THEN:
			case TICK:
			case TILDE:
			case TIME:
			case TIMES:
			case UNTIL:
			case UOP:
			case WHILE:
			case 138:
				{
				alt161=3;
				}
				break;
			case LPAREN:
				{
				alt161=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 161, 0, input);
				throw nvae;
			}
			switch (alt161) {
				case 1 :
					// com/caseystella/parser/bashast.g:224:9: num
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_num_in_value2047);
					num353=num();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, num353.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:225:4: var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_ref_in_value2052);
					var_ref354=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref354.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:226:4: fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fname_in_value2057);
					fname355=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname355.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:227:4: LPAREN ! ( wspace !)? arr_val RPAREN !
					{
					root_0 = (CommonTree)adaptor.nil();


					LPAREN356=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_value2062); if (state.failed) return retval;
					// com/caseystella/parser/bashast.g:227:18: ( wspace !)?
					int alt160=2;
					int LA160_0 = input.LA(1);
					if ( (LA160_0==BLANK||LA160_0==EOL) ) {
						alt160=1;
					}
					switch (alt160) {
						case 1 :
							// com/caseystella/parser/bashast.g:227:18: wspace !
							{
							pushFollow(FOLLOW_wspace_in_value2065);
							wspace357=wspace();
							state._fsp--;
							if (state.failed) return retval;
							}
							break;

					}

					pushFollow(FOLLOW_arr_val_in_value2069);
					arr_val358=arr_val();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arr_val358.getTree());

					RPAREN359=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_value2071); if (state.failed) return retval;
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "value"


	public static class arr_val_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arr_val"
	// com/caseystella/parser/bashast.g:229:1: arr_val : (| (ag+= val ( wspace )? )+ -> ^( ARRAY ( $ag)+ ) );
	public final bashastParser.arr_val_return arr_val() throws RecognitionException {
		bashastParser.arr_val_return retval = new bashastParser.arr_val_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		List<Object> list_ag=null;
		ParserRuleReturnScope wspace360 =null;
		RuleReturnScope ag = null;
		RewriteRuleSubtreeStream stream_val=new RewriteRuleSubtreeStream(adaptor,"rule val");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");

		try {
			// com/caseystella/parser/bashast.g:229:9: (| (ag+= val ( wspace )? )+ -> ^( ARRAY ( $ag)+ ) )
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==RPAREN) ) {
				alt164=1;
			}
			else if ( (LA164_0==ARITH_ASSIGN||(LA164_0 >= AT && LA164_0 <= BANG)||LA164_0==BOP||(LA164_0 >= CARET && LA164_0 <= CASE)||LA164_0==COLON||(LA164_0 >= DEC && LA164_0 <= DOTDOT)||(LA164_0 >= ELIF && LA164_0 <= ELSE)||LA164_0==EQUALS||(LA164_0 >= ESAC && LA164_0 <= ESC_CHAR)||LA164_0==FI||LA164_0==FOR||LA164_0==FUNCTION||(LA164_0 >= IF && LA164_0 <= INC)||LA164_0==LETTER||LA164_0==LSQUARE||(LA164_0 >= MINUS && LA164_0 <= NAME)||(LA164_0 >= NQSTR && LA164_0 <= NUMBER)||(LA164_0 >= PCT && LA164_0 <= PCTPCT)||LA164_0==PLUS||(LA164_0 >= QMARK && LA164_0 <= QUOTE)||(LA164_0 >= RSQUARE && LA164_0 <= SELECT)||(LA164_0 >= SLASH && LA164_0 <= SQUOTE)||(LA164_0 >= TEST && LA164_0 <= UOP)||LA164_0==WHILE||LA164_0==138) ) {
				alt164=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 164, 0, input);
				throw nvae;
			}

			switch (alt164) {
				case 1 :
					// com/caseystella/parser/bashast.g:230:2: 
					{
					root_0 = (CommonTree)adaptor.nil();


					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:230:4: (ag+= val ( wspace )? )+
					{
					// com/caseystella/parser/bashast.g:230:4: (ag+= val ( wspace )? )+
					int cnt163=0;
					loop163:
					while (true) {
						int alt163=2;
						int LA163_0 = input.LA(1);
						if ( (LA163_0==ARITH_ASSIGN||(LA163_0 >= AT && LA163_0 <= BANG)||LA163_0==BOP||(LA163_0 >= CARET && LA163_0 <= CASE)||LA163_0==COLON||(LA163_0 >= DEC && LA163_0 <= DOTDOT)||(LA163_0 >= ELIF && LA163_0 <= ELSE)||LA163_0==EQUALS||(LA163_0 >= ESAC && LA163_0 <= ESC_CHAR)||LA163_0==FI||LA163_0==FOR||LA163_0==FUNCTION||(LA163_0 >= IF && LA163_0 <= INC)||LA163_0==LETTER||LA163_0==LSQUARE||(LA163_0 >= MINUS && LA163_0 <= NAME)||(LA163_0 >= NQSTR && LA163_0 <= NUMBER)||(LA163_0 >= PCT && LA163_0 <= PCTPCT)||LA163_0==PLUS||(LA163_0 >= QMARK && LA163_0 <= QUOTE)||(LA163_0 >= RSQUARE && LA163_0 <= SELECT)||(LA163_0 >= SLASH && LA163_0 <= SQUOTE)||(LA163_0 >= TEST && LA163_0 <= UOP)||LA163_0==WHILE||LA163_0==138) ) {
							alt163=1;
						}

						switch (alt163) {
						case 1 :
							// com/caseystella/parser/bashast.g:230:5: ag+= val ( wspace )?
							{
							pushFollow(FOLLOW_val_in_arr_val2086);
							ag=val();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_val.add(ag.getTree());
							if (list_ag==null) list_ag=new ArrayList<Object>();
							list_ag.add(ag.getTree());
							// com/caseystella/parser/bashast.g:230:13: ( wspace )?
							int alt162=2;
							int LA162_0 = input.LA(1);
							if ( (LA162_0==BLANK||LA162_0==EOL) ) {
								alt162=1;
							}
							switch (alt162) {
								case 1 :
									// com/caseystella/parser/bashast.g:230:13: wspace
									{
									pushFollow(FOLLOW_wspace_in_arr_val2088);
									wspace360=wspace();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_wspace.add(wspace360.getTree());
									}
									break;

							}

							}
							break;

						default :
							if ( cnt163 >= 1 ) break loop163;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(163, input);
							throw eee;
						}
						cnt163++;
					}

					// AST REWRITE
					// elements: ag
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: ag
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_ag=new RewriteRuleSubtreeStream(adaptor,"token ag",list_ag);
					root_0 = (CommonTree)adaptor.nil();
					// 230:23: -> ^( ARRAY ( $ag)+ )
					{
						// com/caseystella/parser/bashast.g:230:26: ^( ARRAY ( $ag)+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY, "ARRAY"), root_1);
						if ( !(stream_ag.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_ag.hasNext() ) {
							adaptor.addChild(root_1, stream_ag.nextTree());
						}
						stream_ag.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "arr_val"


	public static class val_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "val"
	// com/caseystella/parser/bashast.g:231:1: val : ( '[' ! ( BLANK !)* index ( BLANK !)? ']' ! EQUALS ^ pos_val | pos_val );
	public final bashastParser.val_return val() throws RecognitionException {
		bashastParser.val_return retval = new bashastParser.val_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token char_literal361=null;
		Token BLANK362=null;
		Token BLANK364=null;
		Token char_literal365=null;
		Token EQUALS366=null;
		ParserRuleReturnScope index363 =null;
		ParserRuleReturnScope pos_val367 =null;
		ParserRuleReturnScope pos_val368 =null;

		CommonTree char_literal361_tree=null;
		CommonTree BLANK362_tree=null;
		CommonTree BLANK364_tree=null;
		CommonTree char_literal365_tree=null;
		CommonTree EQUALS366_tree=null;

		try {
			// com/caseystella/parser/bashast.g:231:5: ( '[' ! ( BLANK !)* index ( BLANK !)? ']' ! EQUALS ^ pos_val | pos_val )
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==LSQUARE) ) {
				int LA167_1 = input.LA(2);
				if ( (synpred216_bashast()) ) {
					alt167=1;
				}
				else if ( (true) ) {
					alt167=2;
				}

			}
			else if ( (LA167_0==ARITH_ASSIGN||(LA167_0 >= AT && LA167_0 <= BANG)||LA167_0==BOP||(LA167_0 >= CARET && LA167_0 <= CASE)||LA167_0==COLON||(LA167_0 >= DEC && LA167_0 <= DOTDOT)||(LA167_0 >= ELIF && LA167_0 <= ELSE)||LA167_0==EQUALS||(LA167_0 >= ESAC && LA167_0 <= ESC_CHAR)||LA167_0==FI||LA167_0==FOR||LA167_0==FUNCTION||(LA167_0 >= IF && LA167_0 <= INC)||LA167_0==LETTER||(LA167_0 >= MINUS && LA167_0 <= NAME)||(LA167_0 >= NQSTR && LA167_0 <= NUMBER)||(LA167_0 >= PCT && LA167_0 <= PCTPCT)||LA167_0==PLUS||(LA167_0 >= QMARK && LA167_0 <= QUOTE)||(LA167_0 >= RSQUARE && LA167_0 <= SELECT)||(LA167_0 >= SLASH && LA167_0 <= SQUOTE)||(LA167_0 >= TEST && LA167_0 <= UOP)||LA167_0==WHILE||LA167_0==138) ) {
				alt167=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 167, 0, input);
				throw nvae;
			}

			switch (alt167) {
				case 1 :
					// com/caseystella/parser/bashast.g:231:7: '[' ! ( BLANK !)* index ( BLANK !)? ']' ! EQUALS ^ pos_val
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal361=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_val2108); if (state.failed) return retval;
					// com/caseystella/parser/bashast.g:231:16: ( BLANK !)*
					loop165:
					while (true) {
						int alt165=2;
						int LA165_0 = input.LA(1);
						if ( (LA165_0==BLANK) ) {
							alt165=1;
						}

						switch (alt165) {
						case 1 :
							// com/caseystella/parser/bashast.g:231:16: BLANK !
							{
							BLANK362=(Token)match(input,BLANK,FOLLOW_BLANK_in_val2110); if (state.failed) return retval;
							}
							break;

						default :
							break loop165;
						}
					}

					pushFollow(FOLLOW_index_in_val2113);
					index363=index();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index363.getTree());

					// com/caseystella/parser/bashast.g:231:29: ( BLANK !)?
					int alt166=2;
					int LA166_0 = input.LA(1);
					if ( (LA166_0==BLANK) ) {
						alt166=1;
					}
					switch (alt166) {
						case 1 :
							// com/caseystella/parser/bashast.g:231:29: BLANK !
							{
							BLANK364=(Token)match(input,BLANK,FOLLOW_BLANK_in_val2115); if (state.failed) return retval;
							}
							break;

					}

					char_literal365=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_val2118); if (state.failed) return retval;
					EQUALS366=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_val2120); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQUALS366_tree = (CommonTree)adaptor.create(EQUALS366);
					root_0 = (CommonTree)adaptor.becomeRoot(EQUALS366_tree, root_0);
					}

					pushFollow(FOLLOW_pos_val_in_val2123);
					pos_val367=pos_val();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pos_val367.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:232:4: pos_val
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_pos_val_in_val2128);
					pos_val368=pos_val();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pos_val368.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "val"


	public static class pos_val_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pos_val"
	// com/caseystella/parser/bashast.g:233:1: pos_val : ( command_sub | var_ref | num | fname );
	public final bashastParser.pos_val_return pos_val() throws RecognitionException {
		bashastParser.pos_val_return retval = new bashastParser.pos_val_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope command_sub369 =null;
		ParserRuleReturnScope var_ref370 =null;
		ParserRuleReturnScope num371 =null;
		ParserRuleReturnScope fname372 =null;


		try {
			// com/caseystella/parser/bashast.g:233:9: ( command_sub | var_ref | num | fname )
			int alt168=4;
			switch ( input.LA(1) ) {
			case DOLLAR:
				{
				int LA168_1 = input.LA(2);
				if ( (synpred217_bashast()) ) {
					alt168=1;
				}
				else if ( (synpred218_bashast()) ) {
					alt168=2;
				}
				else if ( (true) ) {
					alt168=4;
				}

				}
				break;
			case TICK:
				{
				int LA168_2 = input.LA(2);
				if ( (synpred217_bashast()) ) {
					alt168=1;
				}
				else if ( (true) ) {
					alt168=4;
				}

				}
				break;
			case DIGIT:
			case NUMBER:
				{
				int LA168_3 = input.LA(2);
				if ( (synpred219_bashast()) ) {
					alt168=3;
				}
				else if ( (true) ) {
					alt168=4;
				}

				}
				break;
			case ARITH_ASSIGN:
			case AT:
			case BANG:
			case BOP:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DO:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LETTER:
			case LSQUARE:
			case MINUS:
			case NAME:
			case NQSTR:
			case PCT:
			case PCTPCT:
			case PLUS:
			case QMARK:
			case QUOTE:
			case RSQUARE:
			case SELECT:
			case SLASH:
			case SQUOTE:
			case TEST:
			case THEN:
			case TILDE:
			case TIME:
			case TIMES:
			case UNTIL:
			case UOP:
			case WHILE:
			case 138:
				{
				alt168=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 168, 0, input);
				throw nvae;
			}
			switch (alt168) {
				case 1 :
					// com/caseystella/parser/bashast.g:233:11: command_sub
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_command_sub_in_pos_val2135);
					command_sub369=command_sub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, command_sub369.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:234:4: var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_ref_in_pos_val2140);
					var_ref370=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref370.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:235:4: num
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_num_in_pos_val2145);
					num371=num();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, num371.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:236:4: fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fname_in_pos_val2150);
					fname372=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname372.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pos_val"


	public static class index_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "index"
	// com/caseystella/parser/bashast.g:238:1: index : ( num | name );
	public final bashastParser.index_return index() throws RecognitionException {
		bashastParser.index_return retval = new bashastParser.index_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope num373 =null;
		ParserRuleReturnScope name374 =null;


		try {
			// com/caseystella/parser/bashast.g:238:7: ( num | name )
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==DIGIT||LA169_0==NUMBER) ) {
				alt169=1;
			}
			else if ( (LA169_0==LETTER||LA169_0==NAME||LA169_0==138) ) {
				alt169=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 169, 0, input);
				throw nvae;
			}

			switch (alt169) {
				case 1 :
					// com/caseystella/parser/bashast.g:238:9: num
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_num_in_index2158);
					num373=num();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, num373.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:239:4: name
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_name_in_index2163);
					name374=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, name374.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index"


	public static class var_ref_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "var_ref"
	// com/caseystella/parser/bashast.g:241:1: var_ref : ( DOLLAR LBRACE ( BLANK )* var_exp ( BLANK )* RBRACE -> ^( VAR_REF var_exp ) | DOLLAR name -> ^( VAR_REF name ) | DOLLAR num -> ^( VAR_REF num ) | DOLLAR TIMES -> ^( VAR_REF TIMES ) | DOLLAR AT -> ^( VAR_REF AT ) | DOLLAR POUND -> ^( VAR_REF POUND ) | DOLLAR QMARK -> ^( VAR_REF QMARK ) | DOLLAR MINUS -> ^( VAR_REF MINUS ) | DOLLAR BANG -> ^( VAR_REF BANG ) | DOLLAR '_' -> ^( VAR_REF '_' ) );
	public final bashastParser.var_ref_return var_ref() throws RecognitionException {
		bashastParser.var_ref_return retval = new bashastParser.var_ref_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DOLLAR375=null;
		Token LBRACE376=null;
		Token BLANK377=null;
		Token BLANK379=null;
		Token RBRACE380=null;
		Token DOLLAR381=null;
		Token DOLLAR383=null;
		Token DOLLAR385=null;
		Token TIMES386=null;
		Token DOLLAR387=null;
		Token AT388=null;
		Token DOLLAR389=null;
		Token POUND390=null;
		Token DOLLAR391=null;
		Token QMARK392=null;
		Token DOLLAR393=null;
		Token MINUS394=null;
		Token DOLLAR395=null;
		Token BANG396=null;
		Token DOLLAR397=null;
		Token char_literal398=null;
		ParserRuleReturnScope var_exp378 =null;
		ParserRuleReturnScope name382 =null;
		ParserRuleReturnScope num384 =null;

		CommonTree DOLLAR375_tree=null;
		CommonTree LBRACE376_tree=null;
		CommonTree BLANK377_tree=null;
		CommonTree BLANK379_tree=null;
		CommonTree RBRACE380_tree=null;
		CommonTree DOLLAR381_tree=null;
		CommonTree DOLLAR383_tree=null;
		CommonTree DOLLAR385_tree=null;
		CommonTree TIMES386_tree=null;
		CommonTree DOLLAR387_tree=null;
		CommonTree AT388_tree=null;
		CommonTree DOLLAR389_tree=null;
		CommonTree POUND390_tree=null;
		CommonTree DOLLAR391_tree=null;
		CommonTree QMARK392_tree=null;
		CommonTree DOLLAR393_tree=null;
		CommonTree MINUS394_tree=null;
		CommonTree DOLLAR395_tree=null;
		CommonTree BANG396_tree=null;
		CommonTree DOLLAR397_tree=null;
		CommonTree char_literal398_tree=null;
		RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
		RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
		RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
		RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
		RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
		RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
		RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
		RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
		RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
		RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_num=new RewriteRuleSubtreeStream(adaptor,"rule num");
		RewriteRuleSubtreeStream stream_var_exp=new RewriteRuleSubtreeStream(adaptor,"rule var_exp");
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");

		try {
			// com/caseystella/parser/bashast.g:242:2: ( DOLLAR LBRACE ( BLANK )* var_exp ( BLANK )* RBRACE -> ^( VAR_REF var_exp ) | DOLLAR name -> ^( VAR_REF name ) | DOLLAR num -> ^( VAR_REF num ) | DOLLAR TIMES -> ^( VAR_REF TIMES ) | DOLLAR AT -> ^( VAR_REF AT ) | DOLLAR POUND -> ^( VAR_REF POUND ) | DOLLAR QMARK -> ^( VAR_REF QMARK ) | DOLLAR MINUS -> ^( VAR_REF MINUS ) | DOLLAR BANG -> ^( VAR_REF BANG ) | DOLLAR '_' -> ^( VAR_REF '_' ) )
			int alt172=10;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==DOLLAR) ) {
				switch ( input.LA(2) ) {
				case LBRACE:
					{
					alt172=1;
					}
					break;
				case TIMES:
					{
					alt172=4;
					}
					break;
				case AT:
					{
					alt172=5;
					}
					break;
				case POUND:
					{
					alt172=6;
					}
					break;
				case QMARK:
					{
					alt172=7;
					}
					break;
				case MINUS:
					{
					alt172=8;
					}
					break;
				case BANG:
					{
					alt172=9;
					}
					break;
				case 138:
					{
					int LA172_9 = input.LA(3);
					if ( (synpred224_bashast()) ) {
						alt172=2;
					}
					else if ( (true) ) {
						alt172=10;
					}

					}
					break;
				case LETTER:
				case NAME:
					{
					alt172=2;
					}
					break;
				case DIGIT:
				case NUMBER:
					{
					alt172=3;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 172, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 172, 0, input);
				throw nvae;
			}

			switch (alt172) {
				case 1 :
					// com/caseystella/parser/bashast.g:242:4: DOLLAR LBRACE ( BLANK )* var_exp ( BLANK )* RBRACE
					{
					DOLLAR375=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_var_ref2172); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR375);

					LBRACE376=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_var_ref2174); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LBRACE.add(LBRACE376);

					// com/caseystella/parser/bashast.g:242:18: ( BLANK )*
					loop170:
					while (true) {
						int alt170=2;
						int LA170_0 = input.LA(1);
						if ( (LA170_0==BLANK) ) {
							alt170=1;
						}

						switch (alt170) {
						case 1 :
							// com/caseystella/parser/bashast.g:242:18: BLANK
							{
							BLANK377=(Token)match(input,BLANK,FOLLOW_BLANK_in_var_ref2176); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK377);

							}
							break;

						default :
							break loop170;
						}
					}

					pushFollow(FOLLOW_var_exp_in_var_ref2179);
					var_exp378=var_exp();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_exp.add(var_exp378.getTree());
					// com/caseystella/parser/bashast.g:242:33: ( BLANK )*
					loop171:
					while (true) {
						int alt171=2;
						int LA171_0 = input.LA(1);
						if ( (LA171_0==BLANK) ) {
							alt171=1;
						}

						switch (alt171) {
						case 1 :
							// com/caseystella/parser/bashast.g:242:33: BLANK
							{
							BLANK379=(Token)match(input,BLANK,FOLLOW_BLANK_in_var_ref2181); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK379);

							}
							break;

						default :
							break loop171;
						}
					}

					RBRACE380=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_var_ref2184); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RBRACE.add(RBRACE380);

					// AST REWRITE
					// elements: var_exp
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 242:47: -> ^( VAR_REF var_exp )
					{
						// com/caseystella/parser/bashast.g:242:50: ^( VAR_REF var_exp )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_var_exp.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:243:4: DOLLAR name
					{
					DOLLAR381=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_var_ref2197); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR381);

					pushFollow(FOLLOW_name_in_var_ref2199);
					name382=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name.add(name382.getTree());
					// AST REWRITE
					// elements: name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 243:16: -> ^( VAR_REF name )
					{
						// com/caseystella/parser/bashast.g:243:19: ^( VAR_REF name )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:244:4: DOLLAR num
					{
					DOLLAR383=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_var_ref2212); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR383);

					pushFollow(FOLLOW_num_in_var_ref2214);
					num384=num();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_num.add(num384.getTree());
					// AST REWRITE
					// elements: num
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 244:15: -> ^( VAR_REF num )
					{
						// com/caseystella/parser/bashast.g:244:18: ^( VAR_REF num )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_num.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:245:4: DOLLAR TIMES
					{
					DOLLAR385=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_var_ref2227); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR385);

					TIMES386=(Token)match(input,TIMES,FOLLOW_TIMES_in_var_ref2229); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TIMES.add(TIMES386);

					// AST REWRITE
					// elements: TIMES
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 245:17: -> ^( VAR_REF TIMES )
					{
						// com/caseystella/parser/bashast.g:245:20: ^( VAR_REF TIMES )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_TIMES.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:246:4: DOLLAR AT
					{
					DOLLAR387=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_var_ref2242); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR387);

					AT388=(Token)match(input,AT,FOLLOW_AT_in_var_ref2244); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AT.add(AT388);

					// AST REWRITE
					// elements: AT
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 246:14: -> ^( VAR_REF AT )
					{
						// com/caseystella/parser/bashast.g:246:17: ^( VAR_REF AT )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_AT.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:247:4: DOLLAR POUND
					{
					DOLLAR389=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_var_ref2257); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR389);

					POUND390=(Token)match(input,POUND,FOLLOW_POUND_in_var_ref2259); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_POUND.add(POUND390);

					// AST REWRITE
					// elements: POUND
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 247:17: -> ^( VAR_REF POUND )
					{
						// com/caseystella/parser/bashast.g:247:20: ^( VAR_REF POUND )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_POUND.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:248:4: DOLLAR QMARK
					{
					DOLLAR391=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_var_ref2272); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR391);

					QMARK392=(Token)match(input,QMARK,FOLLOW_QMARK_in_var_ref2274); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QMARK.add(QMARK392);

					// AST REWRITE
					// elements: QMARK
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 248:17: -> ^( VAR_REF QMARK )
					{
						// com/caseystella/parser/bashast.g:248:20: ^( VAR_REF QMARK )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_QMARK.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:249:4: DOLLAR MINUS
					{
					DOLLAR393=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_var_ref2287); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR393);

					MINUS394=(Token)match(input,MINUS,FOLLOW_MINUS_in_var_ref2289); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_MINUS.add(MINUS394);

					// AST REWRITE
					// elements: MINUS
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 249:17: -> ^( VAR_REF MINUS )
					{
						// com/caseystella/parser/bashast.g:249:20: ^( VAR_REF MINUS )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_MINUS.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 9 :
					// com/caseystella/parser/bashast.g:250:4: DOLLAR BANG
					{
					DOLLAR395=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_var_ref2302); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR395);

					BANG396=(Token)match(input,BANG,FOLLOW_BANG_in_var_ref2304); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BANG.add(BANG396);

					// AST REWRITE
					// elements: BANG
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 250:16: -> ^( VAR_REF BANG )
					{
						// com/caseystella/parser/bashast.g:250:19: ^( VAR_REF BANG )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_BANG.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 10 :
					// com/caseystella/parser/bashast.g:251:4: DOLLAR '_'
					{
					DOLLAR397=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_var_ref2317); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR397);

					char_literal398=(Token)match(input,138,FOLLOW_138_in_var_ref2319); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_138.add(char_literal398);

					// AST REWRITE
					// elements: 138
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 251:15: -> ^( VAR_REF '_' )
					{
						// com/caseystella/parser/bashast.g:251:18: ^( VAR_REF '_' )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_138.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "var_ref"


	public static class var_exp_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "var_exp"
	// com/caseystella/parser/bashast.g:253:1: var_exp : ( var_name WORDOP ^ word | var_name COLON os= num ( COLON len= num )? -> ^( OFFSET var_name $os ( ^( $len) )? ) | BANG ^ var_name ( TIMES | AT ) | BANG var_name LSQUARE (op= TIMES |op= AT ) RSQUARE -> ^( LIST_EXPAND var_name $op) | POUND ^ var_name | var_name ( POUND ^| POUNDPOUND ^) fname | var_name ( PCT ^| PCTPCT ^) fname | var_name SLASH POUND ns_str SLASH fname -> ^( REPLACE_FIRST var_name ns_str fname ) | var_name SLASH PCT ns_str SLASH fname -> ^( REPLACE_LAST var_name ns_str fname ) | var_name SLASH SLASH ns_str SLASH fname -> ^( REPLACE_ALL var_name ns_str fname ) | var_name SLASH SLASH ns_str ( SLASH )? -> ^( REPLACE_ALL var_name ns_str ) | var_name SLASH ns_str SLASH fname -> ^( REPLACE_FIRST var_name ns_str fname ) | var_name SLASH POUND ns_str ( SLASH )? -> ^( REPLACE_FIRST var_name ns_str ) | var_name SLASH PCT ns_str ( SLASH )? -> ^( REPLACE_LAST var_name ns_str ) | var_name SLASH ns_str ( SLASH )? -> ^( REPLACE_FIRST var_name ns_str ) | arr_var_ref | var_name );
	public final bashastParser.var_exp_return var_exp() throws RecognitionException {
		bashastParser.var_exp_return retval = new bashastParser.var_exp_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token op=null;
		Token WORDOP400=null;
		Token COLON403=null;
		Token COLON404=null;
		Token BANG405=null;
		Token set407=null;
		Token BANG408=null;
		Token LSQUARE410=null;
		Token RSQUARE411=null;
		Token POUND412=null;
		Token POUND415=null;
		Token POUNDPOUND416=null;
		Token PCT419=null;
		Token PCTPCT420=null;
		Token SLASH423=null;
		Token POUND424=null;
		Token SLASH426=null;
		Token SLASH429=null;
		Token PCT430=null;
		Token SLASH432=null;
		Token SLASH435=null;
		Token SLASH436=null;
		Token SLASH438=null;
		Token SLASH441=null;
		Token SLASH442=null;
		Token SLASH444=null;
		Token SLASH446=null;
		Token SLASH448=null;
		Token SLASH451=null;
		Token POUND452=null;
		Token SLASH454=null;
		Token SLASH456=null;
		Token PCT457=null;
		Token SLASH459=null;
		Token SLASH461=null;
		Token SLASH463=null;
		ParserRuleReturnScope os =null;
		ParserRuleReturnScope len =null;
		ParserRuleReturnScope var_name399 =null;
		ParserRuleReturnScope word401 =null;
		ParserRuleReturnScope var_name402 =null;
		ParserRuleReturnScope var_name406 =null;
		ParserRuleReturnScope var_name409 =null;
		ParserRuleReturnScope var_name413 =null;
		ParserRuleReturnScope var_name414 =null;
		ParserRuleReturnScope fname417 =null;
		ParserRuleReturnScope var_name418 =null;
		ParserRuleReturnScope fname421 =null;
		ParserRuleReturnScope var_name422 =null;
		ParserRuleReturnScope ns_str425 =null;
		ParserRuleReturnScope fname427 =null;
		ParserRuleReturnScope var_name428 =null;
		ParserRuleReturnScope ns_str431 =null;
		ParserRuleReturnScope fname433 =null;
		ParserRuleReturnScope var_name434 =null;
		ParserRuleReturnScope ns_str437 =null;
		ParserRuleReturnScope fname439 =null;
		ParserRuleReturnScope var_name440 =null;
		ParserRuleReturnScope ns_str443 =null;
		ParserRuleReturnScope var_name445 =null;
		ParserRuleReturnScope ns_str447 =null;
		ParserRuleReturnScope fname449 =null;
		ParserRuleReturnScope var_name450 =null;
		ParserRuleReturnScope ns_str453 =null;
		ParserRuleReturnScope var_name455 =null;
		ParserRuleReturnScope ns_str458 =null;
		ParserRuleReturnScope var_name460 =null;
		ParserRuleReturnScope ns_str462 =null;
		ParserRuleReturnScope arr_var_ref464 =null;
		ParserRuleReturnScope var_name465 =null;

		CommonTree op_tree=null;
		CommonTree WORDOP400_tree=null;
		CommonTree COLON403_tree=null;
		CommonTree COLON404_tree=null;
		CommonTree BANG405_tree=null;
		CommonTree set407_tree=null;
		CommonTree BANG408_tree=null;
		CommonTree LSQUARE410_tree=null;
		CommonTree RSQUARE411_tree=null;
		CommonTree POUND412_tree=null;
		CommonTree POUND415_tree=null;
		CommonTree POUNDPOUND416_tree=null;
		CommonTree PCT419_tree=null;
		CommonTree PCTPCT420_tree=null;
		CommonTree SLASH423_tree=null;
		CommonTree POUND424_tree=null;
		CommonTree SLASH426_tree=null;
		CommonTree SLASH429_tree=null;
		CommonTree PCT430_tree=null;
		CommonTree SLASH432_tree=null;
		CommonTree SLASH435_tree=null;
		CommonTree SLASH436_tree=null;
		CommonTree SLASH438_tree=null;
		CommonTree SLASH441_tree=null;
		CommonTree SLASH442_tree=null;
		CommonTree SLASH444_tree=null;
		CommonTree SLASH446_tree=null;
		CommonTree SLASH448_tree=null;
		CommonTree SLASH451_tree=null;
		CommonTree POUND452_tree=null;
		CommonTree SLASH454_tree=null;
		CommonTree SLASH456_tree=null;
		CommonTree PCT457_tree=null;
		CommonTree SLASH459_tree=null;
		CommonTree SLASH461_tree=null;
		CommonTree SLASH463_tree=null;
		RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_SLASH=new RewriteRuleTokenStream(adaptor,"token SLASH");
		RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
		RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
		RewriteRuleTokenStream stream_PCT=new RewriteRuleTokenStream(adaptor,"token PCT");
		RewriteRuleTokenStream stream_POUND=new RewriteRuleTokenStream(adaptor,"token POUND");
		RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
		RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
		RewriteRuleSubtreeStream stream_num=new RewriteRuleSubtreeStream(adaptor,"rule num");
		RewriteRuleSubtreeStream stream_var_name=new RewriteRuleSubtreeStream(adaptor,"rule var_name");
		RewriteRuleSubtreeStream stream_ns_str=new RewriteRuleSubtreeStream(adaptor,"rule ns_str");
		RewriteRuleSubtreeStream stream_fname=new RewriteRuleSubtreeStream(adaptor,"rule fname");

		try {
			// com/caseystella/parser/bashast.g:253:9: ( var_name WORDOP ^ word | var_name COLON os= num ( COLON len= num )? -> ^( OFFSET var_name $os ( ^( $len) )? ) | BANG ^ var_name ( TIMES | AT ) | BANG var_name LSQUARE (op= TIMES |op= AT ) RSQUARE -> ^( LIST_EXPAND var_name $op) | POUND ^ var_name | var_name ( POUND ^| POUNDPOUND ^) fname | var_name ( PCT ^| PCTPCT ^) fname | var_name SLASH POUND ns_str SLASH fname -> ^( REPLACE_FIRST var_name ns_str fname ) | var_name SLASH PCT ns_str SLASH fname -> ^( REPLACE_LAST var_name ns_str fname ) | var_name SLASH SLASH ns_str SLASH fname -> ^( REPLACE_ALL var_name ns_str fname ) | var_name SLASH SLASH ns_str ( SLASH )? -> ^( REPLACE_ALL var_name ns_str ) | var_name SLASH ns_str SLASH fname -> ^( REPLACE_FIRST var_name ns_str fname ) | var_name SLASH POUND ns_str ( SLASH )? -> ^( REPLACE_FIRST var_name ns_str ) | var_name SLASH PCT ns_str ( SLASH )? -> ^( REPLACE_LAST var_name ns_str ) | var_name SLASH ns_str ( SLASH )? -> ^( REPLACE_FIRST var_name ns_str ) | arr_var_ref | var_name )
			int alt181=17;
			switch ( input.LA(1) ) {
			case DIGIT:
			case NUMBER:
				{
				int LA181_1 = input.LA(2);
				if ( (synpred232_bashast()) ) {
					alt181=1;
				}
				else if ( (synpred234_bashast()) ) {
					alt181=2;
				}
				else if ( (synpred241_bashast()) ) {
					alt181=6;
				}
				else if ( (synpred243_bashast()) ) {
					alt181=7;
				}
				else if ( (synpred244_bashast()) ) {
					alt181=8;
				}
				else if ( (synpred245_bashast()) ) {
					alt181=9;
				}
				else if ( (synpred246_bashast()) ) {
					alt181=10;
				}
				else if ( (synpred248_bashast()) ) {
					alt181=11;
				}
				else if ( (synpred249_bashast()) ) {
					alt181=12;
				}
				else if ( (synpred251_bashast()) ) {
					alt181=13;
				}
				else if ( (synpred253_bashast()) ) {
					alt181=14;
				}
				else if ( (synpred255_bashast()) ) {
					alt181=15;
				}
				else if ( (true) ) {
					alt181=17;
				}

				}
				break;
			case LETTER:
			case NAME:
			case 138:
				{
				int LA181_2 = input.LA(2);
				if ( (synpred232_bashast()) ) {
					alt181=1;
				}
				else if ( (synpred234_bashast()) ) {
					alt181=2;
				}
				else if ( (synpred241_bashast()) ) {
					alt181=6;
				}
				else if ( (synpred243_bashast()) ) {
					alt181=7;
				}
				else if ( (synpred244_bashast()) ) {
					alt181=8;
				}
				else if ( (synpred245_bashast()) ) {
					alt181=9;
				}
				else if ( (synpred246_bashast()) ) {
					alt181=10;
				}
				else if ( (synpred248_bashast()) ) {
					alt181=11;
				}
				else if ( (synpred249_bashast()) ) {
					alt181=12;
				}
				else if ( (synpred251_bashast()) ) {
					alt181=13;
				}
				else if ( (synpred253_bashast()) ) {
					alt181=14;
				}
				else if ( (synpred255_bashast()) ) {
					alt181=15;
				}
				else if ( (synpred256_bashast()) ) {
					alt181=16;
				}
				else if ( (true) ) {
					alt181=17;
				}

				}
				break;
			case TIMES:
				{
				int LA181_3 = input.LA(2);
				if ( (synpred232_bashast()) ) {
					alt181=1;
				}
				else if ( (synpred234_bashast()) ) {
					alt181=2;
				}
				else if ( (synpred241_bashast()) ) {
					alt181=6;
				}
				else if ( (synpred243_bashast()) ) {
					alt181=7;
				}
				else if ( (synpred244_bashast()) ) {
					alt181=8;
				}
				else if ( (synpred245_bashast()) ) {
					alt181=9;
				}
				else if ( (synpred246_bashast()) ) {
					alt181=10;
				}
				else if ( (synpred248_bashast()) ) {
					alt181=11;
				}
				else if ( (synpred249_bashast()) ) {
					alt181=12;
				}
				else if ( (synpred251_bashast()) ) {
					alt181=13;
				}
				else if ( (synpred253_bashast()) ) {
					alt181=14;
				}
				else if ( (synpred255_bashast()) ) {
					alt181=15;
				}
				else if ( (true) ) {
					alt181=17;
				}

				}
				break;
			case AT:
				{
				int LA181_4 = input.LA(2);
				if ( (synpred232_bashast()) ) {
					alt181=1;
				}
				else if ( (synpred234_bashast()) ) {
					alt181=2;
				}
				else if ( (synpred241_bashast()) ) {
					alt181=6;
				}
				else if ( (synpred243_bashast()) ) {
					alt181=7;
				}
				else if ( (synpred244_bashast()) ) {
					alt181=8;
				}
				else if ( (synpred245_bashast()) ) {
					alt181=9;
				}
				else if ( (synpred246_bashast()) ) {
					alt181=10;
				}
				else if ( (synpred248_bashast()) ) {
					alt181=11;
				}
				else if ( (synpred249_bashast()) ) {
					alt181=12;
				}
				else if ( (synpred251_bashast()) ) {
					alt181=13;
				}
				else if ( (synpred253_bashast()) ) {
					alt181=14;
				}
				else if ( (synpred255_bashast()) ) {
					alt181=15;
				}
				else if ( (true) ) {
					alt181=17;
				}

				}
				break;
			case BANG:
				{
				int LA181_5 = input.LA(2);
				if ( (synpred236_bashast()) ) {
					alt181=3;
				}
				else if ( (synpred238_bashast()) ) {
					alt181=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 181, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case POUND:
				{
				alt181=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 181, 0, input);
				throw nvae;
			}
			switch (alt181) {
				case 1 :
					// com/caseystella/parser/bashast.g:253:11: var_name WORDOP ^ word
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_name_in_var_exp2335);
					var_name399=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_name399.getTree());

					WORDOP400=(Token)match(input,WORDOP,FOLLOW_WORDOP_in_var_exp2337); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WORDOP400_tree = (CommonTree)adaptor.create(WORDOP400);
					root_0 = (CommonTree)adaptor.becomeRoot(WORDOP400_tree, root_0);
					}

					pushFollow(FOLLOW_word_in_var_exp2340);
					word401=word();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, word401.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:254:4: var_name COLON os= num ( COLON len= num )?
					{
					pushFollow(FOLLOW_var_name_in_var_exp2345);
					var_name402=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_name.add(var_name402.getTree());
					COLON403=(Token)match(input,COLON,FOLLOW_COLON_in_var_exp2347); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(COLON403);

					pushFollow(FOLLOW_num_in_var_exp2351);
					os=num();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_num.add(os.getTree());
					// com/caseystella/parser/bashast.g:254:26: ( COLON len= num )?
					int alt173=2;
					int LA173_0 = input.LA(1);
					if ( (LA173_0==COLON) ) {
						alt173=1;
					}
					switch (alt173) {
						case 1 :
							// com/caseystella/parser/bashast.g:254:27: COLON len= num
							{
							COLON404=(Token)match(input,COLON,FOLLOW_COLON_in_var_exp2354); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COLON.add(COLON404);

							pushFollow(FOLLOW_num_in_var_exp2358);
							len=num();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_num.add(len.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: os, len, var_name
					// token labels: 
					// rule labels: os, retval, len
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_os=new RewriteRuleSubtreeStream(adaptor,"rule os",os!=null?os.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
					RewriteRuleSubtreeStream stream_len=new RewriteRuleSubtreeStream(adaptor,"rule len",len!=null?len.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 254:43: -> ^( OFFSET var_name $os ( ^( $len) )? )
					{
						// com/caseystella/parser/bashast.g:254:46: ^( OFFSET var_name $os ( ^( $len) )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OFFSET, "OFFSET"), root_1);
						adaptor.addChild(root_1, stream_var_name.nextTree());
						adaptor.addChild(root_1, stream_os.nextTree());
						// com/caseystella/parser/bashast.g:254:68: ( ^( $len) )?
						if ( stream_len.hasNext() ) {
							// com/caseystella/parser/bashast.g:254:68: ^( $len)
							{
							CommonTree root_2 = (CommonTree)adaptor.nil();
							root_2 = (CommonTree)adaptor.becomeRoot(stream_len.nextNode(), root_2);
							adaptor.addChild(root_1, root_2);
							}

						}
						stream_len.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:255:4: BANG ^ var_name ( TIMES | AT )
					{
					root_0 = (CommonTree)adaptor.nil();


					BANG405=(Token)match(input,BANG,FOLLOW_BANG_in_var_exp2382); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BANG405_tree = (CommonTree)adaptor.create(BANG405);
					root_0 = (CommonTree)adaptor.becomeRoot(BANG405_tree, root_0);
					}

					pushFollow(FOLLOW_var_name_in_var_exp2385);
					var_name406=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_name406.getTree());

					set407=input.LT(1);
					if ( input.LA(1)==AT||input.LA(1)==TIMES ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set407));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:256:4: BANG var_name LSQUARE (op= TIMES |op= AT ) RSQUARE
					{
					BANG408=(Token)match(input,BANG,FOLLOW_BANG_in_var_exp2396); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BANG.add(BANG408);

					pushFollow(FOLLOW_var_name_in_var_exp2398);
					var_name409=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_name.add(var_name409.getTree());
					LSQUARE410=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_var_exp2400); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE410);

					// com/caseystella/parser/bashast.g:256:26: (op= TIMES |op= AT )
					int alt174=2;
					int LA174_0 = input.LA(1);
					if ( (LA174_0==TIMES) ) {
						alt174=1;
					}
					else if ( (LA174_0==AT) ) {
						alt174=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 174, 0, input);
						throw nvae;
					}

					switch (alt174) {
						case 1 :
							// com/caseystella/parser/bashast.g:256:27: op= TIMES
							{
							op=(Token)match(input,TIMES,FOLLOW_TIMES_in_var_exp2405); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_TIMES.add(op);

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:256:36: op= AT
							{
							op=(Token)match(input,AT,FOLLOW_AT_in_var_exp2409); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_AT.add(op);

							}
							break;

					}

					RSQUARE411=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_var_exp2412); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE411);

					// AST REWRITE
					// elements: var_name, op
					// token labels: op
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_op=new RewriteRuleTokenStream(adaptor,"token op",op);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 256:51: -> ^( LIST_EXPAND var_name $op)
					{
						// com/caseystella/parser/bashast.g:256:54: ^( LIST_EXPAND var_name $op)
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIST_EXPAND, "LIST_EXPAND"), root_1);
						adaptor.addChild(root_1, stream_var_name.nextTree());
						adaptor.addChild(root_1, stream_op.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:257:4: POUND ^ var_name
					{
					root_0 = (CommonTree)adaptor.nil();


					POUND412=(Token)match(input,POUND,FOLLOW_POUND_in_var_exp2428); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					POUND412_tree = (CommonTree)adaptor.create(POUND412);
					root_0 = (CommonTree)adaptor.becomeRoot(POUND412_tree, root_0);
					}

					pushFollow(FOLLOW_var_name_in_var_exp2431);
					var_name413=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_name413.getTree());

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:258:4: var_name ( POUND ^| POUNDPOUND ^) fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_name_in_var_exp2436);
					var_name414=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_name414.getTree());

					// com/caseystella/parser/bashast.g:258:13: ( POUND ^| POUNDPOUND ^)
					int alt175=2;
					int LA175_0 = input.LA(1);
					if ( (LA175_0==POUND) ) {
						alt175=1;
					}
					else if ( (LA175_0==POUNDPOUND) ) {
						alt175=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 175, 0, input);
						throw nvae;
					}

					switch (alt175) {
						case 1 :
							// com/caseystella/parser/bashast.g:258:14: POUND ^
							{
							POUND415=(Token)match(input,POUND,FOLLOW_POUND_in_var_exp2439); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							POUND415_tree = (CommonTree)adaptor.create(POUND415);
							root_0 = (CommonTree)adaptor.becomeRoot(POUND415_tree, root_0);
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:258:21: POUNDPOUND ^
							{
							POUNDPOUND416=(Token)match(input,POUNDPOUND,FOLLOW_POUNDPOUND_in_var_exp2442); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							POUNDPOUND416_tree = (CommonTree)adaptor.create(POUNDPOUND416);
							root_0 = (CommonTree)adaptor.becomeRoot(POUNDPOUND416_tree, root_0);
							}

							}
							break;

					}

					pushFollow(FOLLOW_fname_in_var_exp2446);
					fname417=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname417.getTree());

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:259:4: var_name ( PCT ^| PCTPCT ^) fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_name_in_var_exp2451);
					var_name418=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_name418.getTree());

					// com/caseystella/parser/bashast.g:259:13: ( PCT ^| PCTPCT ^)
					int alt176=2;
					int LA176_0 = input.LA(1);
					if ( (LA176_0==PCT) ) {
						alt176=1;
					}
					else if ( (LA176_0==PCTPCT) ) {
						alt176=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 176, 0, input);
						throw nvae;
					}

					switch (alt176) {
						case 1 :
							// com/caseystella/parser/bashast.g:259:14: PCT ^
							{
							PCT419=(Token)match(input,PCT,FOLLOW_PCT_in_var_exp2454); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							PCT419_tree = (CommonTree)adaptor.create(PCT419);
							root_0 = (CommonTree)adaptor.becomeRoot(PCT419_tree, root_0);
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:259:19: PCTPCT ^
							{
							PCTPCT420=(Token)match(input,PCTPCT,FOLLOW_PCTPCT_in_var_exp2457); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							PCTPCT420_tree = (CommonTree)adaptor.create(PCTPCT420);
							root_0 = (CommonTree)adaptor.becomeRoot(PCTPCT420_tree, root_0);
							}

							}
							break;

					}

					pushFollow(FOLLOW_fname_in_var_exp2461);
					fname421=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname421.getTree());

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:260:4: var_name SLASH POUND ns_str SLASH fname
					{
					pushFollow(FOLLOW_var_name_in_var_exp2466);
					var_name422=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_name.add(var_name422.getTree());
					SLASH423=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2468); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH423);

					POUND424=(Token)match(input,POUND,FOLLOW_POUND_in_var_exp2470); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_POUND.add(POUND424);

					pushFollow(FOLLOW_ns_str_in_var_exp2472);
					ns_str425=ns_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ns_str.add(ns_str425.getTree());
					SLASH426=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2474); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH426);

					pushFollow(FOLLOW_fname_in_var_exp2476);
					fname427=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname427.getTree());
					// AST REWRITE
					// elements: ns_str, fname, var_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 260:44: -> ^( REPLACE_FIRST var_name ns_str fname )
					{
						// com/caseystella/parser/bashast.g:260:47: ^( REPLACE_FIRST var_name ns_str fname )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPLACE_FIRST, "REPLACE_FIRST"), root_1);
						adaptor.addChild(root_1, stream_var_name.nextTree());
						adaptor.addChild(root_1, stream_ns_str.nextTree());
						adaptor.addChild(root_1, stream_fname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 9 :
					// com/caseystella/parser/bashast.g:261:5: var_name SLASH PCT ns_str SLASH fname
					{
					pushFollow(FOLLOW_var_name_in_var_exp2494);
					var_name428=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_name.add(var_name428.getTree());
					SLASH429=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2496); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH429);

					PCT430=(Token)match(input,PCT,FOLLOW_PCT_in_var_exp2498); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PCT.add(PCT430);

					pushFollow(FOLLOW_ns_str_in_var_exp2500);
					ns_str431=ns_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ns_str.add(ns_str431.getTree());
					SLASH432=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2502); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH432);

					pushFollow(FOLLOW_fname_in_var_exp2504);
					fname433=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname433.getTree());
					// AST REWRITE
					// elements: ns_str, fname, var_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 261:43: -> ^( REPLACE_LAST var_name ns_str fname )
					{
						// com/caseystella/parser/bashast.g:261:46: ^( REPLACE_LAST var_name ns_str fname )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPLACE_LAST, "REPLACE_LAST"), root_1);
						adaptor.addChild(root_1, stream_var_name.nextTree());
						adaptor.addChild(root_1, stream_ns_str.nextTree());
						adaptor.addChild(root_1, stream_fname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 10 :
					// com/caseystella/parser/bashast.g:262:4: var_name SLASH SLASH ns_str SLASH fname
					{
					pushFollow(FOLLOW_var_name_in_var_exp2521);
					var_name434=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_name.add(var_name434.getTree());
					SLASH435=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2523); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH435);

					SLASH436=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2525); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH436);

					pushFollow(FOLLOW_ns_str_in_var_exp2527);
					ns_str437=ns_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ns_str.add(ns_str437.getTree());
					SLASH438=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2529); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH438);

					pushFollow(FOLLOW_fname_in_var_exp2531);
					fname439=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname439.getTree());
					// AST REWRITE
					// elements: ns_str, var_name, fname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 262:44: -> ^( REPLACE_ALL var_name ns_str fname )
					{
						// com/caseystella/parser/bashast.g:262:47: ^( REPLACE_ALL var_name ns_str fname )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPLACE_ALL, "REPLACE_ALL"), root_1);
						adaptor.addChild(root_1, stream_var_name.nextTree());
						adaptor.addChild(root_1, stream_ns_str.nextTree());
						adaptor.addChild(root_1, stream_fname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 11 :
					// com/caseystella/parser/bashast.g:263:4: var_name SLASH SLASH ns_str ( SLASH )?
					{
					pushFollow(FOLLOW_var_name_in_var_exp2548);
					var_name440=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_name.add(var_name440.getTree());
					SLASH441=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2550); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH441);

					SLASH442=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2552); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH442);

					pushFollow(FOLLOW_ns_str_in_var_exp2554);
					ns_str443=ns_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ns_str.add(ns_str443.getTree());
					// com/caseystella/parser/bashast.g:263:32: ( SLASH )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==SLASH) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// com/caseystella/parser/bashast.g:263:32: SLASH
							{
							SLASH444=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2556); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_SLASH.add(SLASH444);

							}
							break;

					}

					// AST REWRITE
					// elements: var_name, ns_str
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 263:39: -> ^( REPLACE_ALL var_name ns_str )
					{
						// com/caseystella/parser/bashast.g:263:42: ^( REPLACE_ALL var_name ns_str )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPLACE_ALL, "REPLACE_ALL"), root_1);
						adaptor.addChild(root_1, stream_var_name.nextTree());
						adaptor.addChild(root_1, stream_ns_str.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 12 :
					// com/caseystella/parser/bashast.g:264:4: var_name SLASH ns_str SLASH fname
					{
					pushFollow(FOLLOW_var_name_in_var_exp2572);
					var_name445=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_name.add(var_name445.getTree());
					SLASH446=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2574); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH446);

					pushFollow(FOLLOW_ns_str_in_var_exp2576);
					ns_str447=ns_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ns_str.add(ns_str447.getTree());
					SLASH448=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2578); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH448);

					pushFollow(FOLLOW_fname_in_var_exp2580);
					fname449=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname449.getTree());
					// AST REWRITE
					// elements: ns_str, fname, var_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 264:38: -> ^( REPLACE_FIRST var_name ns_str fname )
					{
						// com/caseystella/parser/bashast.g:264:41: ^( REPLACE_FIRST var_name ns_str fname )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPLACE_FIRST, "REPLACE_FIRST"), root_1);
						adaptor.addChild(root_1, stream_var_name.nextTree());
						adaptor.addChild(root_1, stream_ns_str.nextTree());
						adaptor.addChild(root_1, stream_fname.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 13 :
					// com/caseystella/parser/bashast.g:265:4: var_name SLASH POUND ns_str ( SLASH )?
					{
					pushFollow(FOLLOW_var_name_in_var_exp2597);
					var_name450=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_name.add(var_name450.getTree());
					SLASH451=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2599); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH451);

					POUND452=(Token)match(input,POUND,FOLLOW_POUND_in_var_exp2601); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_POUND.add(POUND452);

					pushFollow(FOLLOW_ns_str_in_var_exp2603);
					ns_str453=ns_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ns_str.add(ns_str453.getTree());
					// com/caseystella/parser/bashast.g:265:32: ( SLASH )?
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==SLASH) ) {
						alt178=1;
					}
					switch (alt178) {
						case 1 :
							// com/caseystella/parser/bashast.g:265:32: SLASH
							{
							SLASH454=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2605); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_SLASH.add(SLASH454);

							}
							break;

					}

					// AST REWRITE
					// elements: ns_str, var_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 265:39: -> ^( REPLACE_FIRST var_name ns_str )
					{
						// com/caseystella/parser/bashast.g:265:42: ^( REPLACE_FIRST var_name ns_str )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPLACE_FIRST, "REPLACE_FIRST"), root_1);
						adaptor.addChild(root_1, stream_var_name.nextTree());
						adaptor.addChild(root_1, stream_ns_str.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 14 :
					// com/caseystella/parser/bashast.g:266:4: var_name SLASH PCT ns_str ( SLASH )?
					{
					pushFollow(FOLLOW_var_name_in_var_exp2621);
					var_name455=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_name.add(var_name455.getTree());
					SLASH456=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2623); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH456);

					PCT457=(Token)match(input,PCT,FOLLOW_PCT_in_var_exp2625); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PCT.add(PCT457);

					pushFollow(FOLLOW_ns_str_in_var_exp2627);
					ns_str458=ns_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ns_str.add(ns_str458.getTree());
					// com/caseystella/parser/bashast.g:266:30: ( SLASH )?
					int alt179=2;
					int LA179_0 = input.LA(1);
					if ( (LA179_0==SLASH) ) {
						alt179=1;
					}
					switch (alt179) {
						case 1 :
							// com/caseystella/parser/bashast.g:266:30: SLASH
							{
							SLASH459=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2629); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_SLASH.add(SLASH459);

							}
							break;

					}

					// AST REWRITE
					// elements: var_name, ns_str
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 266:37: -> ^( REPLACE_LAST var_name ns_str )
					{
						// com/caseystella/parser/bashast.g:266:40: ^( REPLACE_LAST var_name ns_str )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPLACE_LAST, "REPLACE_LAST"), root_1);
						adaptor.addChild(root_1, stream_var_name.nextTree());
						adaptor.addChild(root_1, stream_ns_str.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 15 :
					// com/caseystella/parser/bashast.g:267:4: var_name SLASH ns_str ( SLASH )?
					{
					pushFollow(FOLLOW_var_name_in_var_exp2645);
					var_name460=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_var_name.add(var_name460.getTree());
					SLASH461=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2647); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SLASH.add(SLASH461);

					pushFollow(FOLLOW_ns_str_in_var_exp2649);
					ns_str462=ns_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ns_str.add(ns_str462.getTree());
					// com/caseystella/parser/bashast.g:267:26: ( SLASH )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==SLASH) ) {
						alt180=1;
					}
					switch (alt180) {
						case 1 :
							// com/caseystella/parser/bashast.g:267:26: SLASH
							{
							SLASH463=(Token)match(input,SLASH,FOLLOW_SLASH_in_var_exp2651); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_SLASH.add(SLASH463);

							}
							break;

					}

					// AST REWRITE
					// elements: var_name, ns_str
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 267:33: -> ^( REPLACE_FIRST var_name ns_str )
					{
						// com/caseystella/parser/bashast.g:267:36: ^( REPLACE_FIRST var_name ns_str )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(REPLACE_FIRST, "REPLACE_FIRST"), root_1);
						adaptor.addChild(root_1, stream_var_name.nextTree());
						adaptor.addChild(root_1, stream_ns_str.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 16 :
					// com/caseystella/parser/bashast.g:268:4: arr_var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arr_var_ref_in_var_exp2667);
					arr_var_ref464=arr_var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arr_var_ref464.getTree());

					}
					break;
				case 17 :
					// com/caseystella/parser/bashast.g:269:4: var_name
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_name_in_var_exp2672);
					var_name465=var_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_name465.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "var_exp"


	public static class var_name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "var_name"
	// com/caseystella/parser/bashast.g:271:1: var_name : ( num | name | TIMES | AT );
	public final bashastParser.var_name_return var_name() throws RecognitionException {
		bashastParser.var_name_return retval = new bashastParser.var_name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token TIMES468=null;
		Token AT469=null;
		ParserRuleReturnScope num466 =null;
		ParserRuleReturnScope name467 =null;

		CommonTree TIMES468_tree=null;
		CommonTree AT469_tree=null;

		try {
			// com/caseystella/parser/bashast.g:271:9: ( num | name | TIMES | AT )
			int alt182=4;
			switch ( input.LA(1) ) {
			case DIGIT:
			case NUMBER:
				{
				alt182=1;
				}
				break;
			case LETTER:
			case NAME:
			case 138:
				{
				alt182=2;
				}
				break;
			case TIMES:
				{
				alt182=3;
				}
				break;
			case AT:
				{
				alt182=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 182, 0, input);
				throw nvae;
			}
			switch (alt182) {
				case 1 :
					// com/caseystella/parser/bashast.g:271:11: num
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_num_in_var_name2679);
					num466=num();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, num466.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:271:15: name
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_name_in_var_name2681);
					name467=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, name467.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:271:20: TIMES
					{
					root_0 = (CommonTree)adaptor.nil();


					TIMES468=(Token)match(input,TIMES,FOLLOW_TIMES_in_var_name2683); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIMES468_tree = (CommonTree)adaptor.create(TIMES468);
					adaptor.addChild(root_0, TIMES468_tree);
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:271:26: AT
					{
					root_0 = (CommonTree)adaptor.nil();


					AT469=(Token)match(input,AT,FOLLOW_AT_in_var_name2685); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AT469_tree = (CommonTree)adaptor.create(AT469);
					adaptor.addChild(root_0, AT469_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "var_name"


	public static class arr_var_ref_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arr_var_ref"
	// com/caseystella/parser/bashast.g:273:1: arr_var_ref : name ^ LSQUARE ! ( DIGIT )+ RSQUARE !;
	public final bashastParser.arr_var_ref_return arr_var_ref() throws RecognitionException {
		bashastParser.arr_var_ref_return retval = new bashastParser.arr_var_ref_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LSQUARE471=null;
		Token DIGIT472=null;
		Token RSQUARE473=null;
		ParserRuleReturnScope name470 =null;

		CommonTree LSQUARE471_tree=null;
		CommonTree DIGIT472_tree=null;
		CommonTree RSQUARE473_tree=null;

		try {
			// com/caseystella/parser/bashast.g:274:2: ( name ^ LSQUARE ! ( DIGIT )+ RSQUARE !)
			// com/caseystella/parser/bashast.g:274:4: name ^ LSQUARE ! ( DIGIT )+ RSQUARE !
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_name_in_arr_var_ref2694);
			name470=name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(name470.getTree(), root_0);
			LSQUARE471=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_arr_var_ref2697); if (state.failed) return retval;
			// com/caseystella/parser/bashast.g:274:19: ( DIGIT )+
			int cnt183=0;
			loop183:
			while (true) {
				int alt183=2;
				int LA183_0 = input.LA(1);
				if ( (LA183_0==DIGIT) ) {
					alt183=1;
				}

				switch (alt183) {
				case 1 :
					// com/caseystella/parser/bashast.g:274:19: DIGIT
					{
					DIGIT472=(Token)match(input,DIGIT,FOLLOW_DIGIT_in_arr_var_ref2700); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIGIT472_tree = (CommonTree)adaptor.create(DIGIT472);
					adaptor.addChild(root_0, DIGIT472_tree);
					}

					}
					break;

				default :
					if ( cnt183 >= 1 ) break loop183;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(183, input);
					throw eee;
				}
				cnt183++;
			}

			RSQUARE473=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_arr_var_ref2703); if (state.failed) return retval;
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "arr_var_ref"


	public static class cond_expr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "cond_expr"
	// com/caseystella/parser/bashast.g:276:1: cond_expr : ( LSQUARE LSQUARE wspace keyword_cond wspace RSQUARE RSQUARE -> ^( KEYWORD_TEST keyword_cond ) | LSQUARE wspace builtin_cond wspace RSQUARE -> ^( BUILTIN_TEST builtin_cond ) | TEST wspace builtin_cond -> ^( BUILTIN_TEST builtin_cond ) );
	public final bashastParser.cond_expr_return cond_expr() throws RecognitionException {
		bashastParser.cond_expr_return retval = new bashastParser.cond_expr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LSQUARE474=null;
		Token LSQUARE475=null;
		Token RSQUARE479=null;
		Token RSQUARE480=null;
		Token LSQUARE481=null;
		Token RSQUARE485=null;
		Token TEST486=null;
		ParserRuleReturnScope wspace476 =null;
		ParserRuleReturnScope keyword_cond477 =null;
		ParserRuleReturnScope wspace478 =null;
		ParserRuleReturnScope wspace482 =null;
		ParserRuleReturnScope builtin_cond483 =null;
		ParserRuleReturnScope wspace484 =null;
		ParserRuleReturnScope wspace487 =null;
		ParserRuleReturnScope builtin_cond488 =null;

		CommonTree LSQUARE474_tree=null;
		CommonTree LSQUARE475_tree=null;
		CommonTree RSQUARE479_tree=null;
		CommonTree RSQUARE480_tree=null;
		CommonTree LSQUARE481_tree=null;
		CommonTree RSQUARE485_tree=null;
		CommonTree TEST486_tree=null;
		RewriteRuleTokenStream stream_TEST=new RewriteRuleTokenStream(adaptor,"token TEST");
		RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
		RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
		RewriteRuleSubtreeStream stream_builtin_cond=new RewriteRuleSubtreeStream(adaptor,"rule builtin_cond");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
		RewriteRuleSubtreeStream stream_keyword_cond=new RewriteRuleSubtreeStream(adaptor,"rule keyword_cond");

		try {
			// com/caseystella/parser/bashast.g:277:2: ( LSQUARE LSQUARE wspace keyword_cond wspace RSQUARE RSQUARE -> ^( KEYWORD_TEST keyword_cond ) | LSQUARE wspace builtin_cond wspace RSQUARE -> ^( BUILTIN_TEST builtin_cond ) | TEST wspace builtin_cond -> ^( BUILTIN_TEST builtin_cond ) )
			int alt184=3;
			int LA184_0 = input.LA(1);
			if ( (LA184_0==LSQUARE) ) {
				int LA184_1 = input.LA(2);
				if ( (LA184_1==LSQUARE) ) {
					alt184=1;
				}
				else if ( (LA184_1==BLANK||LA184_1==EOL) ) {
					alt184=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 184, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA184_0==TEST) ) {
				alt184=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 184, 0, input);
				throw nvae;
			}

			switch (alt184) {
				case 1 :
					// com/caseystella/parser/bashast.g:277:4: LSQUARE LSQUARE wspace keyword_cond wspace RSQUARE RSQUARE
					{
					LSQUARE474=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_cond_expr2713); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE474);

					LSQUARE475=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_cond_expr2715); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE475);

					pushFollow(FOLLOW_wspace_in_cond_expr2717);
					wspace476=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace476.getTree());
					pushFollow(FOLLOW_keyword_cond_in_cond_expr2719);
					keyword_cond477=keyword_cond();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyword_cond.add(keyword_cond477.getTree());
					pushFollow(FOLLOW_wspace_in_cond_expr2721);
					wspace478=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace478.getTree());
					RSQUARE479=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_cond_expr2723); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE479);

					RSQUARE480=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_cond_expr2725); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE480);

					// AST REWRITE
					// elements: keyword_cond
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 277:63: -> ^( KEYWORD_TEST keyword_cond )
					{
						// com/caseystella/parser/bashast.g:277:66: ^( KEYWORD_TEST keyword_cond )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(KEYWORD_TEST, "KEYWORD_TEST"), root_1);
						adaptor.addChild(root_1, stream_keyword_cond.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:278:4: LSQUARE wspace builtin_cond wspace RSQUARE
					{
					LSQUARE481=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_cond_expr2738); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE481);

					pushFollow(FOLLOW_wspace_in_cond_expr2740);
					wspace482=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace482.getTree());
					pushFollow(FOLLOW_builtin_cond_in_cond_expr2742);
					builtin_cond483=builtin_cond();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_builtin_cond.add(builtin_cond483.getTree());
					pushFollow(FOLLOW_wspace_in_cond_expr2744);
					wspace484=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace484.getTree());
					RSQUARE485=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_cond_expr2746); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE485);

					// AST REWRITE
					// elements: builtin_cond
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 278:47: -> ^( BUILTIN_TEST builtin_cond )
					{
						// com/caseystella/parser/bashast.g:278:50: ^( BUILTIN_TEST builtin_cond )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILTIN_TEST, "BUILTIN_TEST"), root_1);
						adaptor.addChild(root_1, stream_builtin_cond.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:279:4: TEST wspace builtin_cond
					{
					TEST486=(Token)match(input,TEST,FOLLOW_TEST_in_cond_expr2759); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TEST.add(TEST486);

					pushFollow(FOLLOW_wspace_in_cond_expr2761);
					wspace487=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace487.getTree());
					pushFollow(FOLLOW_builtin_cond_in_cond_expr2763);
					builtin_cond488=builtin_cond();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_builtin_cond.add(builtin_cond488.getTree());
					// AST REWRITE
					// elements: builtin_cond
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 279:28: -> ^( BUILTIN_TEST builtin_cond )
					{
						// com/caseystella/parser/bashast.g:279:31: ^( BUILTIN_TEST builtin_cond )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BUILTIN_TEST, "BUILTIN_TEST"), root_1);
						adaptor.addChild(root_1, stream_builtin_cond.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cond_expr"


	public static class cond_primary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "cond_primary"
	// com/caseystella/parser/bashast.g:280:1: cond_primary : ( LPAREN ! ( BLANK !)* keyword_cond ( BLANK !)* RPAREN !| keyword_cond_binary | keyword_cond_unary | fname );
	public final bashastParser.cond_primary_return cond_primary() throws RecognitionException {
		bashastParser.cond_primary_return retval = new bashastParser.cond_primary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN489=null;
		Token BLANK490=null;
		Token BLANK492=null;
		Token RPAREN493=null;
		ParserRuleReturnScope keyword_cond491 =null;
		ParserRuleReturnScope keyword_cond_binary494 =null;
		ParserRuleReturnScope keyword_cond_unary495 =null;
		ParserRuleReturnScope fname496 =null;

		CommonTree LPAREN489_tree=null;
		CommonTree BLANK490_tree=null;
		CommonTree BLANK492_tree=null;
		CommonTree RPAREN493_tree=null;

		try {
			// com/caseystella/parser/bashast.g:281:2: ( LPAREN ! ( BLANK !)* keyword_cond ( BLANK !)* RPAREN !| keyword_cond_binary | keyword_cond_unary | fname )
			int alt187=4;
			switch ( input.LA(1) ) {
			case LPAREN:
				{
				int LA187_1 = input.LA(2);
				if ( (synpred265_bashast()) ) {
					alt187=1;
				}
				else if ( (synpred266_bashast()) ) {
					alt187=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 187, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LSQUARE:
				{
				int LA187_2 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case QMARK:
				{
				int LA187_3 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case TIMES:
				{
				int LA187_4 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case PLUS:
				{
				int LA187_5 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case AT:
				{
				int LA187_6 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case BANG:
				{
				int LA187_7 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case DOLLAR:
				{
				int LA187_8 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case TICK:
				{
				int LA187_9 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case QUOTE:
				{
				int LA187_10 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case SQUOTE:
				{
				int LA187_11 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case DIGIT:
			case NUMBER:
				{
				int LA187_12 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case 138:
				{
				int LA187_13 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case NQSTR:
				{
				int LA187_14 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case EQUALS:
				{
				int LA187_15 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case PCT:
				{
				int LA187_16 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case PCTPCT:
				{
				int LA187_17 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case MINUS:
				{
				int LA187_18 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case DOT:
				{
				int LA187_19 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case DOTDOT:
				{
				int LA187_20 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case COLON:
				{
				int LA187_21 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case BOP:
				{
				int LA187_22 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case UOP:
				{
				int LA187_23 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (synpred267_bashast()) ) {
					alt187=3;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case TEST:
				{
				int LA187_24 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case LETTER:
			case NAME:
				{
				int LA187_25 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case TILDE:
				{
				int LA187_26 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case INC:
				{
				int LA187_27 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case DEC:
				{
				int LA187_28 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case ARITH_ASSIGN:
				{
				int LA187_29 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case ESC_CHAR:
				{
				int LA187_30 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case CARET:
				{
				int LA187_31 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case CASE:
			case DO:
			case DONE:
			case ELIF:
			case ELSE:
			case ESAC:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case SELECT:
			case THEN:
			case TIME:
			case UNTIL:
			case WHILE:
				{
				int LA187_32 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case SLASH:
				{
				int LA187_33 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case RSQUARE:
				{
				int LA187_34 = input.LA(2);
				if ( (synpred266_bashast()) ) {
					alt187=2;
				}
				else if ( (true) ) {
					alt187=4;
				}

				}
				break;
			case LBRACE:
				{
				alt187=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 187, 0, input);
				throw nvae;
			}
			switch (alt187) {
				case 1 :
					// com/caseystella/parser/bashast.g:281:4: LPAREN ! ( BLANK !)* keyword_cond ( BLANK !)* RPAREN !
					{
					root_0 = (CommonTree)adaptor.nil();


					LPAREN489=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cond_primary2778); if (state.failed) return retval;
					// com/caseystella/parser/bashast.g:281:17: ( BLANK !)*
					loop185:
					while (true) {
						int alt185=2;
						int LA185_0 = input.LA(1);
						if ( (LA185_0==BLANK) ) {
							alt185=1;
						}

						switch (alt185) {
						case 1 :
							// com/caseystella/parser/bashast.g:281:17: BLANK !
							{
							BLANK490=(Token)match(input,BLANK,FOLLOW_BLANK_in_cond_primary2781); if (state.failed) return retval;
							}
							break;

						default :
							break loop185;
						}
					}

					pushFollow(FOLLOW_keyword_cond_in_cond_primary2785);
					keyword_cond491=keyword_cond();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_cond491.getTree());

					// com/caseystella/parser/bashast.g:281:38: ( BLANK !)*
					loop186:
					while (true) {
						int alt186=2;
						int LA186_0 = input.LA(1);
						if ( (LA186_0==BLANK) ) {
							alt186=1;
						}

						switch (alt186) {
						case 1 :
							// com/caseystella/parser/bashast.g:281:38: BLANK !
							{
							BLANK492=(Token)match(input,BLANK,FOLLOW_BLANK_in_cond_primary2787); if (state.failed) return retval;
							}
							break;

						default :
							break loop186;
						}
					}

					RPAREN493=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cond_primary2791); if (state.failed) return retval;
					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:282:4: keyword_cond_binary
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_keyword_cond_binary_in_cond_primary2797);
					keyword_cond_binary494=keyword_cond_binary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_cond_binary494.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:283:4: keyword_cond_unary
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_keyword_cond_unary_in_cond_primary2802);
					keyword_cond_unary495=keyword_cond_unary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_cond_unary495.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:284:4: fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fname_in_cond_primary2807);
					fname496=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname496.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cond_primary"


	public static class keyword_cond_binary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "keyword_cond_binary"
	// com/caseystella/parser/bashast.g:285:1: keyword_cond_binary : cond_part ( BLANK !)* binary_str_op_keyword ^ ( BLANK !)? cond_part ;
	public final bashastParser.keyword_cond_binary_return keyword_cond_binary() throws RecognitionException {
		bashastParser.keyword_cond_binary_return retval = new bashastParser.keyword_cond_binary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK498=null;
		Token BLANK500=null;
		ParserRuleReturnScope cond_part497 =null;
		ParserRuleReturnScope binary_str_op_keyword499 =null;
		ParserRuleReturnScope cond_part501 =null;

		CommonTree BLANK498_tree=null;
		CommonTree BLANK500_tree=null;

		try {
			// com/caseystella/parser/bashast.g:286:2: ( cond_part ( BLANK !)* binary_str_op_keyword ^ ( BLANK !)? cond_part )
			// com/caseystella/parser/bashast.g:286:4: cond_part ( BLANK !)* binary_str_op_keyword ^ ( BLANK !)? cond_part
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_cond_part_in_keyword_cond_binary2815);
			cond_part497=cond_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, cond_part497.getTree());

			// com/caseystella/parser/bashast.g:286:19: ( BLANK !)*
			loop188:
			while (true) {
				int alt188=2;
				int LA188_0 = input.LA(1);
				if ( (LA188_0==BLANK) ) {
					alt188=1;
				}

				switch (alt188) {
				case 1 :
					// com/caseystella/parser/bashast.g:286:19: BLANK !
					{
					BLANK498=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_cond_binary2817); if (state.failed) return retval;
					}
					break;

				default :
					break loop188;
				}
			}

			pushFollow(FOLLOW_binary_str_op_keyword_in_keyword_cond_binary2821);
			binary_str_op_keyword499=binary_str_op_keyword();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(binary_str_op_keyword499.getTree(), root_0);
			// com/caseystella/parser/bashast.g:286:50: ( BLANK !)?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==BLANK) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// com/caseystella/parser/bashast.g:286:50: BLANK !
					{
					BLANK500=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_cond_binary2824); if (state.failed) return retval;
					}
					break;

			}

			pushFollow(FOLLOW_cond_part_in_keyword_cond_binary2828);
			cond_part501=cond_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, cond_part501.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyword_cond_binary"


	public static class keyword_cond_unary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "keyword_cond_unary"
	// com/caseystella/parser/bashast.g:287:1: keyword_cond_unary : UOP ^ ( BLANK !)+ cond_part ;
	public final bashastParser.keyword_cond_unary_return keyword_cond_unary() throws RecognitionException {
		bashastParser.keyword_cond_unary_return retval = new bashastParser.keyword_cond_unary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token UOP502=null;
		Token BLANK503=null;
		ParserRuleReturnScope cond_part504 =null;

		CommonTree UOP502_tree=null;
		CommonTree BLANK503_tree=null;

		try {
			// com/caseystella/parser/bashast.g:288:2: ( UOP ^ ( BLANK !)+ cond_part )
			// com/caseystella/parser/bashast.g:288:4: UOP ^ ( BLANK !)+ cond_part
			{
			root_0 = (CommonTree)adaptor.nil();


			UOP502=(Token)match(input,UOP,FOLLOW_UOP_in_keyword_cond_unary2836); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UOP502_tree = (CommonTree)adaptor.create(UOP502);
			root_0 = (CommonTree)adaptor.becomeRoot(UOP502_tree, root_0);
			}

			// com/caseystella/parser/bashast.g:288:14: ( BLANK !)+
			int cnt190=0;
			loop190:
			while (true) {
				int alt190=2;
				int LA190_0 = input.LA(1);
				if ( (LA190_0==BLANK) ) {
					alt190=1;
				}

				switch (alt190) {
				case 1 :
					// com/caseystella/parser/bashast.g:288:14: BLANK !
					{
					BLANK503=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_cond_unary2839); if (state.failed) return retval;
					}
					break;

				default :
					if ( cnt190 >= 1 ) break loop190;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(190, input);
					throw eee;
				}
				cnt190++;
			}

			pushFollow(FOLLOW_cond_part_in_keyword_cond_unary2843);
			cond_part504=cond_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, cond_part504.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyword_cond_unary"


	public static class builtin_cond_primary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "builtin_cond_primary"
	// com/caseystella/parser/bashast.g:289:1: builtin_cond_primary : ( LPAREN ! ( BLANK !)* builtin_cond ( BLANK !)* RPAREN !| builtin_cond_binary | builtin_cond_unary | fname );
	public final bashastParser.builtin_cond_primary_return builtin_cond_primary() throws RecognitionException {
		bashastParser.builtin_cond_primary_return retval = new bashastParser.builtin_cond_primary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN505=null;
		Token BLANK506=null;
		Token BLANK508=null;
		Token RPAREN509=null;
		ParserRuleReturnScope builtin_cond507 =null;
		ParserRuleReturnScope builtin_cond_binary510 =null;
		ParserRuleReturnScope builtin_cond_unary511 =null;
		ParserRuleReturnScope fname512 =null;

		CommonTree LPAREN505_tree=null;
		CommonTree BLANK506_tree=null;
		CommonTree BLANK508_tree=null;
		CommonTree RPAREN509_tree=null;

		try {
			// com/caseystella/parser/bashast.g:290:2: ( LPAREN ! ( BLANK !)* builtin_cond ( BLANK !)* RPAREN !| builtin_cond_binary | builtin_cond_unary | fname )
			int alt193=4;
			switch ( input.LA(1) ) {
			case LPAREN:
				{
				int LA193_1 = input.LA(2);
				if ( (synpred273_bashast()) ) {
					alt193=1;
				}
				else if ( (synpred274_bashast()) ) {
					alt193=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 193, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LSQUARE:
				{
				int LA193_2 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case QMARK:
				{
				int LA193_3 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case TIMES:
				{
				int LA193_4 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case PLUS:
				{
				int LA193_5 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case AT:
				{
				int LA193_6 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case BANG:
				{
				int LA193_7 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case DOLLAR:
				{
				int LA193_8 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case TICK:
				{
				int LA193_9 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case QUOTE:
				{
				int LA193_10 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case SQUOTE:
				{
				int LA193_11 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case DIGIT:
			case NUMBER:
				{
				int LA193_12 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case 138:
				{
				int LA193_13 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case NQSTR:
				{
				int LA193_14 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case EQUALS:
				{
				int LA193_15 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case PCT:
				{
				int LA193_16 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case PCTPCT:
				{
				int LA193_17 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case MINUS:
				{
				int LA193_18 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case DOT:
				{
				int LA193_19 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case DOTDOT:
				{
				int LA193_20 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case COLON:
				{
				int LA193_21 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case BOP:
				{
				int LA193_22 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case UOP:
				{
				int LA193_23 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (synpred275_bashast()) ) {
					alt193=3;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case TEST:
				{
				int LA193_24 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case LETTER:
			case NAME:
				{
				int LA193_25 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case TILDE:
				{
				int LA193_26 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case INC:
				{
				int LA193_27 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case DEC:
				{
				int LA193_28 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case ARITH_ASSIGN:
				{
				int LA193_29 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case ESC_CHAR:
				{
				int LA193_30 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case CARET:
				{
				int LA193_31 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case CASE:
			case DO:
			case DONE:
			case ELIF:
			case ELSE:
			case ESAC:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case SELECT:
			case THEN:
			case TIME:
			case UNTIL:
			case WHILE:
				{
				int LA193_32 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case SLASH:
				{
				int LA193_33 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case RSQUARE:
				{
				int LA193_34 = input.LA(2);
				if ( (synpred274_bashast()) ) {
					alt193=2;
				}
				else if ( (true) ) {
					alt193=4;
				}

				}
				break;
			case LBRACE:
				{
				alt193=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 193, 0, input);
				throw nvae;
			}
			switch (alt193) {
				case 1 :
					// com/caseystella/parser/bashast.g:290:4: LPAREN ! ( BLANK !)* builtin_cond ( BLANK !)* RPAREN !
					{
					root_0 = (CommonTree)adaptor.nil();


					LPAREN505=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtin_cond_primary2851); if (state.failed) return retval;
					// com/caseystella/parser/bashast.g:290:17: ( BLANK !)*
					loop191:
					while (true) {
						int alt191=2;
						int LA191_0 = input.LA(1);
						if ( (LA191_0==BLANK) ) {
							alt191=1;
						}

						switch (alt191) {
						case 1 :
							// com/caseystella/parser/bashast.g:290:17: BLANK !
							{
							BLANK506=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_cond_primary2854); if (state.failed) return retval;
							}
							break;

						default :
							break loop191;
						}
					}

					pushFollow(FOLLOW_builtin_cond_in_builtin_cond_primary2858);
					builtin_cond507=builtin_cond();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_cond507.getTree());

					// com/caseystella/parser/bashast.g:290:38: ( BLANK !)*
					loop192:
					while (true) {
						int alt192=2;
						int LA192_0 = input.LA(1);
						if ( (LA192_0==BLANK) ) {
							alt192=1;
						}

						switch (alt192) {
						case 1 :
							// com/caseystella/parser/bashast.g:290:38: BLANK !
							{
							BLANK508=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_cond_primary2860); if (state.failed) return retval;
							}
							break;

						default :
							break loop192;
						}
					}

					RPAREN509=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtin_cond_primary2864); if (state.failed) return retval;
					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:291:4: builtin_cond_binary
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_builtin_cond_binary_in_builtin_cond_primary2870);
					builtin_cond_binary510=builtin_cond_binary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_cond_binary510.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:292:4: builtin_cond_unary
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_builtin_cond_unary_in_builtin_cond_primary2875);
					builtin_cond_unary511=builtin_cond_unary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_cond_unary511.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:293:4: fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fname_in_builtin_cond_primary2880);
					fname512=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname512.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "builtin_cond_primary"


	public static class builtin_cond_binary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "builtin_cond_binary"
	// com/caseystella/parser/bashast.g:294:1: builtin_cond_binary : cond_part ( BLANK !)* binary_string_op_builtin ^ ( BLANK !)? cond_part ;
	public final bashastParser.builtin_cond_binary_return builtin_cond_binary() throws RecognitionException {
		bashastParser.builtin_cond_binary_return retval = new bashastParser.builtin_cond_binary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK514=null;
		Token BLANK516=null;
		ParserRuleReturnScope cond_part513 =null;
		ParserRuleReturnScope binary_string_op_builtin515 =null;
		ParserRuleReturnScope cond_part517 =null;

		CommonTree BLANK514_tree=null;
		CommonTree BLANK516_tree=null;

		try {
			// com/caseystella/parser/bashast.g:295:2: ( cond_part ( BLANK !)* binary_string_op_builtin ^ ( BLANK !)? cond_part )
			// com/caseystella/parser/bashast.g:295:4: cond_part ( BLANK !)* binary_string_op_builtin ^ ( BLANK !)? cond_part
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_cond_part_in_builtin_cond_binary2888);
			cond_part513=cond_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, cond_part513.getTree());

			// com/caseystella/parser/bashast.g:295:19: ( BLANK !)*
			loop194:
			while (true) {
				int alt194=2;
				int LA194_0 = input.LA(1);
				if ( (LA194_0==BLANK) ) {
					alt194=1;
				}

				switch (alt194) {
				case 1 :
					// com/caseystella/parser/bashast.g:295:19: BLANK !
					{
					BLANK514=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_cond_binary2890); if (state.failed) return retval;
					}
					break;

				default :
					break loop194;
				}
			}

			pushFollow(FOLLOW_binary_string_op_builtin_in_builtin_cond_binary2894);
			binary_string_op_builtin515=binary_string_op_builtin();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(binary_string_op_builtin515.getTree(), root_0);
			// com/caseystella/parser/bashast.g:295:53: ( BLANK !)?
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==BLANK) ) {
				alt195=1;
			}
			switch (alt195) {
				case 1 :
					// com/caseystella/parser/bashast.g:295:53: BLANK !
					{
					BLANK516=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_cond_binary2897); if (state.failed) return retval;
					}
					break;

			}

			pushFollow(FOLLOW_cond_part_in_builtin_cond_binary2901);
			cond_part517=cond_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, cond_part517.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "builtin_cond_binary"


	public static class builtin_cond_unary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "builtin_cond_unary"
	// com/caseystella/parser/bashast.g:296:1: builtin_cond_unary : UOP ^ ( BLANK !)+ cond_part ;
	public final bashastParser.builtin_cond_unary_return builtin_cond_unary() throws RecognitionException {
		bashastParser.builtin_cond_unary_return retval = new bashastParser.builtin_cond_unary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token UOP518=null;
		Token BLANK519=null;
		ParserRuleReturnScope cond_part520 =null;

		CommonTree UOP518_tree=null;
		CommonTree BLANK519_tree=null;

		try {
			// com/caseystella/parser/bashast.g:297:2: ( UOP ^ ( BLANK !)+ cond_part )
			// com/caseystella/parser/bashast.g:297:4: UOP ^ ( BLANK !)+ cond_part
			{
			root_0 = (CommonTree)adaptor.nil();


			UOP518=(Token)match(input,UOP,FOLLOW_UOP_in_builtin_cond_unary2909); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UOP518_tree = (CommonTree)adaptor.create(UOP518);
			root_0 = (CommonTree)adaptor.becomeRoot(UOP518_tree, root_0);
			}

			// com/caseystella/parser/bashast.g:297:14: ( BLANK !)+
			int cnt196=0;
			loop196:
			while (true) {
				int alt196=2;
				int LA196_0 = input.LA(1);
				if ( (LA196_0==BLANK) ) {
					alt196=1;
				}

				switch (alt196) {
				case 1 :
					// com/caseystella/parser/bashast.g:297:14: BLANK !
					{
					BLANK519=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_cond_unary2912); if (state.failed) return retval;
					}
					break;

				default :
					if ( cnt196 >= 1 ) break loop196;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(196, input);
					throw eee;
				}
				cnt196++;
			}

			pushFollow(FOLLOW_cond_part_in_builtin_cond_unary2916);
			cond_part520=cond_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, cond_part520.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "builtin_cond_unary"


	public static class keyword_cond_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "keyword_cond"
	// com/caseystella/parser/bashast.g:298:1: keyword_cond : ( negate_primary | cond_primary ) ( ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* keyword_cond )? ;
	public final bashastParser.keyword_cond_return keyword_cond() throws RecognitionException {
		bashastParser.keyword_cond_return retval = new bashastParser.keyword_cond_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK523=null;
		Token LOGICOR524=null;
		Token LOGICAND525=null;
		Token BLANK526=null;
		ParserRuleReturnScope negate_primary521 =null;
		ParserRuleReturnScope cond_primary522 =null;
		ParserRuleReturnScope keyword_cond527 =null;

		CommonTree BLANK523_tree=null;
		CommonTree LOGICOR524_tree=null;
		CommonTree LOGICAND525_tree=null;
		CommonTree BLANK526_tree=null;

		try {
			// com/caseystella/parser/bashast.g:299:2: ( ( negate_primary | cond_primary ) ( ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* keyword_cond )? )
			// com/caseystella/parser/bashast.g:299:4: ( negate_primary | cond_primary ) ( ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* keyword_cond )?
			{
			root_0 = (CommonTree)adaptor.nil();


			// com/caseystella/parser/bashast.g:299:4: ( negate_primary | cond_primary )
			int alt197=2;
			int LA197_0 = input.LA(1);
			if ( (LA197_0==BANG) ) {
				int LA197_1 = input.LA(2);
				if ( (synpred279_bashast()) ) {
					alt197=1;
				}
				else if ( (true) ) {
					alt197=2;
				}

			}
			else if ( (LA197_0==ARITH_ASSIGN||LA197_0==AT||LA197_0==BOP||(LA197_0 >= CARET && LA197_0 <= CASE)||LA197_0==COLON||(LA197_0 >= DEC && LA197_0 <= DOTDOT)||(LA197_0 >= ELIF && LA197_0 <= ELSE)||LA197_0==EQUALS||(LA197_0 >= ESAC && LA197_0 <= ESC_CHAR)||LA197_0==FI||LA197_0==FOR||LA197_0==FUNCTION||(LA197_0 >= IF && LA197_0 <= INC)||LA197_0==LBRACE||LA197_0==LETTER||LA197_0==LPAREN||LA197_0==LSQUARE||(LA197_0 >= MINUS && LA197_0 <= NAME)||(LA197_0 >= NQSTR && LA197_0 <= NUMBER)||(LA197_0 >= PCT && LA197_0 <= PCTPCT)||LA197_0==PLUS||(LA197_0 >= QMARK && LA197_0 <= QUOTE)||(LA197_0 >= RSQUARE && LA197_0 <= SELECT)||(LA197_0 >= SLASH && LA197_0 <= SQUOTE)||(LA197_0 >= TEST && LA197_0 <= UOP)||LA197_0==WHILE||LA197_0==138) ) {
				alt197=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 197, 0, input);
				throw nvae;
			}

			switch (alt197) {
				case 1 :
					// com/caseystella/parser/bashast.g:299:5: negate_primary
					{
					pushFollow(FOLLOW_negate_primary_in_keyword_cond2925);
					negate_primary521=negate_primary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, negate_primary521.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:299:20: cond_primary
					{
					pushFollow(FOLLOW_cond_primary_in_keyword_cond2927);
					cond_primary522=cond_primary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cond_primary522.getTree());

					}
					break;

			}

			// com/caseystella/parser/bashast.g:299:34: ( ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* keyword_cond )?
			int alt201=2;
			alt201 = dfa201.predict(input);
			switch (alt201) {
				case 1 :
					// com/caseystella/parser/bashast.g:299:35: ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* keyword_cond
					{
					// com/caseystella/parser/bashast.g:299:40: ( BLANK !)*
					loop198:
					while (true) {
						int alt198=2;
						int LA198_0 = input.LA(1);
						if ( (LA198_0==BLANK) ) {
							alt198=1;
						}

						switch (alt198) {
						case 1 :
							// com/caseystella/parser/bashast.g:299:40: BLANK !
							{
							BLANK523=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_cond2931); if (state.failed) return retval;
							}
							break;

						default :
							break loop198;
						}
					}

					// com/caseystella/parser/bashast.g:299:43: ( LOGICOR ^| LOGICAND ^)
					int alt199=2;
					int LA199_0 = input.LA(1);
					if ( (LA199_0==LOGICOR) ) {
						alt199=1;
					}
					else if ( (LA199_0==LOGICAND) ) {
						alt199=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 199, 0, input);
						throw nvae;
					}

					switch (alt199) {
						case 1 :
							// com/caseystella/parser/bashast.g:299:44: LOGICOR ^
							{
							LOGICOR524=(Token)match(input,LOGICOR,FOLLOW_LOGICOR_in_keyword_cond2936); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LOGICOR524_tree = (CommonTree)adaptor.create(LOGICOR524);
							root_0 = (CommonTree)adaptor.becomeRoot(LOGICOR524_tree, root_0);
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:299:53: LOGICAND ^
							{
							LOGICAND525=(Token)match(input,LOGICAND,FOLLOW_LOGICAND_in_keyword_cond2939); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LOGICAND525_tree = (CommonTree)adaptor.create(LOGICAND525);
							root_0 = (CommonTree)adaptor.becomeRoot(LOGICAND525_tree, root_0);
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:299:69: ( BLANK !)*
					loop200:
					while (true) {
						int alt200=2;
						int LA200_0 = input.LA(1);
						if ( (LA200_0==BLANK) ) {
							alt200=1;
						}

						switch (alt200) {
						case 1 :
							// com/caseystella/parser/bashast.g:299:69: BLANK !
							{
							BLANK526=(Token)match(input,BLANK,FOLLOW_BLANK_in_keyword_cond2943); if (state.failed) return retval;
							}
							break;

						default :
							break loop200;
						}
					}

					pushFollow(FOLLOW_keyword_cond_in_keyword_cond2947);
					keyword_cond527=keyword_cond();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, keyword_cond527.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyword_cond"


	public static class builtin_cond_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "builtin_cond"
	// com/caseystella/parser/bashast.g:300:1: builtin_cond : ( negate_builtin_primary | builtin_cond_primary ) ( ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* builtin_cond )? ;
	public final bashastParser.builtin_cond_return builtin_cond() throws RecognitionException {
		bashastParser.builtin_cond_return retval = new bashastParser.builtin_cond_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK530=null;
		Token LOGICOR531=null;
		Token LOGICAND532=null;
		Token BLANK533=null;
		ParserRuleReturnScope negate_builtin_primary528 =null;
		ParserRuleReturnScope builtin_cond_primary529 =null;
		ParserRuleReturnScope builtin_cond534 =null;

		CommonTree BLANK530_tree=null;
		CommonTree LOGICOR531_tree=null;
		CommonTree LOGICAND532_tree=null;
		CommonTree BLANK533_tree=null;

		try {
			// com/caseystella/parser/bashast.g:301:2: ( ( negate_builtin_primary | builtin_cond_primary ) ( ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* builtin_cond )? )
			// com/caseystella/parser/bashast.g:301:4: ( negate_builtin_primary | builtin_cond_primary ) ( ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* builtin_cond )?
			{
			root_0 = (CommonTree)adaptor.nil();


			// com/caseystella/parser/bashast.g:301:4: ( negate_builtin_primary | builtin_cond_primary )
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==BANG) ) {
				int LA202_1 = input.LA(2);
				if ( (synpred284_bashast()) ) {
					alt202=1;
				}
				else if ( (true) ) {
					alt202=2;
				}

			}
			else if ( (LA202_0==ARITH_ASSIGN||LA202_0==AT||LA202_0==BOP||(LA202_0 >= CARET && LA202_0 <= CASE)||LA202_0==COLON||(LA202_0 >= DEC && LA202_0 <= DOTDOT)||(LA202_0 >= ELIF && LA202_0 <= ELSE)||LA202_0==EQUALS||(LA202_0 >= ESAC && LA202_0 <= ESC_CHAR)||LA202_0==FI||LA202_0==FOR||LA202_0==FUNCTION||(LA202_0 >= IF && LA202_0 <= INC)||LA202_0==LBRACE||LA202_0==LETTER||LA202_0==LPAREN||LA202_0==LSQUARE||(LA202_0 >= MINUS && LA202_0 <= NAME)||(LA202_0 >= NQSTR && LA202_0 <= NUMBER)||(LA202_0 >= PCT && LA202_0 <= PCTPCT)||LA202_0==PLUS||(LA202_0 >= QMARK && LA202_0 <= QUOTE)||(LA202_0 >= RSQUARE && LA202_0 <= SELECT)||(LA202_0 >= SLASH && LA202_0 <= SQUOTE)||(LA202_0 >= TEST && LA202_0 <= UOP)||LA202_0==WHILE||LA202_0==138) ) {
				alt202=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 202, 0, input);
				throw nvae;
			}

			switch (alt202) {
				case 1 :
					// com/caseystella/parser/bashast.g:301:5: negate_builtin_primary
					{
					pushFollow(FOLLOW_negate_builtin_primary_in_builtin_cond2958);
					negate_builtin_primary528=negate_builtin_primary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, negate_builtin_primary528.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:301:28: builtin_cond_primary
					{
					pushFollow(FOLLOW_builtin_cond_primary_in_builtin_cond2960);
					builtin_cond_primary529=builtin_cond_primary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_cond_primary529.getTree());

					}
					break;

			}

			// com/caseystella/parser/bashast.g:301:50: ( ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* builtin_cond )?
			int alt206=2;
			switch ( input.LA(1) ) {
				case BLANK:
					{
					int LA206_1 = input.LA(2);
					if ( (synpred288_bashast()) ) {
						alt206=1;
					}
					}
					break;
				case LOGICOR:
					{
					int LA206_2 = input.LA(2);
					if ( (synpred288_bashast()) ) {
						alt206=1;
					}
					}
					break;
				case LOGICAND:
					{
					int LA206_3 = input.LA(2);
					if ( (synpred288_bashast()) ) {
						alt206=1;
					}
					}
					break;
			}
			switch (alt206) {
				case 1 :
					// com/caseystella/parser/bashast.g:301:51: ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* builtin_cond
					{
					// com/caseystella/parser/bashast.g:301:56: ( BLANK !)*
					loop203:
					while (true) {
						int alt203=2;
						int LA203_0 = input.LA(1);
						if ( (LA203_0==BLANK) ) {
							alt203=1;
						}

						switch (alt203) {
						case 1 :
							// com/caseystella/parser/bashast.g:301:56: BLANK !
							{
							BLANK530=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_cond2964); if (state.failed) return retval;
							}
							break;

						default :
							break loop203;
						}
					}

					// com/caseystella/parser/bashast.g:301:59: ( LOGICOR ^| LOGICAND ^)
					int alt204=2;
					int LA204_0 = input.LA(1);
					if ( (LA204_0==LOGICOR) ) {
						alt204=1;
					}
					else if ( (LA204_0==LOGICAND) ) {
						alt204=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 204, 0, input);
						throw nvae;
					}

					switch (alt204) {
						case 1 :
							// com/caseystella/parser/bashast.g:301:60: LOGICOR ^
							{
							LOGICOR531=(Token)match(input,LOGICOR,FOLLOW_LOGICOR_in_builtin_cond2969); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LOGICOR531_tree = (CommonTree)adaptor.create(LOGICOR531);
							root_0 = (CommonTree)adaptor.becomeRoot(LOGICOR531_tree, root_0);
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:301:69: LOGICAND ^
							{
							LOGICAND532=(Token)match(input,LOGICAND,FOLLOW_LOGICAND_in_builtin_cond2972); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LOGICAND532_tree = (CommonTree)adaptor.create(LOGICAND532);
							root_0 = (CommonTree)adaptor.becomeRoot(LOGICAND532_tree, root_0);
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:301:85: ( BLANK !)*
					loop205:
					while (true) {
						int alt205=2;
						int LA205_0 = input.LA(1);
						if ( (LA205_0==BLANK) ) {
							alt205=1;
						}

						switch (alt205) {
						case 1 :
							// com/caseystella/parser/bashast.g:301:85: BLANK !
							{
							BLANK533=(Token)match(input,BLANK,FOLLOW_BLANK_in_builtin_cond2976); if (state.failed) return retval;
							}
							break;

						default :
							break loop205;
						}
					}

					pushFollow(FOLLOW_builtin_cond_in_builtin_cond2980);
					builtin_cond534=builtin_cond();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, builtin_cond534.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "builtin_cond"


	public static class negate_primary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "negate_primary"
	// com/caseystella/parser/bashast.g:302:1: negate_primary : BANG ( BLANK )+ cond_primary -> ^( NEGATION cond_primary ) ;
	public final bashastParser.negate_primary_return negate_primary() throws RecognitionException {
		bashastParser.negate_primary_return retval = new bashastParser.negate_primary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BANG535=null;
		Token BLANK536=null;
		ParserRuleReturnScope cond_primary537 =null;

		CommonTree BANG535_tree=null;
		CommonTree BLANK536_tree=null;
		RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_cond_primary=new RewriteRuleSubtreeStream(adaptor,"rule cond_primary");

		try {
			// com/caseystella/parser/bashast.g:303:2: ( BANG ( BLANK )+ cond_primary -> ^( NEGATION cond_primary ) )
			// com/caseystella/parser/bashast.g:303:4: BANG ( BLANK )+ cond_primary
			{
			BANG535=(Token)match(input,BANG,FOLLOW_BANG_in_negate_primary2990); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BANG.add(BANG535);

			// com/caseystella/parser/bashast.g:303:9: ( BLANK )+
			int cnt207=0;
			loop207:
			while (true) {
				int alt207=2;
				int LA207_0 = input.LA(1);
				if ( (LA207_0==BLANK) ) {
					alt207=1;
				}

				switch (alt207) {
				case 1 :
					// com/caseystella/parser/bashast.g:303:9: BLANK
					{
					BLANK536=(Token)match(input,BLANK,FOLLOW_BLANK_in_negate_primary2992); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK536);

					}
					break;

				default :
					if ( cnt207 >= 1 ) break loop207;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(207, input);
					throw eee;
				}
				cnt207++;
			}

			pushFollow(FOLLOW_cond_primary_in_negate_primary2995);
			cond_primary537=cond_primary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_cond_primary.add(cond_primary537.getTree());
			// AST REWRITE
			// elements: cond_primary
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 303:29: -> ^( NEGATION cond_primary )
			{
				// com/caseystella/parser/bashast.g:303:32: ^( NEGATION cond_primary )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEGATION, "NEGATION"), root_1);
				adaptor.addChild(root_1, stream_cond_primary.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "negate_primary"


	public static class negate_builtin_primary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "negate_builtin_primary"
	// com/caseystella/parser/bashast.g:304:1: negate_builtin_primary : BANG ( BLANK )+ builtin_cond_primary -> ^( NEGATION builtin_cond_primary ) ;
	public final bashastParser.negate_builtin_primary_return negate_builtin_primary() throws RecognitionException {
		bashastParser.negate_builtin_primary_return retval = new bashastParser.negate_builtin_primary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BANG538=null;
		Token BLANK539=null;
		ParserRuleReturnScope builtin_cond_primary540 =null;

		CommonTree BANG538_tree=null;
		CommonTree BLANK539_tree=null;
		RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_builtin_cond_primary=new RewriteRuleSubtreeStream(adaptor,"rule builtin_cond_primary");

		try {
			// com/caseystella/parser/bashast.g:305:2: ( BANG ( BLANK )+ builtin_cond_primary -> ^( NEGATION builtin_cond_primary ) )
			// com/caseystella/parser/bashast.g:305:4: BANG ( BLANK )+ builtin_cond_primary
			{
			BANG538=(Token)match(input,BANG,FOLLOW_BANG_in_negate_builtin_primary3011); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_BANG.add(BANG538);

			// com/caseystella/parser/bashast.g:305:9: ( BLANK )+
			int cnt208=0;
			loop208:
			while (true) {
				int alt208=2;
				int LA208_0 = input.LA(1);
				if ( (LA208_0==BLANK) ) {
					alt208=1;
				}

				switch (alt208) {
				case 1 :
					// com/caseystella/parser/bashast.g:305:9: BLANK
					{
					BLANK539=(Token)match(input,BLANK,FOLLOW_BLANK_in_negate_builtin_primary3013); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK539);

					}
					break;

				default :
					if ( cnt208 >= 1 ) break loop208;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(208, input);
					throw eee;
				}
				cnt208++;
			}

			pushFollow(FOLLOW_builtin_cond_primary_in_negate_builtin_primary3016);
			builtin_cond_primary540=builtin_cond_primary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_builtin_cond_primary.add(builtin_cond_primary540.getTree());
			// AST REWRITE
			// elements: builtin_cond_primary
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 305:37: -> ^( NEGATION builtin_cond_primary )
			{
				// com/caseystella/parser/bashast.g:305:40: ^( NEGATION builtin_cond_primary )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NEGATION, "NEGATION"), root_1);
				adaptor.addChild(root_1, stream_builtin_cond_primary.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "negate_builtin_primary"


	public static class binary_str_op_keyword_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "binary_str_op_keyword"
	// com/caseystella/parser/bashast.g:306:1: binary_str_op_keyword : ( BOP | EQUALS EQUALS -> OP[\"==\"] | EQUALS | BANG EQUALS -> OP[\"!=\"] | LT | GT );
	public final bashastParser.binary_str_op_keyword_return binary_str_op_keyword() throws RecognitionException {
		bashastParser.binary_str_op_keyword_return retval = new bashastParser.binary_str_op_keyword_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BOP541=null;
		Token EQUALS542=null;
		Token EQUALS543=null;
		Token EQUALS544=null;
		Token BANG545=null;
		Token EQUALS546=null;
		Token LT547=null;
		Token GT548=null;

		CommonTree BOP541_tree=null;
		CommonTree EQUALS542_tree=null;
		CommonTree EQUALS543_tree=null;
		CommonTree EQUALS544_tree=null;
		CommonTree BANG545_tree=null;
		CommonTree EQUALS546_tree=null;
		CommonTree LT547_tree=null;
		CommonTree GT548_tree=null;
		RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
		RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");

		try {
			// com/caseystella/parser/bashast.g:307:2: ( BOP | EQUALS EQUALS -> OP[\"==\"] | EQUALS | BANG EQUALS -> OP[\"!=\"] | LT | GT )
			int alt209=6;
			switch ( input.LA(1) ) {
			case BOP:
				{
				alt209=1;
				}
				break;
			case EQUALS:
				{
				int LA209_2 = input.LA(2);
				if ( (LA209_2==EQUALS) ) {
					int LA209_6 = input.LA(3);
					if ( (synpred292_bashast()) ) {
						alt209=2;
					}
					else if ( (synpred293_bashast()) ) {
						alt209=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 209, 6, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA209_2==ARITH_ASSIGN||(LA209_2 >= AT && LA209_2 <= BOP)||(LA209_2 >= CARET && LA209_2 <= CASE)||LA209_2==COLON||(LA209_2 >= DEC && LA209_2 <= DOTDOT)||(LA209_2 >= ELIF && LA209_2 <= ELSE)||(LA209_2 >= ESAC && LA209_2 <= ESC_CHAR)||LA209_2==FI||LA209_2==FOR||LA209_2==FUNCTION||(LA209_2 >= IF && LA209_2 <= INC)||LA209_2==LBRACE||LA209_2==LETTER||LA209_2==LPAREN||LA209_2==LSQUARE||(LA209_2 >= MINUS && LA209_2 <= NAME)||(LA209_2 >= NQSTR && LA209_2 <= NUMBER)||(LA209_2 >= PCT && LA209_2 <= PCTPCT)||LA209_2==PLUS||(LA209_2 >= QMARK && LA209_2 <= QUOTE)||(LA209_2 >= RSQUARE && LA209_2 <= SELECT)||(LA209_2 >= SLASH && LA209_2 <= SQUOTE)||(LA209_2 >= TEST && LA209_2 <= UOP)||LA209_2==WHILE||LA209_2==138) ) {
					alt209=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 209, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BANG:
				{
				alt209=4;
				}
				break;
			case LT:
				{
				alt209=5;
				}
				break;
			case GT:
				{
				alt209=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 209, 0, input);
				throw nvae;
			}
			switch (alt209) {
				case 1 :
					// com/caseystella/parser/bashast.g:307:4: BOP
					{
					root_0 = (CommonTree)adaptor.nil();


					BOP541=(Token)match(input,BOP,FOLLOW_BOP_in_binary_str_op_keyword3032); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BOP541_tree = (CommonTree)adaptor.create(BOP541);
					adaptor.addChild(root_0, BOP541_tree);
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:308:4: EQUALS EQUALS
					{
					EQUALS542=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_binary_str_op_keyword3037); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS542);

					EQUALS543=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_binary_str_op_keyword3039); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS543);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 308:18: -> OP[\"==\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "=="));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:309:4: EQUALS
					{
					root_0 = (CommonTree)adaptor.nil();


					EQUALS544=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_binary_str_op_keyword3049); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQUALS544_tree = (CommonTree)adaptor.create(EQUALS544);
					adaptor.addChild(root_0, EQUALS544_tree);
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:310:4: BANG EQUALS
					{
					BANG545=(Token)match(input,BANG,FOLLOW_BANG_in_binary_str_op_keyword3054); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BANG.add(BANG545);

					EQUALS546=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_binary_str_op_keyword3056); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS546);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 310:16: -> OP[\"!=\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "!="));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:311:4: LT
					{
					root_0 = (CommonTree)adaptor.nil();


					LT547=(Token)match(input,LT,FOLLOW_LT_in_binary_str_op_keyword3066); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LT547_tree = (CommonTree)adaptor.create(LT547);
					adaptor.addChild(root_0, LT547_tree);
					}

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:312:4: GT
					{
					root_0 = (CommonTree)adaptor.nil();


					GT548=(Token)match(input,GT,FOLLOW_GT_in_binary_str_op_keyword3071); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					GT548_tree = (CommonTree)adaptor.create(GT548);
					adaptor.addChild(root_0, GT548_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "binary_str_op_keyword"


	public static class binary_string_op_builtin_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "binary_string_op_builtin"
	// com/caseystella/parser/bashast.g:313:1: binary_string_op_builtin : ( BOP | EQUALS | BANG EQUALS -> OP[\"!=\"] | ESC_LT | ESC_GT );
	public final bashastParser.binary_string_op_builtin_return binary_string_op_builtin() throws RecognitionException {
		bashastParser.binary_string_op_builtin_return retval = new bashastParser.binary_string_op_builtin_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BOP549=null;
		Token EQUALS550=null;
		Token BANG551=null;
		Token EQUALS552=null;
		Token ESC_LT553=null;
		Token ESC_GT554=null;

		CommonTree BOP549_tree=null;
		CommonTree EQUALS550_tree=null;
		CommonTree BANG551_tree=null;
		CommonTree EQUALS552_tree=null;
		CommonTree ESC_LT553_tree=null;
		CommonTree ESC_GT554_tree=null;
		RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
		RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");

		try {
			// com/caseystella/parser/bashast.g:314:2: ( BOP | EQUALS | BANG EQUALS -> OP[\"!=\"] | ESC_LT | ESC_GT )
			int alt210=5;
			switch ( input.LA(1) ) {
			case BOP:
				{
				alt210=1;
				}
				break;
			case EQUALS:
				{
				alt210=2;
				}
				break;
			case BANG:
				{
				alt210=3;
				}
				break;
			case ESC_LT:
				{
				alt210=4;
				}
				break;
			case ESC_GT:
				{
				alt210=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 210, 0, input);
				throw nvae;
			}
			switch (alt210) {
				case 1 :
					// com/caseystella/parser/bashast.g:314:4: BOP
					{
					root_0 = (CommonTree)adaptor.nil();


					BOP549=(Token)match(input,BOP,FOLLOW_BOP_in_binary_string_op_builtin3079); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BOP549_tree = (CommonTree)adaptor.create(BOP549);
					adaptor.addChild(root_0, BOP549_tree);
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:315:4: EQUALS
					{
					root_0 = (CommonTree)adaptor.nil();


					EQUALS550=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_binary_string_op_builtin3084); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQUALS550_tree = (CommonTree)adaptor.create(EQUALS550);
					adaptor.addChild(root_0, EQUALS550_tree);
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:316:4: BANG EQUALS
					{
					BANG551=(Token)match(input,BANG,FOLLOW_BANG_in_binary_string_op_builtin3089); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BANG.add(BANG551);

					EQUALS552=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_binary_string_op_builtin3091); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS552);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 316:16: -> OP[\"!=\"]
					{
						adaptor.addChild(root_0, (CommonTree)adaptor.create(OP, "!="));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:317:4: ESC_LT
					{
					root_0 = (CommonTree)adaptor.nil();


					ESC_LT553=(Token)match(input,ESC_LT,FOLLOW_ESC_LT_in_binary_string_op_builtin3101); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ESC_LT553_tree = (CommonTree)adaptor.create(ESC_LT553);
					adaptor.addChild(root_0, ESC_LT553_tree);
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:318:4: ESC_GT
					{
					root_0 = (CommonTree)adaptor.nil();


					ESC_GT554=(Token)match(input,ESC_GT,FOLLOW_ESC_GT_in_binary_string_op_builtin3106); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ESC_GT554_tree = (CommonTree)adaptor.create(ESC_GT554);
					adaptor.addChild(root_0, ESC_GT554_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "binary_string_op_builtin"


	public static class unary_cond_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unary_cond"
	// com/caseystella/parser/bashast.g:319:1: unary_cond : UOP ^ BLANK ! cond_part ;
	public final bashastParser.unary_cond_return unary_cond() throws RecognitionException {
		bashastParser.unary_cond_return retval = new bashastParser.unary_cond_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token UOP555=null;
		Token BLANK556=null;
		ParserRuleReturnScope cond_part557 =null;

		CommonTree UOP555_tree=null;
		CommonTree BLANK556_tree=null;

		try {
			// com/caseystella/parser/bashast.g:320:2: ( UOP ^ BLANK ! cond_part )
			// com/caseystella/parser/bashast.g:320:4: UOP ^ BLANK ! cond_part
			{
			root_0 = (CommonTree)adaptor.nil();


			UOP555=(Token)match(input,UOP,FOLLOW_UOP_in_unary_cond3114); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UOP555_tree = (CommonTree)adaptor.create(UOP555);
			root_0 = (CommonTree)adaptor.becomeRoot(UOP555_tree, root_0);
			}

			BLANK556=(Token)match(input,BLANK,FOLLOW_BLANK_in_unary_cond3117); if (state.failed) return retval;
			pushFollow(FOLLOW_cond_part_in_unary_cond3120);
			cond_part557=cond_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, cond_part557.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unary_cond"


	public static class cond_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "cond_part"
	// com/caseystella/parser/bashast.g:322:1: cond_part : ( brace_expansion | var_ref | res_word_str -> ^( STRING res_word_str ) | num | fname | arithmetic );
	public final bashastParser.cond_part_return cond_part() throws RecognitionException {
		bashastParser.cond_part_return retval = new bashastParser.cond_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope brace_expansion558 =null;
		ParserRuleReturnScope var_ref559 =null;
		ParserRuleReturnScope res_word_str560 =null;
		ParserRuleReturnScope num561 =null;
		ParserRuleReturnScope fname562 =null;
		ParserRuleReturnScope arithmetic563 =null;

		RewriteRuleSubtreeStream stream_res_word_str=new RewriteRuleSubtreeStream(adaptor,"rule res_word_str");

		try {
			// com/caseystella/parser/bashast.g:322:10: ( brace_expansion | var_ref | res_word_str -> ^( STRING res_word_str ) | num | fname | arithmetic )
			int alt211=6;
			switch ( input.LA(1) ) {
			case LSQUARE:
				{
				int LA211_1 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case QMARK:
				{
				int LA211_2 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TIMES:
				{
				int LA211_3 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLUS:
				{
				int LA211_4 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case AT:
				{
				int LA211_5 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BANG:
				{
				int LA211_6 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case DOLLAR:
				{
				int LA211_7 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred301_bashast()) ) {
					alt211=2;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case TICK:
				{
				int LA211_8 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case QUOTE:
				{
				int LA211_9 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQUOTE:
				{
				int LA211_10 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DIGIT:
			case NUMBER:
				{
				int LA211_11 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred303_bashast()) ) {
					alt211=4;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case 138:
				{
				int LA211_12 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case NQSTR:
				{
				int LA211_13 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EQUALS:
				{
				int LA211_14 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PCT:
				{
				int LA211_15 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 15, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PCTPCT:
				{
				int LA211_16 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 16, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case MINUS:
				{
				int LA211_17 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case DOT:
				{
				int LA211_18 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOTDOT:
				{
				int LA211_19 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 19, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case COLON:
				{
				int LA211_20 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 20, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BOP:
				{
				int LA211_21 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 21, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case UOP:
				{
				int LA211_22 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 22, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TEST:
				{
				int LA211_23 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 23, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LETTER:
			case NAME:
				{
				int LA211_24 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case TILDE:
				{
				int LA211_25 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case INC:
				{
				int LA211_26 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case DEC:
				{
				int LA211_27 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}
				else if ( (true) ) {
					alt211=6;
				}

				}
				break;
			case ARITH_ASSIGN:
				{
				int LA211_28 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 28, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ESC_CHAR:
				{
				int LA211_29 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 29, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CARET:
				{
				int LA211_30 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 30, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CASE:
			case DO:
			case DONE:
			case ELIF:
			case ELSE:
			case ESAC:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case SELECT:
			case THEN:
			case TIME:
			case UNTIL:
			case WHILE:
				{
				int LA211_31 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred302_bashast()) ) {
					alt211=3;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 31, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SLASH:
				{
				int LA211_32 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 32, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case RSQUARE:
				{
				int LA211_33 = input.LA(2);
				if ( (synpred300_bashast()) ) {
					alt211=1;
				}
				else if ( (synpred304_bashast()) ) {
					alt211=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 211, 33, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACE:
				{
				alt211=1;
				}
				break;
			case LPAREN:
				{
				alt211=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 211, 0, input);
				throw nvae;
			}
			switch (alt211) {
				case 1 :
					// com/caseystella/parser/bashast.g:322:12: brace_expansion
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_brace_expansion_in_cond_part3127);
					brace_expansion558=brace_expansion();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_expansion558.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:323:4: var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_ref_in_cond_part3132);
					var_ref559=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref559.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:324:4: res_word_str
					{
					pushFollow(FOLLOW_res_word_str_in_cond_part3137);
					res_word_str560=res_word_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_res_word_str.add(res_word_str560.getTree());
					// AST REWRITE
					// elements: res_word_str
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 324:17: -> ^( STRING res_word_str )
					{
						// com/caseystella/parser/bashast.g:324:20: ^( STRING res_word_str )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);
						adaptor.addChild(root_1, stream_res_word_str.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:325:4: num
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_num_in_cond_part3150);
					num561=num();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, num561.getTree());

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:326:4: fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fname_in_cond_part3155);
					fname562=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname562.getTree());

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:327:4: arithmetic
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arithmetic_in_cond_part3160);
					arithmetic563=arithmetic();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic563.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cond_part"


	public static class wspace_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "wspace"
	// com/caseystella/parser/bashast.g:329:1: wspace : ( ( BLANK )+ | EOL );
	public final bashastParser.wspace_return wspace() throws RecognitionException {
		bashastParser.wspace_return retval = new bashastParser.wspace_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK564=null;
		Token EOL565=null;

		CommonTree BLANK564_tree=null;
		CommonTree EOL565_tree=null;

		try {
			// com/caseystella/parser/bashast.g:329:8: ( ( BLANK )+ | EOL )
			int alt213=2;
			int LA213_0 = input.LA(1);
			if ( (LA213_0==BLANK) ) {
				alt213=1;
			}
			else if ( (LA213_0==EOL) ) {
				alt213=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 213, 0, input);
				throw nvae;
			}

			switch (alt213) {
				case 1 :
					// com/caseystella/parser/bashast.g:329:10: ( BLANK )+
					{
					root_0 = (CommonTree)adaptor.nil();


					// com/caseystella/parser/bashast.g:329:10: ( BLANK )+
					int cnt212=0;
					loop212:
					while (true) {
						int alt212=2;
						int LA212_0 = input.LA(1);
						if ( (LA212_0==BLANK) ) {
							int LA212_2 = input.LA(2);
							if ( (synpred305_bashast()) ) {
								alt212=1;
							}

						}

						switch (alt212) {
						case 1 :
							// com/caseystella/parser/bashast.g:329:10: BLANK
							{
							BLANK564=(Token)match(input,BLANK,FOLLOW_BLANK_in_wspace3168); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BLANK564_tree = (CommonTree)adaptor.create(BLANK564);
							adaptor.addChild(root_0, BLANK564_tree);
							}

							}
							break;

						default :
							if ( cnt212 >= 1 ) break loop212;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(212, input);
							throw eee;
						}
						cnt212++;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:329:17: EOL
					{
					root_0 = (CommonTree)adaptor.nil();


					EOL565=(Token)match(input,EOL,FOLLOW_EOL_in_wspace3171); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EOL565_tree = (CommonTree)adaptor.create(EOL565);
					adaptor.addChild(root_0, EOL565_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "wspace"


	public static class semiel_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "semiel"
	// com/caseystella/parser/bashast.g:330:1: semiel : ( ';' | EOL ) ( BLANK )* ;
	public final bashastParser.semiel_return semiel() throws RecognitionException {
		bashastParser.semiel_return retval = new bashastParser.semiel_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set566=null;
		Token BLANK567=null;

		CommonTree set566_tree=null;
		CommonTree BLANK567_tree=null;

		try {
			// com/caseystella/parser/bashast.g:330:8: ( ( ';' | EOL ) ( BLANK )* )
			// com/caseystella/parser/bashast.g:330:10: ( ';' | EOL ) ( BLANK )*
			{
			root_0 = (CommonTree)adaptor.nil();


			set566=input.LT(1);
			if ( input.LA(1)==EOL||input.LA(1)==SEMIC ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set566));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// com/caseystella/parser/bashast.g:330:20: ( BLANK )*
			loop214:
			while (true) {
				int alt214=2;
				int LA214_0 = input.LA(1);
				if ( (LA214_0==BLANK) ) {
					alt214=1;
				}

				switch (alt214) {
				case 1 :
					// com/caseystella/parser/bashast.g:330:20: BLANK
					{
					BLANK567=(Token)match(input,BLANK,FOLLOW_BLANK_in_semiel3184); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BLANK567_tree = (CommonTree)adaptor.create(BLANK567);
					adaptor.addChild(root_0, BLANK567_tree);
					}

					}
					break;

				default :
					break loop214;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "semiel"


	public static class word_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "word"
	// com/caseystella/parser/bashast.g:333:1: word : ( brace_expansion | command_sub | var_ref | num | fname | arithmetic_expansion | res_word_str -> ^( STRING res_word_str ) );
	public final bashastParser.word_return word() throws RecognitionException {
		bashastParser.word_return retval = new bashastParser.word_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope brace_expansion568 =null;
		ParserRuleReturnScope command_sub569 =null;
		ParserRuleReturnScope var_ref570 =null;
		ParserRuleReturnScope num571 =null;
		ParserRuleReturnScope fname572 =null;
		ParserRuleReturnScope arithmetic_expansion573 =null;
		ParserRuleReturnScope res_word_str574 =null;

		RewriteRuleSubtreeStream stream_res_word_str=new RewriteRuleSubtreeStream(adaptor,"rule res_word_str");

		try {
			// com/caseystella/parser/bashast.g:333:6: ( brace_expansion | command_sub | var_ref | num | fname | arithmetic_expansion | res_word_str -> ^( STRING res_word_str ) )
			int alt215=7;
			switch ( input.LA(1) ) {
			case LSQUARE:
				{
				int LA215_1 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case QMARK:
				{
				int LA215_2 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TIMES:
				{
				int LA215_3 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLUS:
				{
				int LA215_4 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT:
				{
				int LA215_5 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BANG:
				{
				int LA215_6 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOLLAR:
				{
				int LA215_7 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred310_bashast()) ) {
					alt215=2;
				}
				else if ( (synpred311_bashast()) ) {
					alt215=3;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}
				else if ( (synpred314_bashast()) ) {
					alt215=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TICK:
				{
				int LA215_8 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred310_bashast()) ) {
					alt215=2;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case QUOTE:
				{
				int LA215_9 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 9, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQUOTE:
				{
				int LA215_10 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DIGIT:
			case NUMBER:
				{
				int LA215_11 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred312_bashast()) ) {
					alt215=4;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case 138:
				{
				int LA215_12 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NQSTR:
				{
				int LA215_13 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 13, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EQUALS:
				{
				int LA215_14 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 14, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PCT:
				{
				int LA215_15 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 15, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PCTPCT:
				{
				int LA215_16 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 16, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case MINUS:
				{
				int LA215_17 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 17, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOT:
				{
				int LA215_18 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 18, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DOTDOT:
				{
				int LA215_19 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 19, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case COLON:
				{
				int LA215_20 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 20, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BOP:
				{
				int LA215_21 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 21, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case UOP:
				{
				int LA215_22 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 22, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TEST:
				{
				int LA215_23 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 23, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LETTER:
			case NAME:
				{
				int LA215_24 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 24, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TILDE:
				{
				int LA215_25 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 25, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case INC:
				{
				int LA215_26 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 26, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DEC:
				{
				int LA215_27 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 27, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ARITH_ASSIGN:
				{
				int LA215_28 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 28, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ESC_CHAR:
				{
				int LA215_29 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 29, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CARET:
				{
				int LA215_30 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 30, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CASE:
			case DO:
			case DONE:
			case ELIF:
			case ELSE:
			case ESAC:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case SELECT:
			case THEN:
			case TIME:
			case UNTIL:
			case WHILE:
				{
				int LA215_31 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}
				else if ( (true) ) {
					alt215=7;
				}

				}
				break;
			case SLASH:
				{
				int LA215_32 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 32, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case RSQUARE:
				{
				int LA215_33 = input.LA(2);
				if ( (synpred309_bashast()) ) {
					alt215=1;
				}
				else if ( (synpred313_bashast()) ) {
					alt215=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 215, 33, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LBRACE:
				{
				alt215=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 215, 0, input);
				throw nvae;
			}
			switch (alt215) {
				case 1 :
					// com/caseystella/parser/bashast.g:333:8: brace_expansion
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_brace_expansion_in_word3194);
					brace_expansion568=brace_expansion();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, brace_expansion568.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:334:4: command_sub
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_command_sub_in_word3199);
					command_sub569=command_sub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, command_sub569.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:335:4: var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_ref_in_word3204);
					var_ref570=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref570.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:336:4: num
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_num_in_word3209);
					num571=num();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, num571.getTree());

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:337:4: fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fname_in_word3214);
					fname572=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname572.getTree());

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:338:4: arithmetic_expansion
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arithmetic_expansion_in_word3219);
					arithmetic_expansion573=arithmetic_expansion();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_expansion573.getTree());

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:339:4: res_word_str
					{
					pushFollow(FOLLOW_res_word_str_in_word3224);
					res_word_str574=res_word_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_res_word_str.add(res_word_str574.getTree());
					// AST REWRITE
					// elements: res_word_str
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 339:17: -> ^( STRING res_word_str )
					{
						// com/caseystella/parser/bashast.g:339:20: ^( STRING res_word_str )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);
						adaptor.addChild(root_1, stream_res_word_str.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "word"


	public static class pattern_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pattern"
	// com/caseystella/parser/bashast.g:340:1: pattern : ( command_sub | fname | TIMES );
	public final bashastParser.pattern_return pattern() throws RecognitionException {
		bashastParser.pattern_return retval = new bashastParser.pattern_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token TIMES577=null;
		ParserRuleReturnScope command_sub575 =null;
		ParserRuleReturnScope fname576 =null;

		CommonTree TIMES577_tree=null;

		try {
			// com/caseystella/parser/bashast.g:340:9: ( command_sub | fname | TIMES )
			int alt216=3;
			switch ( input.LA(1) ) {
			case DOLLAR:
				{
				int LA216_1 = input.LA(2);
				if ( (synpred315_bashast()) ) {
					alt216=1;
				}
				else if ( (synpred316_bashast()) ) {
					alt216=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 216, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TICK:
				{
				int LA216_2 = input.LA(2);
				if ( (synpred315_bashast()) ) {
					alt216=1;
				}
				else if ( (synpred316_bashast()) ) {
					alt216=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 216, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ARITH_ASSIGN:
			case AT:
			case BANG:
			case BOP:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DIGIT:
			case DO:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LETTER:
			case LSQUARE:
			case MINUS:
			case NAME:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case PLUS:
			case QMARK:
			case QUOTE:
			case RSQUARE:
			case SELECT:
			case SLASH:
			case SQUOTE:
			case TEST:
			case THEN:
			case TILDE:
			case TIME:
			case UNTIL:
			case UOP:
			case WHILE:
			case 138:
				{
				alt216=2;
				}
				break;
			case TIMES:
				{
				int LA216_5 = input.LA(2);
				if ( (synpred316_bashast()) ) {
					alt216=2;
				}
				else if ( (true) ) {
					alt216=3;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 216, 0, input);
				throw nvae;
			}
			switch (alt216) {
				case 1 :
					// com/caseystella/parser/bashast.g:340:11: command_sub
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_command_sub_in_pattern3239);
					command_sub575=command_sub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, command_sub575.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:341:4: fname
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_fname_in_pattern3244);
					fname576=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fname576.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:342:4: TIMES
					{
					root_0 = (CommonTree)adaptor.nil();


					TIMES577=(Token)match(input,TIMES,FOLLOW_TIMES_in_pattern3249); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIMES577_tree = (CommonTree)adaptor.create(TIMES577);
					adaptor.addChild(root_0, TIMES577_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pattern"


	public static class num_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "num"
	// com/caseystella/parser/bashast.g:343:1: num options {k=1; backtrack=false; } : ( DIGIT | NUMBER );
	public final bashastParser.num_return num() throws RecognitionException {
		bashastParser.num_return retval = new bashastParser.num_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set578=null;

		CommonTree set578_tree=null;

		try {
			// com/caseystella/parser/bashast.g:345:2: ( DIGIT | NUMBER )
			// com/caseystella/parser/bashast.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set578=input.LT(1);
			if ( input.LA(1)==DIGIT||input.LA(1)==NUMBER ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set578));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "num"


	public static class res_word_str_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "res_word_str"
	// com/caseystella/parser/bashast.g:347:1: res_word_str : ( CASE | DO | DONE | ELIF | ELSE | ESAC | FI | FOR | FUNCTION | IF | IN | SELECT | THEN | UNTIL | WHILE | TIME );
	public final bashastParser.res_word_str_return res_word_str() throws RecognitionException {
		bashastParser.res_word_str_return retval = new bashastParser.res_word_str_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set579=null;

		CommonTree set579_tree=null;

		try {
			// com/caseystella/parser/bashast.g:348:2: ( CASE | DO | DONE | ELIF | ELSE | ESAC | FI | FOR | FUNCTION | IF | IN | SELECT | THEN | UNTIL | WHILE | TIME )
			// com/caseystella/parser/bashast.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set579=input.LT(1);
			if ( input.LA(1)==CASE||input.LA(1)==DO||input.LA(1)==DONE||(input.LA(1) >= ELIF && input.LA(1) <= ELSE)||input.LA(1)==ESAC||input.LA(1)==FI||input.LA(1)==FOR||input.LA(1)==FUNCTION||(input.LA(1) >= IF && input.LA(1) <= IN)||input.LA(1)==SELECT||input.LA(1)==THEN||input.LA(1)==TIME||input.LA(1)==UNTIL||input.LA(1)==WHILE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set579));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "res_word_str"


	public static class str_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "str_part"
	// com/caseystella/parser/bashast.g:350:1: str_part : ( ns_str_part | SLASH );
	public final bashastParser.str_part_return str_part() throws RecognitionException {
		bashastParser.str_part_return retval = new bashastParser.str_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token SLASH581=null;
		ParserRuleReturnScope ns_str_part580 =null;

		CommonTree SLASH581_tree=null;

		try {
			// com/caseystella/parser/bashast.g:351:2: ( ns_str_part | SLASH )
			int alt217=2;
			int LA217_0 = input.LA(1);
			if ( (LA217_0==ARITH_ASSIGN||LA217_0==BOP||(LA217_0 >= CARET && LA217_0 <= CASE)||LA217_0==COLON||(LA217_0 >= DEC && LA217_0 <= DO)||(LA217_0 >= DONE && LA217_0 <= DOTDOT)||(LA217_0 >= ELIF && LA217_0 <= ELSE)||LA217_0==EQUALS||(LA217_0 >= ESAC && LA217_0 <= ESC_CHAR)||LA217_0==FI||LA217_0==FOR||LA217_0==FUNCTION||(LA217_0 >= IF && LA217_0 <= INC)||LA217_0==LETTER||(LA217_0 >= MINUS && LA217_0 <= NAME)||(LA217_0 >= NQSTR && LA217_0 <= NUMBER)||(LA217_0 >= PCT && LA217_0 <= PCTPCT)||LA217_0==SELECT||(LA217_0 >= TEST && LA217_0 <= THEN)||(LA217_0 >= TILDE && LA217_0 <= TIME)||(LA217_0 >= UNTIL && LA217_0 <= UOP)||LA217_0==WHILE||LA217_0==138) ) {
				alt217=1;
			}
			else if ( (LA217_0==SLASH) ) {
				alt217=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 217, 0, input);
				throw nvae;
			}

			switch (alt217) {
				case 1 :
					// com/caseystella/parser/bashast.g:351:4: ns_str_part
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_ns_str_part_in_str_part3318);
					ns_str_part580=ns_str_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ns_str_part580.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:352:4: SLASH
					{
					root_0 = (CommonTree)adaptor.nil();


					SLASH581=(Token)match(input,SLASH,FOLLOW_SLASH_in_str_part3323); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLASH581_tree = (CommonTree)adaptor.create(SLASH581);
					adaptor.addChild(root_0, SLASH581_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "str_part"


	public static class str_part_with_pound_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "str_part_with_pound"
	// com/caseystella/parser/bashast.g:354:1: str_part_with_pound : ( str_part | POUND | POUNDPOUND );
	public final bashastParser.str_part_with_pound_return str_part_with_pound() throws RecognitionException {
		bashastParser.str_part_with_pound_return retval = new bashastParser.str_part_with_pound_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token POUND583=null;
		Token POUNDPOUND584=null;
		ParserRuleReturnScope str_part582 =null;

		CommonTree POUND583_tree=null;
		CommonTree POUNDPOUND584_tree=null;

		try {
			// com/caseystella/parser/bashast.g:355:2: ( str_part | POUND | POUNDPOUND )
			int alt218=3;
			switch ( input.LA(1) ) {
			case ARITH_ASSIGN:
			case BOP:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DIGIT:
			case DO:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LETTER:
			case MINUS:
			case NAME:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case SELECT:
			case SLASH:
			case TEST:
			case THEN:
			case TILDE:
			case TIME:
			case UNTIL:
			case UOP:
			case WHILE:
			case 138:
				{
				alt218=1;
				}
				break;
			case POUND:
				{
				alt218=2;
				}
				break;
			case POUNDPOUND:
				{
				alt218=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 218, 0, input);
				throw nvae;
			}
			switch (alt218) {
				case 1 :
					// com/caseystella/parser/bashast.g:355:4: str_part
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_str_part_in_str_part_with_pound3332);
					str_part582=str_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, str_part582.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:356:4: POUND
					{
					root_0 = (CommonTree)adaptor.nil();


					POUND583=(Token)match(input,POUND,FOLLOW_POUND_in_str_part_with_pound3337); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					POUND583_tree = (CommonTree)adaptor.create(POUND583);
					adaptor.addChild(root_0, POUND583_tree);
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:357:4: POUNDPOUND
					{
					root_0 = (CommonTree)adaptor.nil();


					POUNDPOUND584=(Token)match(input,POUNDPOUND,FOLLOW_POUNDPOUND_in_str_part_with_pound3342); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					POUNDPOUND584_tree = (CommonTree)adaptor.create(POUNDPOUND584);
					adaptor.addChild(root_0, POUNDPOUND584_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "str_part_with_pound"


	public static class ns_str_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ns_str_part"
	// com/caseystella/parser/bashast.g:359:1: ns_str_part : ( ns_str_part_no_res | res_word_str );
	public final bashastParser.ns_str_part_return ns_str_part() throws RecognitionException {
		bashastParser.ns_str_part_return retval = new bashastParser.ns_str_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope ns_str_part_no_res585 =null;
		ParserRuleReturnScope res_word_str586 =null;


		try {
			// com/caseystella/parser/bashast.g:360:2: ( ns_str_part_no_res | res_word_str )
			int alt219=2;
			int LA219_0 = input.LA(1);
			if ( (LA219_0==ARITH_ASSIGN||LA219_0==BOP||LA219_0==CARET||LA219_0==COLON||(LA219_0 >= DEC && LA219_0 <= DIGIT)||(LA219_0 >= DOT && LA219_0 <= DOTDOT)||LA219_0==EQUALS||LA219_0==ESC_CHAR||LA219_0==INC||LA219_0==LETTER||(LA219_0 >= MINUS && LA219_0 <= NAME)||(LA219_0 >= NQSTR && LA219_0 <= NUMBER)||(LA219_0 >= PCT && LA219_0 <= PCTPCT)||LA219_0==TEST||LA219_0==TILDE||LA219_0==UOP||LA219_0==138) ) {
				alt219=1;
			}
			else if ( (LA219_0==CASE||LA219_0==DO||LA219_0==DONE||(LA219_0 >= ELIF && LA219_0 <= ELSE)||LA219_0==ESAC||LA219_0==FI||LA219_0==FOR||LA219_0==FUNCTION||(LA219_0 >= IF && LA219_0 <= IN)||LA219_0==SELECT||LA219_0==THEN||LA219_0==TIME||LA219_0==UNTIL||LA219_0==WHILE) ) {
				alt219=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 219, 0, input);
				throw nvae;
			}

			switch (alt219) {
				case 1 :
					// com/caseystella/parser/bashast.g:360:4: ns_str_part_no_res
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_ns_str_part_no_res_in_ns_str_part3351);
					ns_str_part_no_res585=ns_str_part_no_res();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ns_str_part_no_res585.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:361:4: res_word_str
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_res_word_str_in_ns_str_part3356);
					res_word_str586=res_word_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, res_word_str586.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ns_str_part"


	public static class ns_str_part_no_res_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ns_str_part_no_res"
	// com/caseystella/parser/bashast.g:363:1: ns_str_part_no_res : ( num | name | NQSTR | EQUALS | PCT | PCTPCT | MINUS | DOT | DOTDOT | COLON | BOP | UOP | TEST | '_' | TILDE | INC | DEC | ARITH_ASSIGN | ESC_CHAR | CARET );
	public final bashastParser.ns_str_part_no_res_return ns_str_part_no_res() throws RecognitionException {
		bashastParser.ns_str_part_no_res_return retval = new bashastParser.ns_str_part_no_res_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token NQSTR589=null;
		Token EQUALS590=null;
		Token PCT591=null;
		Token PCTPCT592=null;
		Token MINUS593=null;
		Token DOT594=null;
		Token DOTDOT595=null;
		Token COLON596=null;
		Token BOP597=null;
		Token UOP598=null;
		Token TEST599=null;
		Token char_literal600=null;
		Token TILDE601=null;
		Token INC602=null;
		Token DEC603=null;
		Token ARITH_ASSIGN604=null;
		Token ESC_CHAR605=null;
		Token CARET606=null;
		ParserRuleReturnScope num587 =null;
		ParserRuleReturnScope name588 =null;

		CommonTree NQSTR589_tree=null;
		CommonTree EQUALS590_tree=null;
		CommonTree PCT591_tree=null;
		CommonTree PCTPCT592_tree=null;
		CommonTree MINUS593_tree=null;
		CommonTree DOT594_tree=null;
		CommonTree DOTDOT595_tree=null;
		CommonTree COLON596_tree=null;
		CommonTree BOP597_tree=null;
		CommonTree UOP598_tree=null;
		CommonTree TEST599_tree=null;
		CommonTree char_literal600_tree=null;
		CommonTree TILDE601_tree=null;
		CommonTree INC602_tree=null;
		CommonTree DEC603_tree=null;
		CommonTree ARITH_ASSIGN604_tree=null;
		CommonTree ESC_CHAR605_tree=null;
		CommonTree CARET606_tree=null;

		try {
			// com/caseystella/parser/bashast.g:364:2: ( num | name | NQSTR | EQUALS | PCT | PCTPCT | MINUS | DOT | DOTDOT | COLON | BOP | UOP | TEST | '_' | TILDE | INC | DEC | ARITH_ASSIGN | ESC_CHAR | CARET )
			int alt220=20;
			switch ( input.LA(1) ) {
			case DIGIT:
			case NUMBER:
				{
				alt220=1;
				}
				break;
			case 138:
				{
				int LA220_2 = input.LA(2);
				if ( (synpred337_bashast()) ) {
					alt220=2;
				}
				else if ( (synpred349_bashast()) ) {
					alt220=14;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NQSTR:
				{
				alt220=3;
				}
				break;
			case EQUALS:
				{
				alt220=4;
				}
				break;
			case PCT:
				{
				alt220=5;
				}
				break;
			case PCTPCT:
				{
				alt220=6;
				}
				break;
			case MINUS:
				{
				alt220=7;
				}
				break;
			case DOT:
				{
				alt220=8;
				}
				break;
			case DOTDOT:
				{
				alt220=9;
				}
				break;
			case COLON:
				{
				alt220=10;
				}
				break;
			case BOP:
				{
				alt220=11;
				}
				break;
			case UOP:
				{
				alt220=12;
				}
				break;
			case TEST:
				{
				alt220=13;
				}
				break;
			case LETTER:
			case NAME:
				{
				alt220=2;
				}
				break;
			case TILDE:
				{
				alt220=15;
				}
				break;
			case INC:
				{
				alt220=16;
				}
				break;
			case DEC:
				{
				alt220=17;
				}
				break;
			case ARITH_ASSIGN:
				{
				alt220=18;
				}
				break;
			case ESC_CHAR:
				{
				alt220=19;
				}
				break;
			case CARET:
				{
				alt220=20;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 220, 0, input);
				throw nvae;
			}
			switch (alt220) {
				case 1 :
					// com/caseystella/parser/bashast.g:364:4: num
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_num_in_ns_str_part_no_res3365);
					num587=num();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, num587.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:365:4: name
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_name_in_ns_str_part_no_res3370);
					name588=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, name588.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:365:9: NQSTR
					{
					root_0 = (CommonTree)adaptor.nil();


					NQSTR589=(Token)match(input,NQSTR,FOLLOW_NQSTR_in_ns_str_part_no_res3372); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NQSTR589_tree = (CommonTree)adaptor.create(NQSTR589);
					adaptor.addChild(root_0, NQSTR589_tree);
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:365:15: EQUALS
					{
					root_0 = (CommonTree)adaptor.nil();


					EQUALS590=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_ns_str_part_no_res3374); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQUALS590_tree = (CommonTree)adaptor.create(EQUALS590);
					adaptor.addChild(root_0, EQUALS590_tree);
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:365:22: PCT
					{
					root_0 = (CommonTree)adaptor.nil();


					PCT591=(Token)match(input,PCT,FOLLOW_PCT_in_ns_str_part_no_res3376); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PCT591_tree = (CommonTree)adaptor.create(PCT591);
					adaptor.addChild(root_0, PCT591_tree);
					}

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:365:26: PCTPCT
					{
					root_0 = (CommonTree)adaptor.nil();


					PCTPCT592=(Token)match(input,PCTPCT,FOLLOW_PCTPCT_in_ns_str_part_no_res3378); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PCTPCT592_tree = (CommonTree)adaptor.create(PCTPCT592);
					adaptor.addChild(root_0, PCTPCT592_tree);
					}

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:365:33: MINUS
					{
					root_0 = (CommonTree)adaptor.nil();


					MINUS593=(Token)match(input,MINUS,FOLLOW_MINUS_in_ns_str_part_no_res3380); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MINUS593_tree = (CommonTree)adaptor.create(MINUS593);
					adaptor.addChild(root_0, MINUS593_tree);
					}

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:365:39: DOT
					{
					root_0 = (CommonTree)adaptor.nil();


					DOT594=(Token)match(input,DOT,FOLLOW_DOT_in_ns_str_part_no_res3382); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT594_tree = (CommonTree)adaptor.create(DOT594);
					adaptor.addChild(root_0, DOT594_tree);
					}

					}
					break;
				case 9 :
					// com/caseystella/parser/bashast.g:365:43: DOTDOT
					{
					root_0 = (CommonTree)adaptor.nil();


					DOTDOT595=(Token)match(input,DOTDOT,FOLLOW_DOTDOT_in_ns_str_part_no_res3384); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOTDOT595_tree = (CommonTree)adaptor.create(DOTDOT595);
					adaptor.addChild(root_0, DOTDOT595_tree);
					}

					}
					break;
				case 10 :
					// com/caseystella/parser/bashast.g:365:50: COLON
					{
					root_0 = (CommonTree)adaptor.nil();


					COLON596=(Token)match(input,COLON,FOLLOW_COLON_in_ns_str_part_no_res3386); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLON596_tree = (CommonTree)adaptor.create(COLON596);
					adaptor.addChild(root_0, COLON596_tree);
					}

					}
					break;
				case 11 :
					// com/caseystella/parser/bashast.g:365:56: BOP
					{
					root_0 = (CommonTree)adaptor.nil();


					BOP597=(Token)match(input,BOP,FOLLOW_BOP_in_ns_str_part_no_res3388); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BOP597_tree = (CommonTree)adaptor.create(BOP597);
					adaptor.addChild(root_0, BOP597_tree);
					}

					}
					break;
				case 12 :
					// com/caseystella/parser/bashast.g:365:60: UOP
					{
					root_0 = (CommonTree)adaptor.nil();


					UOP598=(Token)match(input,UOP,FOLLOW_UOP_in_ns_str_part_no_res3390); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UOP598_tree = (CommonTree)adaptor.create(UOP598);
					adaptor.addChild(root_0, UOP598_tree);
					}

					}
					break;
				case 13 :
					// com/caseystella/parser/bashast.g:365:64: TEST
					{
					root_0 = (CommonTree)adaptor.nil();


					TEST599=(Token)match(input,TEST,FOLLOW_TEST_in_ns_str_part_no_res3392); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEST599_tree = (CommonTree)adaptor.create(TEST599);
					adaptor.addChild(root_0, TEST599_tree);
					}

					}
					break;
				case 14 :
					// com/caseystella/parser/bashast.g:365:69: '_'
					{
					root_0 = (CommonTree)adaptor.nil();


					char_literal600=(Token)match(input,138,FOLLOW_138_in_ns_str_part_no_res3394); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					char_literal600_tree = (CommonTree)adaptor.create(char_literal600);
					adaptor.addChild(root_0, char_literal600_tree);
					}

					}
					break;
				case 15 :
					// com/caseystella/parser/bashast.g:365:73: TILDE
					{
					root_0 = (CommonTree)adaptor.nil();


					TILDE601=(Token)match(input,TILDE,FOLLOW_TILDE_in_ns_str_part_no_res3396); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TILDE601_tree = (CommonTree)adaptor.create(TILDE601);
					adaptor.addChild(root_0, TILDE601_tree);
					}

					}
					break;
				case 16 :
					// com/caseystella/parser/bashast.g:365:79: INC
					{
					root_0 = (CommonTree)adaptor.nil();


					INC602=(Token)match(input,INC,FOLLOW_INC_in_ns_str_part_no_res3398); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INC602_tree = (CommonTree)adaptor.create(INC602);
					adaptor.addChild(root_0, INC602_tree);
					}

					}
					break;
				case 17 :
					// com/caseystella/parser/bashast.g:365:83: DEC
					{
					root_0 = (CommonTree)adaptor.nil();


					DEC603=(Token)match(input,DEC,FOLLOW_DEC_in_ns_str_part_no_res3400); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEC603_tree = (CommonTree)adaptor.create(DEC603);
					adaptor.addChild(root_0, DEC603_tree);
					}

					}
					break;
				case 18 :
					// com/caseystella/parser/bashast.g:365:87: ARITH_ASSIGN
					{
					root_0 = (CommonTree)adaptor.nil();


					ARITH_ASSIGN604=(Token)match(input,ARITH_ASSIGN,FOLLOW_ARITH_ASSIGN_in_ns_str_part_no_res3402); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ARITH_ASSIGN604_tree = (CommonTree)adaptor.create(ARITH_ASSIGN604);
					adaptor.addChild(root_0, ARITH_ASSIGN604_tree);
					}

					}
					break;
				case 19 :
					// com/caseystella/parser/bashast.g:365:100: ESC_CHAR
					{
					root_0 = (CommonTree)adaptor.nil();


					ESC_CHAR605=(Token)match(input,ESC_CHAR,FOLLOW_ESC_CHAR_in_ns_str_part_no_res3404); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ESC_CHAR605_tree = (CommonTree)adaptor.create(ESC_CHAR605);
					adaptor.addChild(root_0, ESC_CHAR605_tree);
					}

					}
					break;
				case 20 :
					// com/caseystella/parser/bashast.g:365:109: CARET
					{
					root_0 = (CommonTree)adaptor.nil();


					CARET606=(Token)match(input,CARET,FOLLOW_CARET_in_ns_str_part_no_res3406); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CARET606_tree = (CommonTree)adaptor.create(CARET606);
					adaptor.addChild(root_0, CARET606_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ns_str_part_no_res"


	public static class ns_str_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "ns_str"
	// com/caseystella/parser/bashast.g:367:1: ns_str : ( ns_str_part )* -> ^( STRING ( ns_str_part )* ) ;
	public final bashastParser.ns_str_return ns_str() throws RecognitionException {
		bashastParser.ns_str_return retval = new bashastParser.ns_str_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope ns_str_part607 =null;

		RewriteRuleSubtreeStream stream_ns_str_part=new RewriteRuleSubtreeStream(adaptor,"rule ns_str_part");

		try {
			// com/caseystella/parser/bashast.g:367:8: ( ( ns_str_part )* -> ^( STRING ( ns_str_part )* ) )
			// com/caseystella/parser/bashast.g:367:10: ( ns_str_part )*
			{
			// com/caseystella/parser/bashast.g:367:10: ( ns_str_part )*
			loop221:
			while (true) {
				int alt221=2;
				int LA221_0 = input.LA(1);
				if ( (LA221_0==ARITH_ASSIGN||LA221_0==BOP||(LA221_0 >= CARET && LA221_0 <= CASE)||LA221_0==COLON||(LA221_0 >= DEC && LA221_0 <= DO)||(LA221_0 >= DONE && LA221_0 <= DOTDOT)||(LA221_0 >= ELIF && LA221_0 <= ELSE)||LA221_0==EQUALS||(LA221_0 >= ESAC && LA221_0 <= ESC_CHAR)||LA221_0==FI||LA221_0==FOR||LA221_0==FUNCTION||(LA221_0 >= IF && LA221_0 <= INC)||LA221_0==LETTER||(LA221_0 >= MINUS && LA221_0 <= NAME)||(LA221_0 >= NQSTR && LA221_0 <= NUMBER)||(LA221_0 >= PCT && LA221_0 <= PCTPCT)||LA221_0==SELECT||(LA221_0 >= TEST && LA221_0 <= THEN)||(LA221_0 >= TILDE && LA221_0 <= TIME)||(LA221_0 >= UNTIL && LA221_0 <= UOP)||LA221_0==WHILE||LA221_0==138) ) {
					alt221=1;
				}

				switch (alt221) {
				case 1 :
					// com/caseystella/parser/bashast.g:367:10: ns_str_part
					{
					pushFollow(FOLLOW_ns_str_part_in_ns_str3414);
					ns_str_part607=ns_str_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ns_str_part.add(ns_str_part607.getTree());
					}
					break;

				default :
					break loop221;
				}
			}

			// AST REWRITE
			// elements: ns_str_part
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 367:23: -> ^( STRING ( ns_str_part )* )
			{
				// com/caseystella/parser/bashast.g:367:26: ^( STRING ( ns_str_part )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);
				// com/caseystella/parser/bashast.g:367:35: ( ns_str_part )*
				while ( stream_ns_str_part.hasNext() ) {
					adaptor.addChild(root_1, stream_ns_str_part.nextTree());
				}
				stream_ns_str_part.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ns_str"


	public static class dq_str_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dq_str_part"
	// com/caseystella/parser/bashast.g:369:1: dq_str_part : ( BLANK | EOL | AMP | LOGICAND | LOGICOR | LT | GT | PIPE | SQUOTE | SEMIC | COMMA | LPAREN | RPAREN | LLPAREN | RRPAREN | DOUBLE_SEMIC | LBRACE | RBRACE | TICK | LEQ | GEQ | str_part_with_pound );
	public final bashastParser.dq_str_part_return dq_str_part() throws RecognitionException {
		bashastParser.dq_str_part_return retval = new bashastParser.dq_str_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK608=null;
		Token EOL609=null;
		Token AMP610=null;
		Token LOGICAND611=null;
		Token LOGICOR612=null;
		Token LT613=null;
		Token GT614=null;
		Token PIPE615=null;
		Token SQUOTE616=null;
		Token SEMIC617=null;
		Token COMMA618=null;
		Token LPAREN619=null;
		Token RPAREN620=null;
		Token LLPAREN621=null;
		Token RRPAREN622=null;
		Token DOUBLE_SEMIC623=null;
		Token LBRACE624=null;
		Token RBRACE625=null;
		Token TICK626=null;
		Token LEQ627=null;
		Token GEQ628=null;
		ParserRuleReturnScope str_part_with_pound629 =null;

		CommonTree BLANK608_tree=null;
		CommonTree EOL609_tree=null;
		CommonTree AMP610_tree=null;
		CommonTree LOGICAND611_tree=null;
		CommonTree LOGICOR612_tree=null;
		CommonTree LT613_tree=null;
		CommonTree GT614_tree=null;
		CommonTree PIPE615_tree=null;
		CommonTree SQUOTE616_tree=null;
		CommonTree SEMIC617_tree=null;
		CommonTree COMMA618_tree=null;
		CommonTree LPAREN619_tree=null;
		CommonTree RPAREN620_tree=null;
		CommonTree LLPAREN621_tree=null;
		CommonTree RRPAREN622_tree=null;
		CommonTree DOUBLE_SEMIC623_tree=null;
		CommonTree LBRACE624_tree=null;
		CommonTree RBRACE625_tree=null;
		CommonTree TICK626_tree=null;
		CommonTree LEQ627_tree=null;
		CommonTree GEQ628_tree=null;

		try {
			// com/caseystella/parser/bashast.g:370:2: ( BLANK | EOL | AMP | LOGICAND | LOGICOR | LT | GT | PIPE | SQUOTE | SEMIC | COMMA | LPAREN | RPAREN | LLPAREN | RRPAREN | DOUBLE_SEMIC | LBRACE | RBRACE | TICK | LEQ | GEQ | str_part_with_pound )
			int alt222=22;
			switch ( input.LA(1) ) {
			case BLANK:
				{
				alt222=1;
				}
				break;
			case EOL:
				{
				alt222=2;
				}
				break;
			case AMP:
				{
				alt222=3;
				}
				break;
			case LOGICAND:
				{
				alt222=4;
				}
				break;
			case LOGICOR:
				{
				alt222=5;
				}
				break;
			case LT:
				{
				alt222=6;
				}
				break;
			case GT:
				{
				alt222=7;
				}
				break;
			case PIPE:
				{
				alt222=8;
				}
				break;
			case SQUOTE:
				{
				alt222=9;
				}
				break;
			case SEMIC:
				{
				alt222=10;
				}
				break;
			case COMMA:
				{
				alt222=11;
				}
				break;
			case LPAREN:
				{
				alt222=12;
				}
				break;
			case RPAREN:
				{
				alt222=13;
				}
				break;
			case LLPAREN:
				{
				alt222=14;
				}
				break;
			case RRPAREN:
				{
				alt222=15;
				}
				break;
			case DOUBLE_SEMIC:
				{
				alt222=16;
				}
				break;
			case LBRACE:
				{
				alt222=17;
				}
				break;
			case RBRACE:
				{
				alt222=18;
				}
				break;
			case TICK:
				{
				alt222=19;
				}
				break;
			case LEQ:
				{
				alt222=20;
				}
				break;
			case GEQ:
				{
				alt222=21;
				}
				break;
			case ARITH_ASSIGN:
			case BOP:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DIGIT:
			case DO:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LETTER:
			case MINUS:
			case NAME:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case POUND:
			case POUNDPOUND:
			case SELECT:
			case SLASH:
			case TEST:
			case THEN:
			case TILDE:
			case TIME:
			case UNTIL:
			case UOP:
			case WHILE:
			case 138:
				{
				alt222=22;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 222, 0, input);
				throw nvae;
			}
			switch (alt222) {
				case 1 :
					// com/caseystella/parser/bashast.g:370:4: BLANK
					{
					root_0 = (CommonTree)adaptor.nil();


					BLANK608=(Token)match(input,BLANK,FOLLOW_BLANK_in_dq_str_part3433); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BLANK608_tree = (CommonTree)adaptor.create(BLANK608);
					adaptor.addChild(root_0, BLANK608_tree);
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:370:10: EOL
					{
					root_0 = (CommonTree)adaptor.nil();


					EOL609=(Token)match(input,EOL,FOLLOW_EOL_in_dq_str_part3435); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EOL609_tree = (CommonTree)adaptor.create(EOL609);
					adaptor.addChild(root_0, EOL609_tree);
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:370:14: AMP
					{
					root_0 = (CommonTree)adaptor.nil();


					AMP610=(Token)match(input,AMP,FOLLOW_AMP_in_dq_str_part3437); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AMP610_tree = (CommonTree)adaptor.create(AMP610);
					adaptor.addChild(root_0, AMP610_tree);
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:370:18: LOGICAND
					{
					root_0 = (CommonTree)adaptor.nil();


					LOGICAND611=(Token)match(input,LOGICAND,FOLLOW_LOGICAND_in_dq_str_part3439); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOGICAND611_tree = (CommonTree)adaptor.create(LOGICAND611);
					adaptor.addChild(root_0, LOGICAND611_tree);
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:370:27: LOGICOR
					{
					root_0 = (CommonTree)adaptor.nil();


					LOGICOR612=(Token)match(input,LOGICOR,FOLLOW_LOGICOR_in_dq_str_part3441); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOGICOR612_tree = (CommonTree)adaptor.create(LOGICOR612);
					adaptor.addChild(root_0, LOGICOR612_tree);
					}

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:370:35: LT
					{
					root_0 = (CommonTree)adaptor.nil();


					LT613=(Token)match(input,LT,FOLLOW_LT_in_dq_str_part3443); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LT613_tree = (CommonTree)adaptor.create(LT613);
					adaptor.addChild(root_0, LT613_tree);
					}

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:370:38: GT
					{
					root_0 = (CommonTree)adaptor.nil();


					GT614=(Token)match(input,GT,FOLLOW_GT_in_dq_str_part3445); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					GT614_tree = (CommonTree)adaptor.create(GT614);
					adaptor.addChild(root_0, GT614_tree);
					}

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:370:41: PIPE
					{
					root_0 = (CommonTree)adaptor.nil();


					PIPE615=(Token)match(input,PIPE,FOLLOW_PIPE_in_dq_str_part3447); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PIPE615_tree = (CommonTree)adaptor.create(PIPE615);
					adaptor.addChild(root_0, PIPE615_tree);
					}

					}
					break;
				case 9 :
					// com/caseystella/parser/bashast.g:370:46: SQUOTE
					{
					root_0 = (CommonTree)adaptor.nil();


					SQUOTE616=(Token)match(input,SQUOTE,FOLLOW_SQUOTE_in_dq_str_part3449); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQUOTE616_tree = (CommonTree)adaptor.create(SQUOTE616);
					adaptor.addChild(root_0, SQUOTE616_tree);
					}

					}
					break;
				case 10 :
					// com/caseystella/parser/bashast.g:370:53: SEMIC
					{
					root_0 = (CommonTree)adaptor.nil();


					SEMIC617=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_dq_str_part3451); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SEMIC617_tree = (CommonTree)adaptor.create(SEMIC617);
					adaptor.addChild(root_0, SEMIC617_tree);
					}

					}
					break;
				case 11 :
					// com/caseystella/parser/bashast.g:370:59: COMMA
					{
					root_0 = (CommonTree)adaptor.nil();


					COMMA618=(Token)match(input,COMMA,FOLLOW_COMMA_in_dq_str_part3453); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA618_tree = (CommonTree)adaptor.create(COMMA618);
					adaptor.addChild(root_0, COMMA618_tree);
					}

					}
					break;
				case 12 :
					// com/caseystella/parser/bashast.g:370:65: LPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					LPAREN619=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_dq_str_part3455); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN619_tree = (CommonTree)adaptor.create(LPAREN619);
					adaptor.addChild(root_0, LPAREN619_tree);
					}

					}
					break;
				case 13 :
					// com/caseystella/parser/bashast.g:370:72: RPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					RPAREN620=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_dq_str_part3457); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN620_tree = (CommonTree)adaptor.create(RPAREN620);
					adaptor.addChild(root_0, RPAREN620_tree);
					}

					}
					break;
				case 14 :
					// com/caseystella/parser/bashast.g:370:79: LLPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					LLPAREN621=(Token)match(input,LLPAREN,FOLLOW_LLPAREN_in_dq_str_part3459); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LLPAREN621_tree = (CommonTree)adaptor.create(LLPAREN621);
					adaptor.addChild(root_0, LLPAREN621_tree);
					}

					}
					break;
				case 15 :
					// com/caseystella/parser/bashast.g:370:87: RRPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					RRPAREN622=(Token)match(input,RRPAREN,FOLLOW_RRPAREN_in_dq_str_part3461); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RRPAREN622_tree = (CommonTree)adaptor.create(RRPAREN622);
					adaptor.addChild(root_0, RRPAREN622_tree);
					}

					}
					break;
				case 16 :
					// com/caseystella/parser/bashast.g:370:95: DOUBLE_SEMIC
					{
					root_0 = (CommonTree)adaptor.nil();


					DOUBLE_SEMIC623=(Token)match(input,DOUBLE_SEMIC,FOLLOW_DOUBLE_SEMIC_in_dq_str_part3463); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOUBLE_SEMIC623_tree = (CommonTree)adaptor.create(DOUBLE_SEMIC623);
					adaptor.addChild(root_0, DOUBLE_SEMIC623_tree);
					}

					}
					break;
				case 17 :
					// com/caseystella/parser/bashast.g:370:108: LBRACE
					{
					root_0 = (CommonTree)adaptor.nil();


					LBRACE624=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_dq_str_part3465); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LBRACE624_tree = (CommonTree)adaptor.create(LBRACE624);
					adaptor.addChild(root_0, LBRACE624_tree);
					}

					}
					break;
				case 18 :
					// com/caseystella/parser/bashast.g:370:115: RBRACE
					{
					root_0 = (CommonTree)adaptor.nil();


					RBRACE625=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_dq_str_part3467); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RBRACE625_tree = (CommonTree)adaptor.create(RBRACE625);
					adaptor.addChild(root_0, RBRACE625_tree);
					}

					}
					break;
				case 19 :
					// com/caseystella/parser/bashast.g:370:122: TICK
					{
					root_0 = (CommonTree)adaptor.nil();


					TICK626=(Token)match(input,TICK,FOLLOW_TICK_in_dq_str_part3469); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TICK626_tree = (CommonTree)adaptor.create(TICK626);
					adaptor.addChild(root_0, TICK626_tree);
					}

					}
					break;
				case 20 :
					// com/caseystella/parser/bashast.g:370:127: LEQ
					{
					root_0 = (CommonTree)adaptor.nil();


					LEQ627=(Token)match(input,LEQ,FOLLOW_LEQ_in_dq_str_part3471); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LEQ627_tree = (CommonTree)adaptor.create(LEQ627);
					adaptor.addChild(root_0, LEQ627_tree);
					}

					}
					break;
				case 21 :
					// com/caseystella/parser/bashast.g:370:131: GEQ
					{
					root_0 = (CommonTree)adaptor.nil();


					GEQ628=(Token)match(input,GEQ,FOLLOW_GEQ_in_dq_str_part3473); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					GEQ628_tree = (CommonTree)adaptor.create(GEQ628);
					adaptor.addChild(root_0, GEQ628_tree);
					}

					}
					break;
				case 22 :
					// com/caseystella/parser/bashast.g:371:4: str_part_with_pound
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_str_part_with_pound_in_dq_str_part3478);
					str_part_with_pound629=str_part_with_pound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, str_part_with_pound629.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dq_str_part"


	public static class sq_str_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "sq_str_part"
	// com/caseystella/parser/bashast.g:373:1: sq_str_part : ( str_part_with_pound | BLANK | EOL | AMP | LOGICAND | LOGICOR | LT | GT | PIPE | QUOTE | SEMIC | COMMA | LPAREN | RPAREN | LLPAREN | RRPAREN | DOUBLE_SEMIC | LBRACE | RBRACE | DOLLAR | TICK | BOP | UOP );
	public final bashastParser.sq_str_part_return sq_str_part() throws RecognitionException {
		bashastParser.sq_str_part_return retval = new bashastParser.sq_str_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK631=null;
		Token EOL632=null;
		Token AMP633=null;
		Token LOGICAND634=null;
		Token LOGICOR635=null;
		Token LT636=null;
		Token GT637=null;
		Token PIPE638=null;
		Token QUOTE639=null;
		Token SEMIC640=null;
		Token COMMA641=null;
		Token LPAREN642=null;
		Token RPAREN643=null;
		Token LLPAREN644=null;
		Token RRPAREN645=null;
		Token DOUBLE_SEMIC646=null;
		Token LBRACE647=null;
		Token RBRACE648=null;
		Token DOLLAR649=null;
		Token TICK650=null;
		Token BOP651=null;
		Token UOP652=null;
		ParserRuleReturnScope str_part_with_pound630 =null;

		CommonTree BLANK631_tree=null;
		CommonTree EOL632_tree=null;
		CommonTree AMP633_tree=null;
		CommonTree LOGICAND634_tree=null;
		CommonTree LOGICOR635_tree=null;
		CommonTree LT636_tree=null;
		CommonTree GT637_tree=null;
		CommonTree PIPE638_tree=null;
		CommonTree QUOTE639_tree=null;
		CommonTree SEMIC640_tree=null;
		CommonTree COMMA641_tree=null;
		CommonTree LPAREN642_tree=null;
		CommonTree RPAREN643_tree=null;
		CommonTree LLPAREN644_tree=null;
		CommonTree RRPAREN645_tree=null;
		CommonTree DOUBLE_SEMIC646_tree=null;
		CommonTree LBRACE647_tree=null;
		CommonTree RBRACE648_tree=null;
		CommonTree DOLLAR649_tree=null;
		CommonTree TICK650_tree=null;
		CommonTree BOP651_tree=null;
		CommonTree UOP652_tree=null;

		try {
			// com/caseystella/parser/bashast.g:374:2: ( str_part_with_pound | BLANK | EOL | AMP | LOGICAND | LOGICOR | LT | GT | PIPE | QUOTE | SEMIC | COMMA | LPAREN | RPAREN | LLPAREN | RRPAREN | DOUBLE_SEMIC | LBRACE | RBRACE | DOLLAR | TICK | BOP | UOP )
			int alt223=23;
			switch ( input.LA(1) ) {
			case ARITH_ASSIGN:
			case CARET:
			case CASE:
			case COLON:
			case DEC:
			case DIGIT:
			case DO:
			case DONE:
			case DOT:
			case DOTDOT:
			case ELIF:
			case ELSE:
			case EQUALS:
			case ESAC:
			case ESC_CHAR:
			case FI:
			case FOR:
			case FUNCTION:
			case IF:
			case IN:
			case INC:
			case LETTER:
			case MINUS:
			case NAME:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case POUND:
			case POUNDPOUND:
			case SELECT:
			case SLASH:
			case TEST:
			case THEN:
			case TILDE:
			case TIME:
			case UNTIL:
			case WHILE:
			case 138:
				{
				alt223=1;
				}
				break;
			case BOP:
				{
				int LA223_2 = input.LA(2);
				if ( (synpred377_bashast()) ) {
					alt223=1;
				}
				else if ( (synpred398_bashast()) ) {
					alt223=22;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 223, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case UOP:
				{
				int LA223_3 = input.LA(2);
				if ( (synpred377_bashast()) ) {
					alt223=1;
				}
				else if ( (true) ) {
					alt223=23;
				}

				}
				break;
			case BLANK:
				{
				alt223=2;
				}
				break;
			case EOL:
				{
				alt223=3;
				}
				break;
			case AMP:
				{
				alt223=4;
				}
				break;
			case LOGICAND:
				{
				alt223=5;
				}
				break;
			case LOGICOR:
				{
				alt223=6;
				}
				break;
			case LT:
				{
				alt223=7;
				}
				break;
			case GT:
				{
				alt223=8;
				}
				break;
			case PIPE:
				{
				alt223=9;
				}
				break;
			case QUOTE:
				{
				alt223=10;
				}
				break;
			case SEMIC:
				{
				alt223=11;
				}
				break;
			case COMMA:
				{
				alt223=12;
				}
				break;
			case LPAREN:
				{
				alt223=13;
				}
				break;
			case RPAREN:
				{
				alt223=14;
				}
				break;
			case LLPAREN:
				{
				alt223=15;
				}
				break;
			case RRPAREN:
				{
				alt223=16;
				}
				break;
			case DOUBLE_SEMIC:
				{
				alt223=17;
				}
				break;
			case LBRACE:
				{
				alt223=18;
				}
				break;
			case RBRACE:
				{
				alt223=19;
				}
				break;
			case DOLLAR:
				{
				alt223=20;
				}
				break;
			case TICK:
				{
				alt223=21;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 223, 0, input);
				throw nvae;
			}
			switch (alt223) {
				case 1 :
					// com/caseystella/parser/bashast.g:374:4: str_part_with_pound
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_str_part_with_pound_in_sq_str_part3487);
					str_part_with_pound630=str_part_with_pound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, str_part_with_pound630.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:375:4: BLANK
					{
					root_0 = (CommonTree)adaptor.nil();


					BLANK631=(Token)match(input,BLANK,FOLLOW_BLANK_in_sq_str_part3492); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BLANK631_tree = (CommonTree)adaptor.create(BLANK631);
					adaptor.addChild(root_0, BLANK631_tree);
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:375:10: EOL
					{
					root_0 = (CommonTree)adaptor.nil();


					EOL632=(Token)match(input,EOL,FOLLOW_EOL_in_sq_str_part3494); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EOL632_tree = (CommonTree)adaptor.create(EOL632);
					adaptor.addChild(root_0, EOL632_tree);
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:375:14: AMP
					{
					root_0 = (CommonTree)adaptor.nil();


					AMP633=(Token)match(input,AMP,FOLLOW_AMP_in_sq_str_part3496); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AMP633_tree = (CommonTree)adaptor.create(AMP633);
					adaptor.addChild(root_0, AMP633_tree);
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:375:18: LOGICAND
					{
					root_0 = (CommonTree)adaptor.nil();


					LOGICAND634=(Token)match(input,LOGICAND,FOLLOW_LOGICAND_in_sq_str_part3498); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOGICAND634_tree = (CommonTree)adaptor.create(LOGICAND634);
					adaptor.addChild(root_0, LOGICAND634_tree);
					}

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:375:27: LOGICOR
					{
					root_0 = (CommonTree)adaptor.nil();


					LOGICOR635=(Token)match(input,LOGICOR,FOLLOW_LOGICOR_in_sq_str_part3500); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOGICOR635_tree = (CommonTree)adaptor.create(LOGICOR635);
					adaptor.addChild(root_0, LOGICOR635_tree);
					}

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:375:35: LT
					{
					root_0 = (CommonTree)adaptor.nil();


					LT636=(Token)match(input,LT,FOLLOW_LT_in_sq_str_part3502); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LT636_tree = (CommonTree)adaptor.create(LT636);
					adaptor.addChild(root_0, LT636_tree);
					}

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:375:38: GT
					{
					root_0 = (CommonTree)adaptor.nil();


					GT637=(Token)match(input,GT,FOLLOW_GT_in_sq_str_part3504); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					GT637_tree = (CommonTree)adaptor.create(GT637);
					adaptor.addChild(root_0, GT637_tree);
					}

					}
					break;
				case 9 :
					// com/caseystella/parser/bashast.g:375:41: PIPE
					{
					root_0 = (CommonTree)adaptor.nil();


					PIPE638=(Token)match(input,PIPE,FOLLOW_PIPE_in_sq_str_part3506); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PIPE638_tree = (CommonTree)adaptor.create(PIPE638);
					adaptor.addChild(root_0, PIPE638_tree);
					}

					}
					break;
				case 10 :
					// com/caseystella/parser/bashast.g:375:46: QUOTE
					{
					root_0 = (CommonTree)adaptor.nil();


					QUOTE639=(Token)match(input,QUOTE,FOLLOW_QUOTE_in_sq_str_part3508); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUOTE639_tree = (CommonTree)adaptor.create(QUOTE639);
					adaptor.addChild(root_0, QUOTE639_tree);
					}

					}
					break;
				case 11 :
					// com/caseystella/parser/bashast.g:375:52: SEMIC
					{
					root_0 = (CommonTree)adaptor.nil();


					SEMIC640=(Token)match(input,SEMIC,FOLLOW_SEMIC_in_sq_str_part3510); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SEMIC640_tree = (CommonTree)adaptor.create(SEMIC640);
					adaptor.addChild(root_0, SEMIC640_tree);
					}

					}
					break;
				case 12 :
					// com/caseystella/parser/bashast.g:375:58: COMMA
					{
					root_0 = (CommonTree)adaptor.nil();


					COMMA641=(Token)match(input,COMMA,FOLLOW_COMMA_in_sq_str_part3512); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA641_tree = (CommonTree)adaptor.create(COMMA641);
					adaptor.addChild(root_0, COMMA641_tree);
					}

					}
					break;
				case 13 :
					// com/caseystella/parser/bashast.g:375:64: LPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					LPAREN642=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sq_str_part3514); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN642_tree = (CommonTree)adaptor.create(LPAREN642);
					adaptor.addChild(root_0, LPAREN642_tree);
					}

					}
					break;
				case 14 :
					// com/caseystella/parser/bashast.g:375:71: RPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					RPAREN643=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sq_str_part3516); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN643_tree = (CommonTree)adaptor.create(RPAREN643);
					adaptor.addChild(root_0, RPAREN643_tree);
					}

					}
					break;
				case 15 :
					// com/caseystella/parser/bashast.g:375:78: LLPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					LLPAREN644=(Token)match(input,LLPAREN,FOLLOW_LLPAREN_in_sq_str_part3518); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LLPAREN644_tree = (CommonTree)adaptor.create(LLPAREN644);
					adaptor.addChild(root_0, LLPAREN644_tree);
					}

					}
					break;
				case 16 :
					// com/caseystella/parser/bashast.g:375:86: RRPAREN
					{
					root_0 = (CommonTree)adaptor.nil();


					RRPAREN645=(Token)match(input,RRPAREN,FOLLOW_RRPAREN_in_sq_str_part3520); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RRPAREN645_tree = (CommonTree)adaptor.create(RRPAREN645);
					adaptor.addChild(root_0, RRPAREN645_tree);
					}

					}
					break;
				case 17 :
					// com/caseystella/parser/bashast.g:375:94: DOUBLE_SEMIC
					{
					root_0 = (CommonTree)adaptor.nil();


					DOUBLE_SEMIC646=(Token)match(input,DOUBLE_SEMIC,FOLLOW_DOUBLE_SEMIC_in_sq_str_part3522); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOUBLE_SEMIC646_tree = (CommonTree)adaptor.create(DOUBLE_SEMIC646);
					adaptor.addChild(root_0, DOUBLE_SEMIC646_tree);
					}

					}
					break;
				case 18 :
					// com/caseystella/parser/bashast.g:375:107: LBRACE
					{
					root_0 = (CommonTree)adaptor.nil();


					LBRACE647=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_sq_str_part3524); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LBRACE647_tree = (CommonTree)adaptor.create(LBRACE647);
					adaptor.addChild(root_0, LBRACE647_tree);
					}

					}
					break;
				case 19 :
					// com/caseystella/parser/bashast.g:375:114: RBRACE
					{
					root_0 = (CommonTree)adaptor.nil();


					RBRACE648=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_sq_str_part3526); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RBRACE648_tree = (CommonTree)adaptor.create(RBRACE648);
					adaptor.addChild(root_0, RBRACE648_tree);
					}

					}
					break;
				case 20 :
					// com/caseystella/parser/bashast.g:375:121: DOLLAR
					{
					root_0 = (CommonTree)adaptor.nil();


					DOLLAR649=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_sq_str_part3528); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOLLAR649_tree = (CommonTree)adaptor.create(DOLLAR649);
					adaptor.addChild(root_0, DOLLAR649_tree);
					}

					}
					break;
				case 21 :
					// com/caseystella/parser/bashast.g:375:128: TICK
					{
					root_0 = (CommonTree)adaptor.nil();


					TICK650=(Token)match(input,TICK,FOLLOW_TICK_in_sq_str_part3530); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TICK650_tree = (CommonTree)adaptor.create(TICK650);
					adaptor.addChild(root_0, TICK650_tree);
					}

					}
					break;
				case 22 :
					// com/caseystella/parser/bashast.g:375:133: BOP
					{
					root_0 = (CommonTree)adaptor.nil();


					BOP651=(Token)match(input,BOP,FOLLOW_BOP_in_sq_str_part3532); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BOP651_tree = (CommonTree)adaptor.create(BOP651);
					adaptor.addChild(root_0, BOP651_tree);
					}

					}
					break;
				case 23 :
					// com/caseystella/parser/bashast.g:375:137: UOP
					{
					root_0 = (CommonTree)adaptor.nil();


					UOP652=(Token)match(input,UOP,FOLLOW_UOP_in_sq_str_part3534); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UOP652_tree = (CommonTree)adaptor.create(UOP652);
					adaptor.addChild(root_0, UOP652_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sq_str_part"


	public static class fname_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fname"
	// com/caseystella/parser/bashast.g:377:1: fname : nqstr -> ^( STRING nqstr ) ;
	public final bashastParser.fname_return fname() throws RecognitionException {
		bashastParser.fname_return retval = new bashastParser.fname_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope nqstr653 =null;

		RewriteRuleSubtreeStream stream_nqstr=new RewriteRuleSubtreeStream(adaptor,"rule nqstr");

		try {
			// com/caseystella/parser/bashast.g:377:7: ( nqstr -> ^( STRING nqstr ) )
			// com/caseystella/parser/bashast.g:377:9: nqstr
			{
			pushFollow(FOLLOW_nqstr_in_fname3542);
			nqstr653=nqstr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_nqstr.add(nqstr653.getTree());
			// AST REWRITE
			// elements: nqstr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 377:15: -> ^( STRING nqstr )
			{
				// com/caseystella/parser/bashast.g:377:18: ^( STRING nqstr )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);
				adaptor.addChild(root_1, stream_nqstr.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fname"


	public static class fname_no_res_word_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "fname_no_res_word"
	// com/caseystella/parser/bashast.g:379:1: fname_no_res_word : nqstr_no_res_word -> ^( STRING nqstr_no_res_word ) ;
	public final bashastParser.fname_no_res_word_return fname_no_res_word() throws RecognitionException {
		bashastParser.fname_no_res_word_return retval = new bashastParser.fname_no_res_word_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope nqstr_no_res_word654 =null;

		RewriteRuleSubtreeStream stream_nqstr_no_res_word=new RewriteRuleSubtreeStream(adaptor,"rule nqstr_no_res_word");

		try {
			// com/caseystella/parser/bashast.g:380:2: ( nqstr_no_res_word -> ^( STRING nqstr_no_res_word ) )
			// com/caseystella/parser/bashast.g:380:4: nqstr_no_res_word
			{
			pushFollow(FOLLOW_nqstr_no_res_word_in_fname_no_res_word3559);
			nqstr_no_res_word654=nqstr_no_res_word();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_nqstr_no_res_word.add(nqstr_no_res_word654.getTree());
			// AST REWRITE
			// elements: nqstr_no_res_word
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 380:22: -> ^( STRING nqstr_no_res_word )
			{
				// com/caseystella/parser/bashast.g:380:25: ^( STRING nqstr_no_res_word )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);
				adaptor.addChild(root_1, stream_nqstr_no_res_word.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fname_no_res_word"


	public static class nqstr_no_res_word_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "nqstr_no_res_word"
	// com/caseystella/parser/bashast.g:382:1: nqstr_no_res_word : ( res_word_str ( no_res_word_part | str_part_with_pound )+ | no_res_word_part ( no_res_word_part | str_part_with_pound )* );
	public final bashastParser.nqstr_no_res_word_return nqstr_no_res_word() throws RecognitionException {
		bashastParser.nqstr_no_res_word_return retval = new bashastParser.nqstr_no_res_word_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope res_word_str655 =null;
		ParserRuleReturnScope no_res_word_part656 =null;
		ParserRuleReturnScope str_part_with_pound657 =null;
		ParserRuleReturnScope no_res_word_part658 =null;
		ParserRuleReturnScope no_res_word_part659 =null;
		ParserRuleReturnScope str_part_with_pound660 =null;


		try {
			// com/caseystella/parser/bashast.g:383:2: ( res_word_str ( no_res_word_part | str_part_with_pound )+ | no_res_word_part ( no_res_word_part | str_part_with_pound )* )
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==CASE||LA226_0==DO||LA226_0==DONE||(LA226_0 >= ELIF && LA226_0 <= ELSE)||LA226_0==ESAC||LA226_0==FI||LA226_0==FOR||LA226_0==FUNCTION||(LA226_0 >= IF && LA226_0 <= IN)||LA226_0==SELECT||LA226_0==THEN||LA226_0==TIME||LA226_0==UNTIL||LA226_0==WHILE) ) {
				alt226=1;
			}
			else if ( (LA226_0==ARITH_ASSIGN||(LA226_0 >= AT && LA226_0 <= BANG)||LA226_0==BOP||LA226_0==CARET||LA226_0==COLON||(LA226_0 >= DEC && LA226_0 <= DIGIT)||LA226_0==DOLLAR||(LA226_0 >= DOT && LA226_0 <= DOTDOT)||LA226_0==EQUALS||LA226_0==ESC_CHAR||LA226_0==INC||LA226_0==LETTER||LA226_0==LSQUARE||(LA226_0 >= MINUS && LA226_0 <= NAME)||(LA226_0 >= NQSTR && LA226_0 <= NUMBER)||(LA226_0 >= PCT && LA226_0 <= PCTPCT)||LA226_0==PLUS||(LA226_0 >= QMARK && LA226_0 <= QUOTE)||LA226_0==RSQUARE||(LA226_0 >= SLASH && LA226_0 <= SQUOTE)||LA226_0==TEST||(LA226_0 >= TICK && LA226_0 <= TILDE)||LA226_0==TIMES||LA226_0==UOP||LA226_0==138) ) {
				alt226=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 226, 0, input);
				throw nvae;
			}

			switch (alt226) {
				case 1 :
					// com/caseystella/parser/bashast.g:383:4: res_word_str ( no_res_word_part | str_part_with_pound )+
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_res_word_str_in_nqstr_no_res_word3576);
					res_word_str655=res_word_str();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, res_word_str655.getTree());

					// com/caseystella/parser/bashast.g:383:17: ( no_res_word_part | str_part_with_pound )+
					int cnt224=0;
					loop224:
					while (true) {
						int alt224=3;
						switch ( input.LA(1) ) {
						case DIGIT:
							{
							int LA224_2 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case TICK:
							{
							int LA224_3 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}

							}
							break;
						case AT:
						case BANG:
						case DOLLAR:
						case LSQUARE:
						case PLUS:
						case QMARK:
						case QUOTE:
						case RSQUARE:
						case SQUOTE:
						case TIMES:
							{
							alt224=1;
							}
							break;
						case NUMBER:
							{
							int LA224_5 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case 138:
							{
							int LA224_6 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case NQSTR:
							{
							int LA224_7 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case EQUALS:
							{
							int LA224_8 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case PCT:
							{
							int LA224_9 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case PCTPCT:
							{
							int LA224_10 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case MINUS:
							{
							int LA224_11 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case DOT:
							{
							int LA224_12 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case DOTDOT:
							{
							int LA224_13 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case COLON:
							{
							int LA224_14 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case BOP:
							{
							int LA224_15 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case UOP:
							{
							int LA224_16 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case TEST:
							{
							int LA224_17 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case LETTER:
						case NAME:
							{
							int LA224_18 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case TILDE:
							{
							int LA224_19 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case INC:
							{
							int LA224_20 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case DEC:
							{
							int LA224_21 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case ARITH_ASSIGN:
							{
							int LA224_22 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case ESC_CHAR:
							{
							int LA224_23 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case CARET:
							{
							int LA224_24 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case SLASH:
							{
							int LA224_25 = input.LA(2);
							if ( (synpred399_bashast()) ) {
								alt224=1;
							}
							else if ( (synpred400_bashast()) ) {
								alt224=2;
							}

							}
							break;
						case CASE:
						case DO:
						case DONE:
						case ELIF:
						case ELSE:
						case ESAC:
						case FI:
						case FOR:
						case FUNCTION:
						case IF:
						case IN:
						case POUND:
						case POUNDPOUND:
						case SELECT:
						case THEN:
						case TIME:
						case UNTIL:
						case WHILE:
							{
							alt224=2;
							}
							break;
						}
						switch (alt224) {
						case 1 :
							// com/caseystella/parser/bashast.g:383:18: no_res_word_part
							{
							pushFollow(FOLLOW_no_res_word_part_in_nqstr_no_res_word3579);
							no_res_word_part656=no_res_word_part();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, no_res_word_part656.getTree());

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:383:35: str_part_with_pound
							{
							pushFollow(FOLLOW_str_part_with_pound_in_nqstr_no_res_word3581);
							str_part_with_pound657=str_part_with_pound();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, str_part_with_pound657.getTree());

							}
							break;

						default :
							if ( cnt224 >= 1 ) break loop224;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(224, input);
							throw eee;
						}
						cnt224++;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:384:4: no_res_word_part ( no_res_word_part | str_part_with_pound )*
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_no_res_word_part_in_nqstr_no_res_word3588);
					no_res_word_part658=no_res_word_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, no_res_word_part658.getTree());

					// com/caseystella/parser/bashast.g:384:21: ( no_res_word_part | str_part_with_pound )*
					loop225:
					while (true) {
						int alt225=3;
						switch ( input.LA(1) ) {
						case DIGIT:
							{
							int LA225_2 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case TICK:
							{
							int LA225_3 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}

							}
							break;
						case AT:
						case BANG:
						case DOLLAR:
						case LSQUARE:
						case PLUS:
						case QMARK:
						case QUOTE:
						case RSQUARE:
						case SQUOTE:
						case TIMES:
							{
							alt225=1;
							}
							break;
						case NUMBER:
							{
							int LA225_5 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case 138:
							{
							int LA225_6 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case NQSTR:
							{
							int LA225_7 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case EQUALS:
							{
							int LA225_8 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case PCT:
							{
							int LA225_9 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case PCTPCT:
							{
							int LA225_10 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case MINUS:
							{
							int LA225_11 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case DOT:
							{
							int LA225_12 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case DOTDOT:
							{
							int LA225_13 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case COLON:
							{
							int LA225_14 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case BOP:
							{
							int LA225_15 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case UOP:
							{
							int LA225_16 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case TEST:
							{
							int LA225_17 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case LETTER:
						case NAME:
							{
							int LA225_18 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case TILDE:
							{
							int LA225_19 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case INC:
							{
							int LA225_20 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case DEC:
							{
							int LA225_21 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case ARITH_ASSIGN:
							{
							int LA225_22 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case ESC_CHAR:
							{
							int LA225_23 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case CARET:
							{
							int LA225_24 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case SLASH:
							{
							int LA225_25 = input.LA(2);
							if ( (synpred402_bashast()) ) {
								alt225=1;
							}
							else if ( (synpred403_bashast()) ) {
								alt225=2;
							}

							}
							break;
						case CASE:
						case DO:
						case DONE:
						case ELIF:
						case ELSE:
						case ESAC:
						case FI:
						case FOR:
						case FUNCTION:
						case IF:
						case IN:
						case POUND:
						case POUNDPOUND:
						case SELECT:
						case THEN:
						case TIME:
						case UNTIL:
						case WHILE:
							{
							alt225=2;
							}
							break;
						}
						switch (alt225) {
						case 1 :
							// com/caseystella/parser/bashast.g:384:22: no_res_word_part
							{
							pushFollow(FOLLOW_no_res_word_part_in_nqstr_no_res_word3591);
							no_res_word_part659=no_res_word_part();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, no_res_word_part659.getTree());

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:384:39: str_part_with_pound
							{
							pushFollow(FOLLOW_str_part_with_pound_in_nqstr_no_res_word3593);
							str_part_with_pound660=str_part_with_pound();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, str_part_with_pound660.getTree());

							}
							break;

						default :
							break loop225;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nqstr_no_res_word"


	public static class no_res_word_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "no_res_word_part"
	// com/caseystella/parser/bashast.g:386:1: no_res_word_part : ( bracket_pattern_match | extended_pattern_match | var_ref | command_sub | arithmetic_expansion | dqstr | sqstr | ns_str_part_no_res | SLASH | pattern_match_trigger );
	public final bashastParser.no_res_word_part_return no_res_word_part() throws RecognitionException {
		bashastParser.no_res_word_part_return retval = new bashastParser.no_res_word_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token SLASH669=null;
		ParserRuleReturnScope bracket_pattern_match661 =null;
		ParserRuleReturnScope extended_pattern_match662 =null;
		ParserRuleReturnScope var_ref663 =null;
		ParserRuleReturnScope command_sub664 =null;
		ParserRuleReturnScope arithmetic_expansion665 =null;
		ParserRuleReturnScope dqstr666 =null;
		ParserRuleReturnScope sqstr667 =null;
		ParserRuleReturnScope ns_str_part_no_res668 =null;
		ParserRuleReturnScope pattern_match_trigger670 =null;

		CommonTree SLASH669_tree=null;

		try {
			// com/caseystella/parser/bashast.g:387:2: ( bracket_pattern_match | extended_pattern_match | var_ref | command_sub | arithmetic_expansion | dqstr | sqstr | ns_str_part_no_res | SLASH | pattern_match_trigger )
			int alt227=10;
			switch ( input.LA(1) ) {
			case LSQUARE:
				{
				int LA227_1 = input.LA(2);
				if ( (synpred404_bashast()) ) {
					alt227=1;
				}
				else if ( (true) ) {
					alt227=10;
				}

				}
				break;
			case QMARK:
				{
				int LA227_2 = input.LA(2);
				if ( (synpred405_bashast()) ) {
					alt227=2;
				}
				else if ( (true) ) {
					alt227=10;
				}

				}
				break;
			case TIMES:
				{
				int LA227_3 = input.LA(2);
				if ( (synpred405_bashast()) ) {
					alt227=2;
				}
				else if ( (true) ) {
					alt227=10;
				}

				}
				break;
			case PLUS:
				{
				int LA227_4 = input.LA(2);
				if ( (synpred405_bashast()) ) {
					alt227=2;
				}
				else if ( (true) ) {
					alt227=10;
				}

				}
				break;
			case AT:
				{
				int LA227_5 = input.LA(2);
				if ( (synpred405_bashast()) ) {
					alt227=2;
				}
				else if ( (true) ) {
					alt227=10;
				}

				}
				break;
			case BANG:
				{
				alt227=2;
				}
				break;
			case DOLLAR:
				{
				int LA227_7 = input.LA(2);
				if ( (synpred406_bashast()) ) {
					alt227=3;
				}
				else if ( (synpred407_bashast()) ) {
					alt227=4;
				}
				else if ( (synpred408_bashast()) ) {
					alt227=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 227, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TICK:
				{
				alt227=4;
				}
				break;
			case QUOTE:
				{
				alt227=6;
				}
				break;
			case SQUOTE:
				{
				alt227=7;
				}
				break;
			case ARITH_ASSIGN:
			case BOP:
			case CARET:
			case COLON:
			case DEC:
			case DIGIT:
			case DOT:
			case DOTDOT:
			case EQUALS:
			case ESC_CHAR:
			case INC:
			case LETTER:
			case MINUS:
			case NAME:
			case NQSTR:
			case NUMBER:
			case PCT:
			case PCTPCT:
			case TEST:
			case TILDE:
			case UOP:
			case 138:
				{
				alt227=8;
				}
				break;
			case SLASH:
				{
				alt227=9;
				}
				break;
			case RSQUARE:
				{
				alt227=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 227, 0, input);
				throw nvae;
			}
			switch (alt227) {
				case 1 :
					// com/caseystella/parser/bashast.g:387:4: bracket_pattern_match
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_bracket_pattern_match_in_no_res_word_part3604);
					bracket_pattern_match661=bracket_pattern_match();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_pattern_match661.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:388:4: extended_pattern_match
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_extended_pattern_match_in_no_res_word_part3609);
					extended_pattern_match662=extended_pattern_match();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, extended_pattern_match662.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:389:4: var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_ref_in_no_res_word_part3614);
					var_ref663=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref663.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:390:4: command_sub
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_command_sub_in_no_res_word_part3619);
					command_sub664=command_sub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, command_sub664.getTree());

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:391:4: arithmetic_expansion
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arithmetic_expansion_in_no_res_word_part3624);
					arithmetic_expansion665=arithmetic_expansion();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_expansion665.getTree());

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:392:4: dqstr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dqstr_in_no_res_word_part3629);
					dqstr666=dqstr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dqstr666.getTree());

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:393:4: sqstr
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_sqstr_in_no_res_word_part3634);
					sqstr667=sqstr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, sqstr667.getTree());

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:394:4: ns_str_part_no_res
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_ns_str_part_no_res_in_no_res_word_part3639);
					ns_str_part_no_res668=ns_str_part_no_res();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ns_str_part_no_res668.getTree());

					}
					break;
				case 9 :
					// com/caseystella/parser/bashast.g:395:4: SLASH
					{
					root_0 = (CommonTree)adaptor.nil();


					SLASH669=(Token)match(input,SLASH,FOLLOW_SLASH_in_no_res_word_part3644); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLASH669_tree = (CommonTree)adaptor.create(SLASH669);
					adaptor.addChild(root_0, SLASH669_tree);
					}

					}
					break;
				case 10 :
					// com/caseystella/parser/bashast.g:396:4: pattern_match_trigger
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_pattern_match_trigger_in_no_res_word_part3649);
					pattern_match_trigger670=pattern_match_trigger();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_match_trigger670.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "no_res_word_part"


	public static class nqstr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "nqstr"
	// com/caseystella/parser/bashast.g:398:1: nqstr : ( bracket_pattern_match | extended_pattern_match | var_ref | command_sub | arithmetic_expansion | dqstr | sqstr | ( str_part ( str_part_with_pound )* ) | pattern_match_trigger | BANG )+ ;
	public final bashastParser.nqstr_return nqstr() throws RecognitionException {
		bashastParser.nqstr_return retval = new bashastParser.nqstr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BANG681=null;
		ParserRuleReturnScope bracket_pattern_match671 =null;
		ParserRuleReturnScope extended_pattern_match672 =null;
		ParserRuleReturnScope var_ref673 =null;
		ParserRuleReturnScope command_sub674 =null;
		ParserRuleReturnScope arithmetic_expansion675 =null;
		ParserRuleReturnScope dqstr676 =null;
		ParserRuleReturnScope sqstr677 =null;
		ParserRuleReturnScope str_part678 =null;
		ParserRuleReturnScope str_part_with_pound679 =null;
		ParserRuleReturnScope pattern_match_trigger680 =null;

		CommonTree BANG681_tree=null;

		try {
			// com/caseystella/parser/bashast.g:398:7: ( ( bracket_pattern_match | extended_pattern_match | var_ref | command_sub | arithmetic_expansion | dqstr | sqstr | ( str_part ( str_part_with_pound )* ) | pattern_match_trigger | BANG )+ )
			// com/caseystella/parser/bashast.g:398:9: ( bracket_pattern_match | extended_pattern_match | var_ref | command_sub | arithmetic_expansion | dqstr | sqstr | ( str_part ( str_part_with_pound )* ) | pattern_match_trigger | BANG )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// com/caseystella/parser/bashast.g:398:9: ( bracket_pattern_match | extended_pattern_match | var_ref | command_sub | arithmetic_expansion | dqstr | sqstr | ( str_part ( str_part_with_pound )* ) | pattern_match_trigger | BANG )+
			int cnt229=0;
			loop229:
			while (true) {
				int alt229=11;
				switch ( input.LA(1) ) {
				case LSQUARE:
					{
					int LA229_2 = input.LA(2);
					if ( (synpred413_bashast()) ) {
						alt229=1;
					}
					else if ( (synpred422_bashast()) ) {
						alt229=9;
					}

					}
					break;
				case QMARK:
					{
					int LA229_3 = input.LA(2);
					if ( (synpred414_bashast()) ) {
						alt229=2;
					}
					else if ( (synpred422_bashast()) ) {
						alt229=9;
					}

					}
					break;
				case TIMES:
					{
					int LA229_4 = input.LA(2);
					if ( (synpred414_bashast()) ) {
						alt229=2;
					}
					else if ( (synpred422_bashast()) ) {
						alt229=9;
					}

					}
					break;
				case PLUS:
					{
					int LA229_5 = input.LA(2);
					if ( (synpred414_bashast()) ) {
						alt229=2;
					}
					else if ( (synpred422_bashast()) ) {
						alt229=9;
					}

					}
					break;
				case AT:
					{
					int LA229_6 = input.LA(2);
					if ( (synpred414_bashast()) ) {
						alt229=2;
					}
					else if ( (synpred422_bashast()) ) {
						alt229=9;
					}

					}
					break;
				case BANG:
					{
					int LA229_7 = input.LA(2);
					if ( (synpred414_bashast()) ) {
						alt229=2;
					}
					else if ( (synpred423_bashast()) ) {
						alt229=10;
					}

					}
					break;
				case DOLLAR:
					{
					int LA229_8 = input.LA(2);
					if ( (synpred415_bashast()) ) {
						alt229=3;
					}
					else if ( (synpred416_bashast()) ) {
						alt229=4;
					}
					else if ( (synpred417_bashast()) ) {
						alt229=5;
					}

					}
					break;
				case TICK:
					{
					int LA229_9 = input.LA(2);
					if ( (synpred416_bashast()) ) {
						alt229=4;
					}

					}
					break;
				case QUOTE:
					{
					int LA229_10 = input.LA(2);
					if ( (synpred418_bashast()) ) {
						alt229=6;
					}

					}
					break;
				case SQUOTE:
					{
					int LA229_11 = input.LA(2);
					if ( (synpred419_bashast()) ) {
						alt229=7;
					}

					}
					break;
				case DIGIT:
					{
					int LA229_12 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case 138:
					{
					int LA229_13 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case NQSTR:
					{
					int LA229_14 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case EQUALS:
					{
					int LA229_15 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case PCT:
					{
					int LA229_16 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case PCTPCT:
					{
					int LA229_17 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case MINUS:
					{
					int LA229_18 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case DOT:
					{
					int LA229_19 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case DOTDOT:
					{
					int LA229_20 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case COLON:
					{
					int LA229_21 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case BOP:
					{
					int LA229_22 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case UOP:
					{
					int LA229_23 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case TEST:
					{
					int LA229_24 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case LETTER:
				case NAME:
					{
					int LA229_25 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case TILDE:
					{
					int LA229_26 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case INC:
					{
					int LA229_27 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case DEC:
					{
					int LA229_28 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case ARITH_ASSIGN:
					{
					int LA229_29 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case ESC_CHAR:
					{
					int LA229_30 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case CARET:
					{
					int LA229_31 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case CASE:
				case DO:
				case DONE:
				case ELIF:
				case ELSE:
				case ESAC:
				case FI:
				case FOR:
				case FUNCTION:
				case IF:
				case IN:
				case SELECT:
				case THEN:
				case TIME:
				case UNTIL:
				case WHILE:
					{
					int LA229_32 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case SLASH:
					{
					int LA229_33 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				case RSQUARE:
					{
					int LA229_34 = input.LA(2);
					if ( (synpred422_bashast()) ) {
						alt229=9;
					}

					}
					break;
				case NUMBER:
					{
					int LA229_35 = input.LA(2);
					if ( (synpred421_bashast()) ) {
						alt229=8;
					}

					}
					break;
				}
				switch (alt229) {
				case 1 :
					// com/caseystella/parser/bashast.g:398:10: bracket_pattern_match
					{
					pushFollow(FOLLOW_bracket_pattern_match_in_nqstr3658);
					bracket_pattern_match671=bracket_pattern_match();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_pattern_match671.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:398:32: extended_pattern_match
					{
					pushFollow(FOLLOW_extended_pattern_match_in_nqstr3660);
					extended_pattern_match672=extended_pattern_match();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, extended_pattern_match672.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:398:55: var_ref
					{
					pushFollow(FOLLOW_var_ref_in_nqstr3662);
					var_ref673=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref673.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:398:63: command_sub
					{
					pushFollow(FOLLOW_command_sub_in_nqstr3664);
					command_sub674=command_sub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, command_sub674.getTree());

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:398:75: arithmetic_expansion
					{
					pushFollow(FOLLOW_arithmetic_expansion_in_nqstr3666);
					arithmetic_expansion675=arithmetic_expansion();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_expansion675.getTree());

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:398:96: dqstr
					{
					pushFollow(FOLLOW_dqstr_in_nqstr3668);
					dqstr676=dqstr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dqstr676.getTree());

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:398:102: sqstr
					{
					pushFollow(FOLLOW_sqstr_in_nqstr3670);
					sqstr677=sqstr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, sqstr677.getTree());

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:398:108: ( str_part ( str_part_with_pound )* )
					{
					// com/caseystella/parser/bashast.g:398:108: ( str_part ( str_part_with_pound )* )
					// com/caseystella/parser/bashast.g:398:109: str_part ( str_part_with_pound )*
					{
					pushFollow(FOLLOW_str_part_in_nqstr3673);
					str_part678=str_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, str_part678.getTree());

					// com/caseystella/parser/bashast.g:398:118: ( str_part_with_pound )*
					loop228:
					while (true) {
						int alt228=2;
						switch ( input.LA(1) ) {
						case DIGIT:
							{
							int LA228_2 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case 138:
							{
							int LA228_3 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case NQSTR:
							{
							int LA228_4 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case EQUALS:
							{
							int LA228_5 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case PCT:
							{
							int LA228_6 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case PCTPCT:
							{
							int LA228_7 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case MINUS:
							{
							int LA228_8 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case DOT:
							{
							int LA228_9 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case DOTDOT:
							{
							int LA228_10 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case COLON:
							{
							int LA228_11 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case BOP:
							{
							int LA228_12 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case UOP:
							{
							int LA228_13 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case TEST:
							{
							int LA228_14 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case LETTER:
						case NAME:
							{
							int LA228_15 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case TILDE:
							{
							int LA228_16 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case INC:
							{
							int LA228_17 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case DEC:
							{
							int LA228_18 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case ARITH_ASSIGN:
							{
							int LA228_19 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case ESC_CHAR:
							{
							int LA228_20 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case CARET:
							{
							int LA228_21 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case CASE:
						case DO:
						case DONE:
						case ELIF:
						case ELSE:
						case ESAC:
						case FI:
						case FOR:
						case FUNCTION:
						case IF:
						case IN:
						case SELECT:
						case THEN:
						case TIME:
						case UNTIL:
						case WHILE:
							{
							int LA228_22 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case SLASH:
							{
							int LA228_23 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case NUMBER:
							{
							int LA228_24 = input.LA(2);
							if ( (synpred420_bashast()) ) {
								alt228=1;
							}

							}
							break;
						case POUND:
						case POUNDPOUND:
							{
							alt228=1;
							}
							break;
						}
						switch (alt228) {
						case 1 :
							// com/caseystella/parser/bashast.g:398:118: str_part_with_pound
							{
							pushFollow(FOLLOW_str_part_with_pound_in_nqstr3675);
							str_part_with_pound679=str_part_with_pound();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, str_part_with_pound679.getTree());

							}
							break;

						default :
							break loop228;
						}
					}

					}

					}
					break;
				case 9 :
					// com/caseystella/parser/bashast.g:398:140: pattern_match_trigger
					{
					pushFollow(FOLLOW_pattern_match_trigger_in_nqstr3679);
					pattern_match_trigger680=pattern_match_trigger();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_match_trigger680.getTree());

					}
					break;
				case 10 :
					// com/caseystella/parser/bashast.g:398:162: BANG
					{
					BANG681=(Token)match(input,BANG,FOLLOW_BANG_in_nqstr3681); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BANG681_tree = (CommonTree)adaptor.create(BANG681);
					adaptor.addChild(root_0, BANG681_tree);
					}

					}
					break;

				default :
					if ( cnt229 >= 1 ) break loop229;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(229, input);
					throw eee;
				}
				cnt229++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nqstr"


	public static class dqstr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dqstr"
	// com/caseystella/parser/bashast.g:400:1: dqstr : QUOTE ( dqstr_part )* QUOTE -> ^( DOUBLE_QUOTED_STRING ( dqstr_part )* ) ;
	public final bashastParser.dqstr_return dqstr() throws RecognitionException {
		bashastParser.dqstr_return retval = new bashastParser.dqstr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token QUOTE682=null;
		Token QUOTE684=null;
		ParserRuleReturnScope dqstr_part683 =null;

		CommonTree QUOTE682_tree=null;
		CommonTree QUOTE684_tree=null;
		RewriteRuleTokenStream stream_QUOTE=new RewriteRuleTokenStream(adaptor,"token QUOTE");
		RewriteRuleSubtreeStream stream_dqstr_part=new RewriteRuleSubtreeStream(adaptor,"rule dqstr_part");

		try {
			// com/caseystella/parser/bashast.g:400:7: ( QUOTE ( dqstr_part )* QUOTE -> ^( DOUBLE_QUOTED_STRING ( dqstr_part )* ) )
			// com/caseystella/parser/bashast.g:400:9: QUOTE ( dqstr_part )* QUOTE
			{
			QUOTE682=(Token)match(input,QUOTE,FOLLOW_QUOTE_in_dqstr3691); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_QUOTE.add(QUOTE682);

			// com/caseystella/parser/bashast.g:400:15: ( dqstr_part )*
			loop230:
			while (true) {
				int alt230=2;
				int LA230_0 = input.LA(1);
				if ( (LA230_0==AMP||LA230_0==ARITH_ASSIGN||(LA230_0 >= AT && LA230_0 <= BOP)||(LA230_0 >= CARET && LA230_0 <= CASE)||(LA230_0 >= COLON && LA230_0 <= COMMA)||(LA230_0 >= DEC && LA230_0 <= DOTDOT)||(LA230_0 >= DOUBLE_SEMIC && LA230_0 <= EQUALS)||(LA230_0 >= ESAC && LA230_0 <= ESC_CHAR)||LA230_0==FI||LA230_0==FOR||(LA230_0 >= FUNCTION && LA230_0 <= GT)||(LA230_0 >= IF && LA230_0 <= INC)||(LA230_0 >= LBRACE && LA230_0 <= LEQ)||LA230_0==LETTER||(LA230_0 >= LLPAREN && LA230_0 <= LPAREN)||(LA230_0 >= LSQUARE && LA230_0 <= LT)||(LA230_0 >= MINUS && LA230_0 <= NAME)||(LA230_0 >= NQSTR && LA230_0 <= NUMBER)||(LA230_0 >= PCT && LA230_0 <= PLUS)||(LA230_0 >= POUND && LA230_0 <= POUNDPOUND)||LA230_0==QMARK||LA230_0==RBRACE||(LA230_0 >= RPAREN && LA230_0 <= RRPAREN)||(LA230_0 >= RSQUARE && LA230_0 <= SEMIC)||(LA230_0 >= SLASH && LA230_0 <= SQUOTE)||(LA230_0 >= TEST && LA230_0 <= UOP)||LA230_0==WHILE||LA230_0==138) ) {
					alt230=1;
				}

				switch (alt230) {
				case 1 :
					// com/caseystella/parser/bashast.g:400:15: dqstr_part
					{
					pushFollow(FOLLOW_dqstr_part_in_dqstr3693);
					dqstr_part683=dqstr_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dqstr_part.add(dqstr_part683.getTree());
					}
					break;

				default :
					break loop230;
				}
			}

			QUOTE684=(Token)match(input,QUOTE,FOLLOW_QUOTE_in_dqstr3696); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_QUOTE.add(QUOTE684);

			// AST REWRITE
			// elements: dqstr_part
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 400:33: -> ^( DOUBLE_QUOTED_STRING ( dqstr_part )* )
			{
				// com/caseystella/parser/bashast.g:400:36: ^( DOUBLE_QUOTED_STRING ( dqstr_part )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOUBLE_QUOTED_STRING, "DOUBLE_QUOTED_STRING"), root_1);
				// com/caseystella/parser/bashast.g:400:59: ( dqstr_part )*
				while ( stream_dqstr_part.hasNext() ) {
					adaptor.addChild(root_1, stream_dqstr_part.nextTree());
				}
				stream_dqstr_part.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dqstr"


	public static class dqstr_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "dqstr_part"
	// com/caseystella/parser/bashast.g:401:1: dqstr_part : ( bracket_pattern_match | extended_pattern_match | var_ref | command_sub | arithmetic_expansion | dq_str_part | pattern_match_trigger | BANG );
	public final bashastParser.dqstr_part_return dqstr_part() throws RecognitionException {
		bashastParser.dqstr_part_return retval = new bashastParser.dqstr_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BANG692=null;
		ParserRuleReturnScope bracket_pattern_match685 =null;
		ParserRuleReturnScope extended_pattern_match686 =null;
		ParserRuleReturnScope var_ref687 =null;
		ParserRuleReturnScope command_sub688 =null;
		ParserRuleReturnScope arithmetic_expansion689 =null;
		ParserRuleReturnScope dq_str_part690 =null;
		ParserRuleReturnScope pattern_match_trigger691 =null;

		CommonTree BANG692_tree=null;

		try {
			// com/caseystella/parser/bashast.g:402:2: ( bracket_pattern_match | extended_pattern_match | var_ref | command_sub | arithmetic_expansion | dq_str_part | pattern_match_trigger | BANG )
			int alt231=8;
			alt231 = dfa231.predict(input);
			switch (alt231) {
				case 1 :
					// com/caseystella/parser/bashast.g:402:4: bracket_pattern_match
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_bracket_pattern_match_in_dqstr_part3713);
					bracket_pattern_match685=bracket_pattern_match();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_pattern_match685.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:403:4: extended_pattern_match
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_extended_pattern_match_in_dqstr_part3718);
					extended_pattern_match686=extended_pattern_match();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, extended_pattern_match686.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:404:4: var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_ref_in_dqstr_part3723);
					var_ref687=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref687.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:405:4: command_sub
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_command_sub_in_dqstr_part3728);
					command_sub688=command_sub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, command_sub688.getTree());

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:406:4: arithmetic_expansion
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arithmetic_expansion_in_dqstr_part3733);
					arithmetic_expansion689=arithmetic_expansion();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_expansion689.getTree());

					}
					break;
				case 6 :
					// com/caseystella/parser/bashast.g:407:4: dq_str_part
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_dq_str_part_in_dqstr_part3738);
					dq_str_part690=dq_str_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dq_str_part690.getTree());

					}
					break;
				case 7 :
					// com/caseystella/parser/bashast.g:408:4: pattern_match_trigger
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_pattern_match_trigger_in_dqstr_part3743);
					pattern_match_trigger691=pattern_match_trigger();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_match_trigger691.getTree());

					}
					break;
				case 8 :
					// com/caseystella/parser/bashast.g:409:4: BANG
					{
					root_0 = (CommonTree)adaptor.nil();


					BANG692=(Token)match(input,BANG,FOLLOW_BANG_in_dqstr_part3748); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BANG692_tree = (CommonTree)adaptor.create(BANG692);
					adaptor.addChild(root_0, BANG692_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dqstr_part"


	public static class sqstr_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "sqstr"
	// com/caseystella/parser/bashast.g:411:1: sqstr : SQUOTE ( sq_str_part )* SQUOTE -> ^( SINGLE_QUOTED_STRING ( sq_str_part )* ) ;
	public final bashastParser.sqstr_return sqstr() throws RecognitionException {
		bashastParser.sqstr_return retval = new bashastParser.sqstr_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token SQUOTE693=null;
		Token SQUOTE695=null;
		ParserRuleReturnScope sq_str_part694 =null;

		CommonTree SQUOTE693_tree=null;
		CommonTree SQUOTE695_tree=null;
		RewriteRuleTokenStream stream_SQUOTE=new RewriteRuleTokenStream(adaptor,"token SQUOTE");
		RewriteRuleSubtreeStream stream_sq_str_part=new RewriteRuleSubtreeStream(adaptor,"rule sq_str_part");

		try {
			// com/caseystella/parser/bashast.g:411:7: ( SQUOTE ( sq_str_part )* SQUOTE -> ^( SINGLE_QUOTED_STRING ( sq_str_part )* ) )
			// com/caseystella/parser/bashast.g:411:9: SQUOTE ( sq_str_part )* SQUOTE
			{
			SQUOTE693=(Token)match(input,SQUOTE,FOLLOW_SQUOTE_in_sqstr3756); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SQUOTE.add(SQUOTE693);

			// com/caseystella/parser/bashast.g:411:16: ( sq_str_part )*
			loop232:
			while (true) {
				int alt232=2;
				int LA232_0 = input.LA(1);
				if ( (LA232_0==AMP||LA232_0==ARITH_ASSIGN||(LA232_0 >= BLANK && LA232_0 <= BOP)||(LA232_0 >= CARET && LA232_0 <= CASE)||(LA232_0 >= COLON && LA232_0 <= COMMA)||(LA232_0 >= DEC && LA232_0 <= DOTDOT)||(LA232_0 >= DOUBLE_SEMIC && LA232_0 <= EQUALS)||(LA232_0 >= ESAC && LA232_0 <= ESC_CHAR)||LA232_0==FI||LA232_0==FOR||LA232_0==FUNCTION||LA232_0==GT||(LA232_0 >= IF && LA232_0 <= INC)||LA232_0==LBRACE||LA232_0==LETTER||(LA232_0 >= LLPAREN && LA232_0 <= LPAREN)||LA232_0==LT||(LA232_0 >= MINUS && LA232_0 <= NAME)||(LA232_0 >= NQSTR && LA232_0 <= NUMBER)||(LA232_0 >= PCT && LA232_0 <= PIPE)||(LA232_0 >= POUND && LA232_0 <= POUNDPOUND)||(LA232_0 >= QUOTE && LA232_0 <= RBRACE)||(LA232_0 >= RPAREN && LA232_0 <= RRPAREN)||(LA232_0 >= SELECT && LA232_0 <= SEMIC)||LA232_0==SLASH||(LA232_0 >= TEST && LA232_0 <= TIME)||(LA232_0 >= UNTIL && LA232_0 <= UOP)||LA232_0==WHILE||LA232_0==138) ) {
					alt232=1;
				}

				switch (alt232) {
				case 1 :
					// com/caseystella/parser/bashast.g:411:16: sq_str_part
					{
					pushFollow(FOLLOW_sq_str_part_in_sqstr3758);
					sq_str_part694=sq_str_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sq_str_part.add(sq_str_part694.getTree());
					}
					break;

				default :
					break loop232;
				}
			}

			SQUOTE695=(Token)match(input,SQUOTE,FOLLOW_SQUOTE_in_sqstr3761); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SQUOTE.add(SQUOTE695);

			// AST REWRITE
			// elements: sq_str_part
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 411:36: -> ^( SINGLE_QUOTED_STRING ( sq_str_part )* )
			{
				// com/caseystella/parser/bashast.g:411:39: ^( SINGLE_QUOTED_STRING ( sq_str_part )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SINGLE_QUOTED_STRING, "SINGLE_QUOTED_STRING"), root_1);
				// com/caseystella/parser/bashast.g:411:62: ( sq_str_part )*
				while ( stream_sq_str_part.hasNext() ) {
					adaptor.addChild(root_1, stream_sq_str_part.nextTree());
				}
				stream_sq_str_part.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqstr"


	public static class pattern_match_trigger_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pattern_match_trigger"
	// com/caseystella/parser/bashast.g:413:1: pattern_match_trigger : ( LSQUARE | RSQUARE | QMARK | PLUS | TIMES | AT );
	public final bashastParser.pattern_match_trigger_return pattern_match_trigger() throws RecognitionException {
		bashastParser.pattern_match_trigger_return retval = new bashastParser.pattern_match_trigger_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set696=null;

		CommonTree set696_tree=null;

		try {
			// com/caseystella/parser/bashast.g:414:2: ( LSQUARE | RSQUARE | QMARK | PLUS | TIMES | AT )
			// com/caseystella/parser/bashast.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set696=input.LT(1);
			if ( input.LA(1)==AT||input.LA(1)==LSQUARE||input.LA(1)==PLUS||input.LA(1)==QMARK||input.LA(1)==RSQUARE||input.LA(1)==TIMES ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set696));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pattern_match_trigger"


	public static class bracket_pattern_match_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "bracket_pattern_match"
	// com/caseystella/parser/bashast.g:421:1: bracket_pattern_match : ( LSQUARE RSQUARE ( BANG | CARET ) ( pattern_match )* RSQUARE -> ^( MATCH_ANY_EXCEPT RSQUARE ( pattern_match )* ) | LSQUARE RSQUARE ( pattern_match )* RSQUARE -> ^( MATCH_PATTERN RSQUARE ( pattern_match )* ) | LSQUARE ( BANG | CARET ) ( pattern_match )+ RSQUARE -> ^( MATCH_ANY_EXCEPT ( pattern_match )+ ) | LSQUARE ( pattern_match )+ RSQUARE -> ^( MATCH_PATTERN ( pattern_match )+ ) );
	public final bashastParser.bracket_pattern_match_return bracket_pattern_match() throws RecognitionException {
		bashastParser.bracket_pattern_match_return retval = new bashastParser.bracket_pattern_match_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LSQUARE697=null;
		Token RSQUARE698=null;
		Token BANG699=null;
		Token CARET700=null;
		Token RSQUARE702=null;
		Token LSQUARE703=null;
		Token RSQUARE704=null;
		Token RSQUARE706=null;
		Token LSQUARE707=null;
		Token BANG708=null;
		Token CARET709=null;
		Token RSQUARE711=null;
		Token LSQUARE712=null;
		Token RSQUARE714=null;
		ParserRuleReturnScope pattern_match701 =null;
		ParserRuleReturnScope pattern_match705 =null;
		ParserRuleReturnScope pattern_match710 =null;
		ParserRuleReturnScope pattern_match713 =null;

		CommonTree LSQUARE697_tree=null;
		CommonTree RSQUARE698_tree=null;
		CommonTree BANG699_tree=null;
		CommonTree CARET700_tree=null;
		CommonTree RSQUARE702_tree=null;
		CommonTree LSQUARE703_tree=null;
		CommonTree RSQUARE704_tree=null;
		CommonTree RSQUARE706_tree=null;
		CommonTree LSQUARE707_tree=null;
		CommonTree BANG708_tree=null;
		CommonTree CARET709_tree=null;
		CommonTree RSQUARE711_tree=null;
		CommonTree LSQUARE712_tree=null;
		CommonTree RSQUARE714_tree=null;
		RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
		RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
		RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
		RewriteRuleTokenStream stream_CARET=new RewriteRuleTokenStream(adaptor,"token CARET");
		RewriteRuleSubtreeStream stream_pattern_match=new RewriteRuleSubtreeStream(adaptor,"rule pattern_match");

		try {
			// com/caseystella/parser/bashast.g:422:2: ( LSQUARE RSQUARE ( BANG | CARET ) ( pattern_match )* RSQUARE -> ^( MATCH_ANY_EXCEPT RSQUARE ( pattern_match )* ) | LSQUARE RSQUARE ( pattern_match )* RSQUARE -> ^( MATCH_PATTERN RSQUARE ( pattern_match )* ) | LSQUARE ( BANG | CARET ) ( pattern_match )+ RSQUARE -> ^( MATCH_ANY_EXCEPT ( pattern_match )+ ) | LSQUARE ( pattern_match )+ RSQUARE -> ^( MATCH_PATTERN ( pattern_match )+ ) )
			int alt239=4;
			alt239 = dfa239.predict(input);
			switch (alt239) {
				case 1 :
					// com/caseystella/parser/bashast.g:422:4: LSQUARE RSQUARE ( BANG | CARET ) ( pattern_match )* RSQUARE
					{
					LSQUARE697=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_bracket_pattern_match3813); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE697);

					RSQUARE698=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_bracket_pattern_match3815); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE698);

					// com/caseystella/parser/bashast.g:422:20: ( BANG | CARET )
					int alt233=2;
					int LA233_0 = input.LA(1);
					if ( (LA233_0==BANG) ) {
						alt233=1;
					}
					else if ( (LA233_0==CARET) ) {
						alt233=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 233, 0, input);
						throw nvae;
					}

					switch (alt233) {
						case 1 :
							// com/caseystella/parser/bashast.g:422:21: BANG
							{
							BANG699=(Token)match(input,BANG,FOLLOW_BANG_in_bracket_pattern_match3818); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BANG.add(BANG699);

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:422:26: CARET
							{
							CARET700=(Token)match(input,CARET,FOLLOW_CARET_in_bracket_pattern_match3820); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CARET.add(CARET700);

							}
							break;

					}

					// com/caseystella/parser/bashast.g:422:33: ( pattern_match )*
					loop234:
					while (true) {
						int alt234=2;
						int LA234_0 = input.LA(1);
						if ( (LA234_0==ARITH_ASSIGN||LA234_0==BOP||(LA234_0 >= CARET && LA234_0 <= CASE)||LA234_0==COLON||(LA234_0 >= DEC && LA234_0 <= DO)||(LA234_0 >= DONE && LA234_0 <= DOTDOT)||(LA234_0 >= ELIF && LA234_0 <= ELSE)||LA234_0==EQUALS||(LA234_0 >= ESAC && LA234_0 <= ESC_CHAR)||LA234_0==FI||LA234_0==FOR||LA234_0==FUNCTION||(LA234_0 >= IF && LA234_0 <= INC)||LA234_0==LETTER||LA234_0==LSQUARE||(LA234_0 >= MINUS && LA234_0 <= NAME)||(LA234_0 >= NQSTR && LA234_0 <= NUMBER)||(LA234_0 >= PCT && LA234_0 <= PCTPCT)||LA234_0==SELECT||LA234_0==SLASH||(LA234_0 >= TEST && LA234_0 <= THEN)||(LA234_0 >= TILDE && LA234_0 <= TIME)||(LA234_0 >= UNTIL && LA234_0 <= UOP)||LA234_0==WHILE||LA234_0==138) ) {
							alt234=1;
						}

						switch (alt234) {
						case 1 :
							// com/caseystella/parser/bashast.g:422:33: pattern_match
							{
							pushFollow(FOLLOW_pattern_match_in_bracket_pattern_match3823);
							pattern_match701=pattern_match();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pattern_match.add(pattern_match701.getTree());
							}
							break;

						default :
							break loop234;
						}
					}

					RSQUARE702=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_bracket_pattern_match3826); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE702);

					// AST REWRITE
					// elements: pattern_match, RSQUARE
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 422:56: -> ^( MATCH_ANY_EXCEPT RSQUARE ( pattern_match )* )
					{
						// com/caseystella/parser/bashast.g:422:59: ^( MATCH_ANY_EXCEPT RSQUARE ( pattern_match )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_ANY_EXCEPT, "MATCH_ANY_EXCEPT"), root_1);
						adaptor.addChild(root_1, stream_RSQUARE.nextNode());
						// com/caseystella/parser/bashast.g:422:86: ( pattern_match )*
						while ( stream_pattern_match.hasNext() ) {
							adaptor.addChild(root_1, stream_pattern_match.nextTree());
						}
						stream_pattern_match.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:423:4: LSQUARE RSQUARE ( pattern_match )* RSQUARE
					{
					LSQUARE703=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_bracket_pattern_match3842); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE703);

					RSQUARE704=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_bracket_pattern_match3844); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE704);

					// com/caseystella/parser/bashast.g:423:20: ( pattern_match )*
					loop235:
					while (true) {
						int alt235=2;
						int LA235_0 = input.LA(1);
						if ( (LA235_0==ARITH_ASSIGN||LA235_0==BOP||(LA235_0 >= CARET && LA235_0 <= CASE)||LA235_0==COLON||(LA235_0 >= DEC && LA235_0 <= DO)||(LA235_0 >= DONE && LA235_0 <= DOTDOT)||(LA235_0 >= ELIF && LA235_0 <= ELSE)||LA235_0==EQUALS||(LA235_0 >= ESAC && LA235_0 <= ESC_CHAR)||LA235_0==FI||LA235_0==FOR||LA235_0==FUNCTION||(LA235_0 >= IF && LA235_0 <= INC)||LA235_0==LETTER||LA235_0==LSQUARE||(LA235_0 >= MINUS && LA235_0 <= NAME)||(LA235_0 >= NQSTR && LA235_0 <= NUMBER)||(LA235_0 >= PCT && LA235_0 <= PCTPCT)||LA235_0==SELECT||LA235_0==SLASH||(LA235_0 >= TEST && LA235_0 <= THEN)||(LA235_0 >= TILDE && LA235_0 <= TIME)||(LA235_0 >= UNTIL && LA235_0 <= UOP)||LA235_0==WHILE||LA235_0==138) ) {
							alt235=1;
						}

						switch (alt235) {
						case 1 :
							// com/caseystella/parser/bashast.g:423:20: pattern_match
							{
							pushFollow(FOLLOW_pattern_match_in_bracket_pattern_match3846);
							pattern_match705=pattern_match();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pattern_match.add(pattern_match705.getTree());
							}
							break;

						default :
							break loop235;
						}
					}

					RSQUARE706=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_bracket_pattern_match3849); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE706);

					// AST REWRITE
					// elements: RSQUARE, pattern_match
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 423:43: -> ^( MATCH_PATTERN RSQUARE ( pattern_match )* )
					{
						// com/caseystella/parser/bashast.g:423:46: ^( MATCH_PATTERN RSQUARE ( pattern_match )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_PATTERN, "MATCH_PATTERN"), root_1);
						adaptor.addChild(root_1, stream_RSQUARE.nextNode());
						// com/caseystella/parser/bashast.g:423:70: ( pattern_match )*
						while ( stream_pattern_match.hasNext() ) {
							adaptor.addChild(root_1, stream_pattern_match.nextTree());
						}
						stream_pattern_match.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:424:4: LSQUARE ( BANG | CARET ) ( pattern_match )+ RSQUARE
					{
					LSQUARE707=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_bracket_pattern_match3865); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE707);

					// com/caseystella/parser/bashast.g:424:12: ( BANG | CARET )
					int alt236=2;
					int LA236_0 = input.LA(1);
					if ( (LA236_0==BANG) ) {
						alt236=1;
					}
					else if ( (LA236_0==CARET) ) {
						alt236=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 236, 0, input);
						throw nvae;
					}

					switch (alt236) {
						case 1 :
							// com/caseystella/parser/bashast.g:424:13: BANG
							{
							BANG708=(Token)match(input,BANG,FOLLOW_BANG_in_bracket_pattern_match3868); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BANG.add(BANG708);

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:424:18: CARET
							{
							CARET709=(Token)match(input,CARET,FOLLOW_CARET_in_bracket_pattern_match3870); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_CARET.add(CARET709);

							}
							break;

					}

					// com/caseystella/parser/bashast.g:424:25: ( pattern_match )+
					int cnt237=0;
					loop237:
					while (true) {
						int alt237=2;
						int LA237_0 = input.LA(1);
						if ( (LA237_0==ARITH_ASSIGN||LA237_0==BOP||(LA237_0 >= CARET && LA237_0 <= CASE)||LA237_0==COLON||(LA237_0 >= DEC && LA237_0 <= DO)||(LA237_0 >= DONE && LA237_0 <= DOTDOT)||(LA237_0 >= ELIF && LA237_0 <= ELSE)||LA237_0==EQUALS||(LA237_0 >= ESAC && LA237_0 <= ESC_CHAR)||LA237_0==FI||LA237_0==FOR||LA237_0==FUNCTION||(LA237_0 >= IF && LA237_0 <= INC)||LA237_0==LETTER||LA237_0==LSQUARE||(LA237_0 >= MINUS && LA237_0 <= NAME)||(LA237_0 >= NQSTR && LA237_0 <= NUMBER)||(LA237_0 >= PCT && LA237_0 <= PCTPCT)||LA237_0==SELECT||LA237_0==SLASH||(LA237_0 >= TEST && LA237_0 <= THEN)||(LA237_0 >= TILDE && LA237_0 <= TIME)||(LA237_0 >= UNTIL && LA237_0 <= UOP)||LA237_0==WHILE||LA237_0==138) ) {
							alt237=1;
						}

						switch (alt237) {
						case 1 :
							// com/caseystella/parser/bashast.g:424:25: pattern_match
							{
							pushFollow(FOLLOW_pattern_match_in_bracket_pattern_match3873);
							pattern_match710=pattern_match();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pattern_match.add(pattern_match710.getTree());
							}
							break;

						default :
							if ( cnt237 >= 1 ) break loop237;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(237, input);
							throw eee;
						}
						cnt237++;
					}

					RSQUARE711=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_bracket_pattern_match3876); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE711);

					// AST REWRITE
					// elements: pattern_match
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 424:48: -> ^( MATCH_ANY_EXCEPT ( pattern_match )+ )
					{
						// com/caseystella/parser/bashast.g:424:51: ^( MATCH_ANY_EXCEPT ( pattern_match )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_ANY_EXCEPT, "MATCH_ANY_EXCEPT"), root_1);
						if ( !(stream_pattern_match.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_pattern_match.hasNext() ) {
							adaptor.addChild(root_1, stream_pattern_match.nextTree());
						}
						stream_pattern_match.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:425:4: LSQUARE ( pattern_match )+ RSQUARE
					{
					LSQUARE712=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_bracket_pattern_match3890); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE712);

					// com/caseystella/parser/bashast.g:425:12: ( pattern_match )+
					int cnt238=0;
					loop238:
					while (true) {
						int alt238=2;
						int LA238_0 = input.LA(1);
						if ( (LA238_0==ARITH_ASSIGN||LA238_0==BOP||(LA238_0 >= CARET && LA238_0 <= CASE)||LA238_0==COLON||(LA238_0 >= DEC && LA238_0 <= DO)||(LA238_0 >= DONE && LA238_0 <= DOTDOT)||(LA238_0 >= ELIF && LA238_0 <= ELSE)||LA238_0==EQUALS||(LA238_0 >= ESAC && LA238_0 <= ESC_CHAR)||LA238_0==FI||LA238_0==FOR||LA238_0==FUNCTION||(LA238_0 >= IF && LA238_0 <= INC)||LA238_0==LETTER||LA238_0==LSQUARE||(LA238_0 >= MINUS && LA238_0 <= NAME)||(LA238_0 >= NQSTR && LA238_0 <= NUMBER)||(LA238_0 >= PCT && LA238_0 <= PCTPCT)||LA238_0==SELECT||LA238_0==SLASH||(LA238_0 >= TEST && LA238_0 <= THEN)||(LA238_0 >= TILDE && LA238_0 <= TIME)||(LA238_0 >= UNTIL && LA238_0 <= UOP)||LA238_0==WHILE||LA238_0==138) ) {
							alt238=1;
						}

						switch (alt238) {
						case 1 :
							// com/caseystella/parser/bashast.g:425:12: pattern_match
							{
							pushFollow(FOLLOW_pattern_match_in_bracket_pattern_match3892);
							pattern_match713=pattern_match();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pattern_match.add(pattern_match713.getTree());
							}
							break;

						default :
							if ( cnt238 >= 1 ) break loop238;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(238, input);
							throw eee;
						}
						cnt238++;
					}

					RSQUARE714=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_bracket_pattern_match3895); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE714);

					// AST REWRITE
					// elements: pattern_match
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 425:35: -> ^( MATCH_PATTERN ( pattern_match )+ )
					{
						// com/caseystella/parser/bashast.g:425:38: ^( MATCH_PATTERN ( pattern_match )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_PATTERN, "MATCH_PATTERN"), root_1);
						if ( !(stream_pattern_match.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_pattern_match.hasNext() ) {
							adaptor.addChild(root_1, stream_pattern_match.nextTree());
						}
						stream_pattern_match.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bracket_pattern_match"


	public static class pattern_match_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pattern_match"
	// com/caseystella/parser/bashast.g:427:1: pattern_match : ( pattern_class_match | str_part ( str_part_with_pound )* );
	public final bashastParser.pattern_match_return pattern_match() throws RecognitionException {
		bashastParser.pattern_match_return retval = new bashastParser.pattern_match_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope pattern_class_match715 =null;
		ParserRuleReturnScope str_part716 =null;
		ParserRuleReturnScope str_part_with_pound717 =null;


		try {
			// com/caseystella/parser/bashast.g:428:2: ( pattern_class_match | str_part ( str_part_with_pound )* )
			int alt241=2;
			int LA241_0 = input.LA(1);
			if ( (LA241_0==LSQUARE) ) {
				alt241=1;
			}
			else if ( (LA241_0==ARITH_ASSIGN||LA241_0==BOP||(LA241_0 >= CARET && LA241_0 <= CASE)||LA241_0==COLON||(LA241_0 >= DEC && LA241_0 <= DO)||(LA241_0 >= DONE && LA241_0 <= DOTDOT)||(LA241_0 >= ELIF && LA241_0 <= ELSE)||LA241_0==EQUALS||(LA241_0 >= ESAC && LA241_0 <= ESC_CHAR)||LA241_0==FI||LA241_0==FOR||LA241_0==FUNCTION||(LA241_0 >= IF && LA241_0 <= INC)||LA241_0==LETTER||(LA241_0 >= MINUS && LA241_0 <= NAME)||(LA241_0 >= NQSTR && LA241_0 <= NUMBER)||(LA241_0 >= PCT && LA241_0 <= PCTPCT)||LA241_0==SELECT||LA241_0==SLASH||(LA241_0 >= TEST && LA241_0 <= THEN)||(LA241_0 >= TILDE && LA241_0 <= TIME)||(LA241_0 >= UNTIL && LA241_0 <= UOP)||LA241_0==WHILE||LA241_0==138) ) {
				alt241=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 241, 0, input);
				throw nvae;
			}

			switch (alt241) {
				case 1 :
					// com/caseystella/parser/bashast.g:428:4: pattern_class_match
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_pattern_class_match_in_pattern_match3913);
					pattern_class_match715=pattern_class_match();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern_class_match715.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:429:4: str_part ( str_part_with_pound )*
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_str_part_in_pattern_match3918);
					str_part716=str_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, str_part716.getTree());

					// com/caseystella/parser/bashast.g:429:13: ( str_part_with_pound )*
					loop240:
					while (true) {
						int alt240=2;
						switch ( input.LA(1) ) {
						case DIGIT:
						case NUMBER:
							{
							int LA240_2 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case 138:
							{
							int LA240_3 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case NQSTR:
							{
							int LA240_4 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case EQUALS:
							{
							int LA240_5 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case PCT:
							{
							int LA240_6 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case PCTPCT:
							{
							int LA240_7 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case MINUS:
							{
							int LA240_8 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case DOT:
							{
							int LA240_9 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case DOTDOT:
							{
							int LA240_10 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case COLON:
							{
							int LA240_11 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case BOP:
							{
							int LA240_12 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case UOP:
							{
							int LA240_13 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case TEST:
							{
							int LA240_14 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case LETTER:
						case NAME:
							{
							int LA240_15 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case TILDE:
							{
							int LA240_16 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case INC:
							{
							int LA240_17 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case DEC:
							{
							int LA240_18 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case ARITH_ASSIGN:
							{
							int LA240_19 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case ESC_CHAR:
							{
							int LA240_20 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case CARET:
							{
							int LA240_21 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case CASE:
						case DO:
						case DONE:
						case ELIF:
						case ELSE:
						case ESAC:
						case FI:
						case FOR:
						case FUNCTION:
						case IF:
						case IN:
						case SELECT:
						case THEN:
						case TIME:
						case UNTIL:
						case WHILE:
							{
							int LA240_22 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case SLASH:
							{
							int LA240_23 = input.LA(2);
							if ( (synpred448_bashast()) ) {
								alt240=1;
							}

							}
							break;
						case POUND:
						case POUNDPOUND:
							{
							alt240=1;
							}
							break;
						}
						switch (alt240) {
						case 1 :
							// com/caseystella/parser/bashast.g:429:13: str_part_with_pound
							{
							pushFollow(FOLLOW_str_part_with_pound_in_pattern_match3920);
							str_part_with_pound717=str_part_with_pound();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, str_part_with_pound717.getTree());

							}
							break;

						default :
							break loop240;
						}
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pattern_match"


	public static class pattern_class_match_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pattern_class_match"
	// com/caseystella/parser/bashast.g:431:1: pattern_class_match : ( LSQUARE COLON NAME COLON RSQUARE -> ^( CHARACTER_CLASS NAME ) | LSQUARE EQUALS pattern_char EQUALS RSQUARE -> ^( EQUIVALENCE_CLASS pattern_char ) | LSQUARE DOT NAME DOT RSQUARE -> ^( COLLATING_SYMBOL NAME ) );
	public final bashastParser.pattern_class_match_return pattern_class_match() throws RecognitionException {
		bashastParser.pattern_class_match_return retval = new bashastParser.pattern_class_match_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LSQUARE718=null;
		Token COLON719=null;
		Token NAME720=null;
		Token COLON721=null;
		Token RSQUARE722=null;
		Token LSQUARE723=null;
		Token EQUALS724=null;
		Token EQUALS726=null;
		Token RSQUARE727=null;
		Token LSQUARE728=null;
		Token DOT729=null;
		Token NAME730=null;
		Token DOT731=null;
		Token RSQUARE732=null;
		ParserRuleReturnScope pattern_char725 =null;

		CommonTree LSQUARE718_tree=null;
		CommonTree COLON719_tree=null;
		CommonTree NAME720_tree=null;
		CommonTree COLON721_tree=null;
		CommonTree RSQUARE722_tree=null;
		CommonTree LSQUARE723_tree=null;
		CommonTree EQUALS724_tree=null;
		CommonTree EQUALS726_tree=null;
		CommonTree RSQUARE727_tree=null;
		CommonTree LSQUARE728_tree=null;
		CommonTree DOT729_tree=null;
		CommonTree NAME730_tree=null;
		CommonTree DOT731_tree=null;
		CommonTree RSQUARE732_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
		RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
		RewriteRuleTokenStream stream_LSQUARE=new RewriteRuleTokenStream(adaptor,"token LSQUARE");
		RewriteRuleTokenStream stream_RSQUARE=new RewriteRuleTokenStream(adaptor,"token RSQUARE");
		RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_pattern_char=new RewriteRuleSubtreeStream(adaptor,"rule pattern_char");

		try {
			// com/caseystella/parser/bashast.g:432:2: ( LSQUARE COLON NAME COLON RSQUARE -> ^( CHARACTER_CLASS NAME ) | LSQUARE EQUALS pattern_char EQUALS RSQUARE -> ^( EQUIVALENCE_CLASS pattern_char ) | LSQUARE DOT NAME DOT RSQUARE -> ^( COLLATING_SYMBOL NAME ) )
			int alt242=3;
			int LA242_0 = input.LA(1);
			if ( (LA242_0==LSQUARE) ) {
				switch ( input.LA(2) ) {
				case COLON:
					{
					alt242=1;
					}
					break;
				case EQUALS:
					{
					alt242=2;
					}
					break;
				case DOT:
					{
					alt242=3;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 242, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 242, 0, input);
				throw nvae;
			}

			switch (alt242) {
				case 1 :
					// com/caseystella/parser/bashast.g:432:4: LSQUARE COLON NAME COLON RSQUARE
					{
					LSQUARE718=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_pattern_class_match3930); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE718);

					COLON719=(Token)match(input,COLON,FOLLOW_COLON_in_pattern_class_match3932); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(COLON719);

					NAME720=(Token)match(input,NAME,FOLLOW_NAME_in_pattern_class_match3934); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NAME.add(NAME720);

					COLON721=(Token)match(input,COLON,FOLLOW_COLON_in_pattern_class_match3936); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(COLON721);

					RSQUARE722=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_pattern_class_match3938); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE722);

					// AST REWRITE
					// elements: NAME
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 432:37: -> ^( CHARACTER_CLASS NAME )
					{
						// com/caseystella/parser/bashast.g:432:40: ^( CHARACTER_CLASS NAME )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CHARACTER_CLASS, "CHARACTER_CLASS"), root_1);
						adaptor.addChild(root_1, stream_NAME.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:433:4: LSQUARE EQUALS pattern_char EQUALS RSQUARE
					{
					LSQUARE723=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_pattern_class_match3951); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE723);

					EQUALS724=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_pattern_class_match3953); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS724);

					pushFollow(FOLLOW_pattern_char_in_pattern_class_match3955);
					pattern_char725=pattern_char();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pattern_char.add(pattern_char725.getTree());
					EQUALS726=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_pattern_class_match3957); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS726);

					RSQUARE727=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_pattern_class_match3959); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE727);

					// AST REWRITE
					// elements: pattern_char
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 433:47: -> ^( EQUIVALENCE_CLASS pattern_char )
					{
						// com/caseystella/parser/bashast.g:433:50: ^( EQUIVALENCE_CLASS pattern_char )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EQUIVALENCE_CLASS, "EQUIVALENCE_CLASS"), root_1);
						adaptor.addChild(root_1, stream_pattern_char.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:434:4: LSQUARE DOT NAME DOT RSQUARE
					{
					LSQUARE728=(Token)match(input,LSQUARE,FOLLOW_LSQUARE_in_pattern_class_match3972); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LSQUARE.add(LSQUARE728);

					DOT729=(Token)match(input,DOT,FOLLOW_DOT_in_pattern_class_match3974); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOT.add(DOT729);

					NAME730=(Token)match(input,NAME,FOLLOW_NAME_in_pattern_class_match3976); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_NAME.add(NAME730);

					DOT731=(Token)match(input,DOT,FOLLOW_DOT_in_pattern_class_match3978); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOT.add(DOT731);

					RSQUARE732=(Token)match(input,RSQUARE,FOLLOW_RSQUARE_in_pattern_class_match3980); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RSQUARE.add(RSQUARE732);

					// AST REWRITE
					// elements: NAME
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 434:33: -> ^( COLLATING_SYMBOL NAME )
					{
						// com/caseystella/parser/bashast.g:434:36: ^( COLLATING_SYMBOL NAME )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(COLLATING_SYMBOL, "COLLATING_SYMBOL"), root_1);
						adaptor.addChild(root_1, stream_NAME.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pattern_class_match"


	public static class pattern_char_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pattern_char"
	// com/caseystella/parser/bashast.g:436:1: pattern_char : ( LETTER | DIGIT | NQCHAR_NO_ALPHANUM | QMARK | COLON | AT | SEMIC | POUND | SLASH | BANG | TIMES | COMMA | PIPE | AMP | MINUS | PLUS | PCT | EQUALS | LSQUARE | RSQUARE | RPAREN | LPAREN | RBRACE | LBRACE | DOLLAR | TICK | DOT | LT | GT | SQUOTE | QUOTE );
	public final bashastParser.pattern_char_return pattern_char() throws RecognitionException {
		bashastParser.pattern_char_return retval = new bashastParser.pattern_char_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set733=null;

		CommonTree set733_tree=null;

		try {
			// com/caseystella/parser/bashast.g:437:2: ( LETTER | DIGIT | NQCHAR_NO_ALPHANUM | QMARK | COLON | AT | SEMIC | POUND | SLASH | BANG | TIMES | COMMA | PIPE | AMP | MINUS | PLUS | PCT | EQUALS | LSQUARE | RSQUARE | RPAREN | LPAREN | RBRACE | LBRACE | DOLLAR | TICK | DOT | LT | GT | SQUOTE | QUOTE )
			// com/caseystella/parser/bashast.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set733=input.LT(1);
			if ( input.LA(1)==AMP||(input.LA(1) >= AT && input.LA(1) <= BANG)||(input.LA(1) >= COLON && input.LA(1) <= COMMA)||input.LA(1)==DIGIT||input.LA(1)==DOLLAR||input.LA(1)==DOT||input.LA(1)==EQUALS||input.LA(1)==GT||input.LA(1)==LBRACE||input.LA(1)==LETTER||input.LA(1)==LPAREN||(input.LA(1) >= LSQUARE && input.LA(1) <= LT)||input.LA(1)==MINUS||input.LA(1)==NQCHAR_NO_ALPHANUM||input.LA(1)==PCT||(input.LA(1) >= PIPE && input.LA(1) <= PLUS)||input.LA(1)==POUND||(input.LA(1) >= QMARK && input.LA(1) <= RBRACE)||input.LA(1)==RPAREN||input.LA(1)==RSQUARE||input.LA(1)==SEMIC||(input.LA(1) >= SLASH && input.LA(1) <= SQUOTE)||input.LA(1)==TICK||input.LA(1)==TIMES ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set733));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pattern_char"


	public static class extended_pattern_match_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "extended_pattern_match"
	// com/caseystella/parser/bashast.g:439:1: extended_pattern_match : ( QMARK LPAREN fname ( PIPE fname )* RPAREN -> ^( MATCH_AT_MOST_ONE ( fname )+ ) | TIMES LPAREN fname ( PIPE fname )* RPAREN -> ^( MATCH_ANY ( fname )+ ) | PLUS LPAREN fname ( PIPE fname )* RPAREN -> ^( MATCH_AT_LEAST_ONE ( fname )+ ) | AT LPAREN fname ( PIPE fname )* RPAREN -> ^( MATCH_EXACTLY_ONE ( fname )+ ) | BANG LPAREN fname ( PIPE fname )* RPAREN -> ^( MATCH_NONE ( fname )+ ) );
	public final bashastParser.extended_pattern_match_return extended_pattern_match() throws RecognitionException {
		bashastParser.extended_pattern_match_return retval = new bashastParser.extended_pattern_match_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token QMARK734=null;
		Token LPAREN735=null;
		Token PIPE737=null;
		Token RPAREN739=null;
		Token TIMES740=null;
		Token LPAREN741=null;
		Token PIPE743=null;
		Token RPAREN745=null;
		Token PLUS746=null;
		Token LPAREN747=null;
		Token PIPE749=null;
		Token RPAREN751=null;
		Token AT752=null;
		Token LPAREN753=null;
		Token PIPE755=null;
		Token RPAREN757=null;
		Token BANG758=null;
		Token LPAREN759=null;
		Token PIPE761=null;
		Token RPAREN763=null;
		ParserRuleReturnScope fname736 =null;
		ParserRuleReturnScope fname738 =null;
		ParserRuleReturnScope fname742 =null;
		ParserRuleReturnScope fname744 =null;
		ParserRuleReturnScope fname748 =null;
		ParserRuleReturnScope fname750 =null;
		ParserRuleReturnScope fname754 =null;
		ParserRuleReturnScope fname756 =null;
		ParserRuleReturnScope fname760 =null;
		ParserRuleReturnScope fname762 =null;

		CommonTree QMARK734_tree=null;
		CommonTree LPAREN735_tree=null;
		CommonTree PIPE737_tree=null;
		CommonTree RPAREN739_tree=null;
		CommonTree TIMES740_tree=null;
		CommonTree LPAREN741_tree=null;
		CommonTree PIPE743_tree=null;
		CommonTree RPAREN745_tree=null;
		CommonTree PLUS746_tree=null;
		CommonTree LPAREN747_tree=null;
		CommonTree PIPE749_tree=null;
		CommonTree RPAREN751_tree=null;
		CommonTree AT752_tree=null;
		CommonTree LPAREN753_tree=null;
		CommonTree PIPE755_tree=null;
		CommonTree RPAREN757_tree=null;
		CommonTree BANG758_tree=null;
		CommonTree LPAREN759_tree=null;
		CommonTree PIPE761_tree=null;
		CommonTree RPAREN763_tree=null;
		RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
		RewriteRuleTokenStream stream_PIPE=new RewriteRuleTokenStream(adaptor,"token PIPE");
		RewriteRuleTokenStream stream_BANG=new RewriteRuleTokenStream(adaptor,"token BANG");
		RewriteRuleTokenStream stream_TIMES=new RewriteRuleTokenStream(adaptor,"token TIMES");
		RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleSubtreeStream stream_fname=new RewriteRuleSubtreeStream(adaptor,"rule fname");

		try {
			// com/caseystella/parser/bashast.g:440:2: ( QMARK LPAREN fname ( PIPE fname )* RPAREN -> ^( MATCH_AT_MOST_ONE ( fname )+ ) | TIMES LPAREN fname ( PIPE fname )* RPAREN -> ^( MATCH_ANY ( fname )+ ) | PLUS LPAREN fname ( PIPE fname )* RPAREN -> ^( MATCH_AT_LEAST_ONE ( fname )+ ) | AT LPAREN fname ( PIPE fname )* RPAREN -> ^( MATCH_EXACTLY_ONE ( fname )+ ) | BANG LPAREN fname ( PIPE fname )* RPAREN -> ^( MATCH_NONE ( fname )+ ) )
			int alt248=5;
			switch ( input.LA(1) ) {
			case QMARK:
				{
				alt248=1;
				}
				break;
			case TIMES:
				{
				alt248=2;
				}
				break;
			case PLUS:
				{
				alt248=3;
				}
				break;
			case AT:
				{
				alt248=4;
				}
				break;
			case BANG:
				{
				alt248=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 248, 0, input);
				throw nvae;
			}
			switch (alt248) {
				case 1 :
					// com/caseystella/parser/bashast.g:440:4: QMARK LPAREN fname ( PIPE fname )* RPAREN
					{
					QMARK734=(Token)match(input,QMARK,FOLLOW_QMARK_in_extended_pattern_match4066); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_QMARK.add(QMARK734);

					LPAREN735=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_extended_pattern_match4068); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN735);

					pushFollow(FOLLOW_fname_in_extended_pattern_match4070);
					fname736=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname736.getTree());
					// com/caseystella/parser/bashast.g:440:23: ( PIPE fname )*
					loop243:
					while (true) {
						int alt243=2;
						int LA243_0 = input.LA(1);
						if ( (LA243_0==PIPE) ) {
							alt243=1;
						}

						switch (alt243) {
						case 1 :
							// com/caseystella/parser/bashast.g:440:24: PIPE fname
							{
							PIPE737=(Token)match(input,PIPE,FOLLOW_PIPE_in_extended_pattern_match4073); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_PIPE.add(PIPE737);

							pushFollow(FOLLOW_fname_in_extended_pattern_match4075);
							fname738=fname();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_fname.add(fname738.getTree());
							}
							break;

						default :
							break loop243;
						}
					}

					RPAREN739=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_extended_pattern_match4079); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN739);

					// AST REWRITE
					// elements: fname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 440:44: -> ^( MATCH_AT_MOST_ONE ( fname )+ )
					{
						// com/caseystella/parser/bashast.g:440:47: ^( MATCH_AT_MOST_ONE ( fname )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_AT_MOST_ONE, "MATCH_AT_MOST_ONE"), root_1);
						if ( !(stream_fname.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_fname.hasNext() ) {
							adaptor.addChild(root_1, stream_fname.nextTree());
						}
						stream_fname.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:441:4: TIMES LPAREN fname ( PIPE fname )* RPAREN
					{
					TIMES740=(Token)match(input,TIMES,FOLLOW_TIMES_in_extended_pattern_match4093); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_TIMES.add(TIMES740);

					LPAREN741=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_extended_pattern_match4095); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN741);

					pushFollow(FOLLOW_fname_in_extended_pattern_match4097);
					fname742=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname742.getTree());
					// com/caseystella/parser/bashast.g:441:23: ( PIPE fname )*
					loop244:
					while (true) {
						int alt244=2;
						int LA244_0 = input.LA(1);
						if ( (LA244_0==PIPE) ) {
							alt244=1;
						}

						switch (alt244) {
						case 1 :
							// com/caseystella/parser/bashast.g:441:24: PIPE fname
							{
							PIPE743=(Token)match(input,PIPE,FOLLOW_PIPE_in_extended_pattern_match4100); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_PIPE.add(PIPE743);

							pushFollow(FOLLOW_fname_in_extended_pattern_match4102);
							fname744=fname();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_fname.add(fname744.getTree());
							}
							break;

						default :
							break loop244;
						}
					}

					RPAREN745=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_extended_pattern_match4106); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN745);

					// AST REWRITE
					// elements: fname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 441:44: -> ^( MATCH_ANY ( fname )+ )
					{
						// com/caseystella/parser/bashast.g:441:47: ^( MATCH_ANY ( fname )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_ANY, "MATCH_ANY"), root_1);
						if ( !(stream_fname.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_fname.hasNext() ) {
							adaptor.addChild(root_1, stream_fname.nextTree());
						}
						stream_fname.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:442:4: PLUS LPAREN fname ( PIPE fname )* RPAREN
					{
					PLUS746=(Token)match(input,PLUS,FOLLOW_PLUS_in_extended_pattern_match4120); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PLUS.add(PLUS746);

					LPAREN747=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_extended_pattern_match4122); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN747);

					pushFollow(FOLLOW_fname_in_extended_pattern_match4124);
					fname748=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname748.getTree());
					// com/caseystella/parser/bashast.g:442:22: ( PIPE fname )*
					loop245:
					while (true) {
						int alt245=2;
						int LA245_0 = input.LA(1);
						if ( (LA245_0==PIPE) ) {
							alt245=1;
						}

						switch (alt245) {
						case 1 :
							// com/caseystella/parser/bashast.g:442:23: PIPE fname
							{
							PIPE749=(Token)match(input,PIPE,FOLLOW_PIPE_in_extended_pattern_match4127); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_PIPE.add(PIPE749);

							pushFollow(FOLLOW_fname_in_extended_pattern_match4129);
							fname750=fname();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_fname.add(fname750.getTree());
							}
							break;

						default :
							break loop245;
						}
					}

					RPAREN751=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_extended_pattern_match4133); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN751);

					// AST REWRITE
					// elements: fname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 442:43: -> ^( MATCH_AT_LEAST_ONE ( fname )+ )
					{
						// com/caseystella/parser/bashast.g:442:46: ^( MATCH_AT_LEAST_ONE ( fname )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_AT_LEAST_ONE, "MATCH_AT_LEAST_ONE"), root_1);
						if ( !(stream_fname.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_fname.hasNext() ) {
							adaptor.addChild(root_1, stream_fname.nextTree());
						}
						stream_fname.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:443:4: AT LPAREN fname ( PIPE fname )* RPAREN
					{
					AT752=(Token)match(input,AT,FOLLOW_AT_in_extended_pattern_match4147); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_AT.add(AT752);

					LPAREN753=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_extended_pattern_match4149); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN753);

					pushFollow(FOLLOW_fname_in_extended_pattern_match4151);
					fname754=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname754.getTree());
					// com/caseystella/parser/bashast.g:443:20: ( PIPE fname )*
					loop246:
					while (true) {
						int alt246=2;
						int LA246_0 = input.LA(1);
						if ( (LA246_0==PIPE) ) {
							alt246=1;
						}

						switch (alt246) {
						case 1 :
							// com/caseystella/parser/bashast.g:443:21: PIPE fname
							{
							PIPE755=(Token)match(input,PIPE,FOLLOW_PIPE_in_extended_pattern_match4154); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_PIPE.add(PIPE755);

							pushFollow(FOLLOW_fname_in_extended_pattern_match4156);
							fname756=fname();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_fname.add(fname756.getTree());
							}
							break;

						default :
							break loop246;
						}
					}

					RPAREN757=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_extended_pattern_match4160); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN757);

					// AST REWRITE
					// elements: fname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 443:41: -> ^( MATCH_EXACTLY_ONE ( fname )+ )
					{
						// com/caseystella/parser/bashast.g:443:44: ^( MATCH_EXACTLY_ONE ( fname )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_EXACTLY_ONE, "MATCH_EXACTLY_ONE"), root_1);
						if ( !(stream_fname.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_fname.hasNext() ) {
							adaptor.addChild(root_1, stream_fname.nextTree());
						}
						stream_fname.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:444:4: BANG LPAREN fname ( PIPE fname )* RPAREN
					{
					BANG758=(Token)match(input,BANG,FOLLOW_BANG_in_extended_pattern_match4174); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BANG.add(BANG758);

					LPAREN759=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_extended_pattern_match4176); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN759);

					pushFollow(FOLLOW_fname_in_extended_pattern_match4178);
					fname760=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname760.getTree());
					// com/caseystella/parser/bashast.g:444:22: ( PIPE fname )*
					loop247:
					while (true) {
						int alt247=2;
						int LA247_0 = input.LA(1);
						if ( (LA247_0==PIPE) ) {
							alt247=1;
						}

						switch (alt247) {
						case 1 :
							// com/caseystella/parser/bashast.g:444:23: PIPE fname
							{
							PIPE761=(Token)match(input,PIPE,FOLLOW_PIPE_in_extended_pattern_match4181); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_PIPE.add(PIPE761);

							pushFollow(FOLLOW_fname_in_extended_pattern_match4183);
							fname762=fname();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_fname.add(fname762.getTree());
							}
							break;

						default :
							break loop247;
						}
					}

					RPAREN763=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_extended_pattern_match4187); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN763);

					// AST REWRITE
					// elements: fname
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 444:43: -> ^( MATCH_NONE ( fname )+ )
					{
						// com/caseystella/parser/bashast.g:444:46: ^( MATCH_NONE ( fname )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_NONE, "MATCH_NONE"), root_1);
						if ( !(stream_fname.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_fname.hasNext() ) {
							adaptor.addChild(root_1, stream_fname.nextTree());
						}
						stream_fname.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "extended_pattern_match"


	public static class arithmetic_expansion_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arithmetic_expansion"
	// com/caseystella/parser/bashast.g:446:1: arithmetic_expansion : DOLLAR ! LLPAREN ! ( BLANK !)* arithmetic_part ( BLANK !)* RRPAREN !;
	public final bashastParser.arithmetic_expansion_return arithmetic_expansion() throws RecognitionException {
		bashastParser.arithmetic_expansion_return retval = new bashastParser.arithmetic_expansion_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token DOLLAR764=null;
		Token LLPAREN765=null;
		Token BLANK766=null;
		Token BLANK768=null;
		Token RRPAREN769=null;
		ParserRuleReturnScope arithmetic_part767 =null;

		CommonTree DOLLAR764_tree=null;
		CommonTree LLPAREN765_tree=null;
		CommonTree BLANK766_tree=null;
		CommonTree BLANK768_tree=null;
		CommonTree RRPAREN769_tree=null;

		try {
			// com/caseystella/parser/bashast.g:447:2: ( DOLLAR ! LLPAREN ! ( BLANK !)* arithmetic_part ( BLANK !)* RRPAREN !)
			// com/caseystella/parser/bashast.g:447:4: DOLLAR ! LLPAREN ! ( BLANK !)* arithmetic_part ( BLANK !)* RRPAREN !
			{
			root_0 = (CommonTree)adaptor.nil();


			DOLLAR764=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_arithmetic_expansion4205); if (state.failed) return retval;
			LLPAREN765=(Token)match(input,LLPAREN,FOLLOW_LLPAREN_in_arithmetic_expansion4208); if (state.failed) return retval;
			// com/caseystella/parser/bashast.g:447:26: ( BLANK !)*
			loop249:
			while (true) {
				int alt249=2;
				int LA249_0 = input.LA(1);
				if ( (LA249_0==BLANK) ) {
					alt249=1;
				}

				switch (alt249) {
				case 1 :
					// com/caseystella/parser/bashast.g:447:26: BLANK !
					{
					BLANK766=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic_expansion4211); if (state.failed) return retval;
					}
					break;

				default :
					break loop249;
				}
			}

			pushFollow(FOLLOW_arithmetic_part_in_arithmetic_expansion4215);
			arithmetic_part767=arithmetic_part();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_part767.getTree());

			// com/caseystella/parser/bashast.g:447:50: ( BLANK !)*
			loop250:
			while (true) {
				int alt250=2;
				int LA250_0 = input.LA(1);
				if ( (LA250_0==BLANK) ) {
					alt250=1;
				}

				switch (alt250) {
				case 1 :
					// com/caseystella/parser/bashast.g:447:50: BLANK !
					{
					BLANK768=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic_expansion4217); if (state.failed) return retval;
					}
					break;

				default :
					break loop250;
				}
			}

			RRPAREN769=(Token)match(input,RRPAREN,FOLLOW_RRPAREN_in_arithmetic_expansion4221); if (state.failed) return retval;
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "arithmetic_expansion"


	public static class arithmetic_part_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arithmetic_part"
	// com/caseystella/parser/bashast.g:448:1: arithmetic_part : ( arithmetics | arithmetic );
	public final bashastParser.arithmetic_part_return arithmetic_part() throws RecognitionException {
		bashastParser.arithmetic_part_return retval = new bashastParser.arithmetic_part_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope arithmetics770 =null;
		ParserRuleReturnScope arithmetic771 =null;


		try {
			// com/caseystella/parser/bashast.g:449:2: ( arithmetics | arithmetic )
			int alt251=2;
			switch ( input.LA(1) ) {
			case BANG:
				{
				int LA251_1 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			case TILDE:
				{
				int LA251_2 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			case LETTER:
			case NAME:
			case 138:
				{
				int LA251_3 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			case INC:
				{
				int LA251_4 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			case DEC:
				{
				int LA251_5 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			case DIGIT:
			case NUMBER:
				{
				int LA251_6 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			case DOLLAR:
				{
				int LA251_7 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			case TICK:
				{
				int LA251_8 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			case LPAREN:
				{
				int LA251_9 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			case PLUS:
				{
				int LA251_10 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			case MINUS:
				{
				int LA251_11 = input.LA(2);
				if ( (synpred492_bashast()) ) {
					alt251=1;
				}
				else if ( (true) ) {
					alt251=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 251, 0, input);
				throw nvae;
			}
			switch (alt251) {
				case 1 :
					// com/caseystella/parser/bashast.g:449:4: arithmetics
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arithmetics_in_arithmetic_part4230);
					arithmetics770=arithmetics();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetics770.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:450:4: arithmetic
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arithmetic_in_arithmetic_part4235);
					arithmetic771=arithmetic();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic771.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "arithmetic_part"


	public static class arithmetics_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arithmetics"
	// com/caseystella/parser/bashast.g:452:1: arithmetics : arithmetic ( ( BLANK !)* COMMA ! ( BLANK !)* arithmetic )* ;
	public final bashastParser.arithmetics_return arithmetics() throws RecognitionException {
		bashastParser.arithmetics_return retval = new bashastParser.arithmetics_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK773=null;
		Token COMMA774=null;
		Token BLANK775=null;
		ParserRuleReturnScope arithmetic772 =null;
		ParserRuleReturnScope arithmetic776 =null;

		CommonTree BLANK773_tree=null;
		CommonTree COMMA774_tree=null;
		CommonTree BLANK775_tree=null;

		try {
			// com/caseystella/parser/bashast.g:453:2: ( arithmetic ( ( BLANK !)* COMMA ! ( BLANK !)* arithmetic )* )
			// com/caseystella/parser/bashast.g:453:4: arithmetic ( ( BLANK !)* COMMA ! ( BLANK !)* arithmetic )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_arithmetic_in_arithmetics4244);
			arithmetic772=arithmetic();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic772.getTree());

			// com/caseystella/parser/bashast.g:453:15: ( ( BLANK !)* COMMA ! ( BLANK !)* arithmetic )*
			loop254:
			while (true) {
				int alt254=2;
				alt254 = dfa254.predict(input);
				switch (alt254) {
				case 1 :
					// com/caseystella/parser/bashast.g:453:16: ( BLANK !)* COMMA ! ( BLANK !)* arithmetic
					{
					// com/caseystella/parser/bashast.g:453:21: ( BLANK !)*
					loop252:
					while (true) {
						int alt252=2;
						int LA252_0 = input.LA(1);
						if ( (LA252_0==BLANK) ) {
							alt252=1;
						}

						switch (alt252) {
						case 1 :
							// com/caseystella/parser/bashast.g:453:21: BLANK !
							{
							BLANK773=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetics4247); if (state.failed) return retval;
							}
							break;

						default :
							break loop252;
						}
					}

					COMMA774=(Token)match(input,COMMA,FOLLOW_COMMA_in_arithmetics4251); if (state.failed) return retval;
					// com/caseystella/parser/bashast.g:453:36: ( BLANK !)*
					loop253:
					while (true) {
						int alt253=2;
						int LA253_0 = input.LA(1);
						if ( (LA253_0==BLANK) ) {
							alt253=1;
						}

						switch (alt253) {
						case 1 :
							// com/caseystella/parser/bashast.g:453:36: BLANK !
							{
							BLANK775=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetics4254); if (state.failed) return retval;
							}
							break;

						default :
							break loop253;
						}
					}

					pushFollow(FOLLOW_arithmetic_in_arithmetics4258);
					arithmetic776=arithmetic();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic776.getTree());

					}
					break;

				default :
					break loop254;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "arithmetics"


	public static class arithmetic_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arithmetic"
	// com/caseystella/parser/bashast.g:454:1: arithmetic : ( arithmetic_condition | arithmetic_assignment );
	public final bashastParser.arithmetic_return arithmetic() throws RecognitionException {
		bashastParser.arithmetic_return retval = new bashastParser.arithmetic_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope arithmetic_condition777 =null;
		ParserRuleReturnScope arithmetic_assignment778 =null;


		try {
			// com/caseystella/parser/bashast.g:455:2: ( arithmetic_condition | arithmetic_assignment )
			int alt255=2;
			switch ( input.LA(1) ) {
			case BANG:
				{
				int LA255_1 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			case TILDE:
				{
				int LA255_2 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			case LETTER:
			case NAME:
			case 138:
				{
				int LA255_3 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			case INC:
				{
				int LA255_4 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			case DEC:
				{
				int LA255_5 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			case DIGIT:
			case NUMBER:
				{
				int LA255_6 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			case DOLLAR:
				{
				int LA255_7 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			case TICK:
				{
				int LA255_8 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			case LPAREN:
				{
				int LA255_9 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			case PLUS:
				{
				int LA255_10 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			case MINUS:
				{
				int LA255_11 = input.LA(2);
				if ( (synpred496_bashast()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 255, 0, input);
				throw nvae;
			}
			switch (alt255) {
				case 1 :
					// com/caseystella/parser/bashast.g:455:4: arithmetic_condition
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arithmetic_condition_in_arithmetic4268);
					arithmetic_condition777=arithmetic_condition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_condition777.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:456:4: arithmetic_assignment
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_arithmetic_assignment_in_arithmetic4273);
					arithmetic_assignment778=arithmetic_assignment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetic_assignment778.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "arithmetic"


	public static class primary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "primary"
	// com/caseystella/parser/bashast.g:458:1: primary : ( num | var_ref | command_sub | name -> ^( VAR_REF name ) | LPAREN ! ( arithmetics ) RPAREN !);
	public final bashastParser.primary_return primary() throws RecognitionException {
		bashastParser.primary_return retval = new bashastParser.primary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN783=null;
		Token RPAREN785=null;
		ParserRuleReturnScope num779 =null;
		ParserRuleReturnScope var_ref780 =null;
		ParserRuleReturnScope command_sub781 =null;
		ParserRuleReturnScope name782 =null;
		ParserRuleReturnScope arithmetics784 =null;

		CommonTree LPAREN783_tree=null;
		CommonTree RPAREN785_tree=null;
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");

		try {
			// com/caseystella/parser/bashast.g:458:9: ( num | var_ref | command_sub | name -> ^( VAR_REF name ) | LPAREN ! ( arithmetics ) RPAREN !)
			int alt256=5;
			switch ( input.LA(1) ) {
			case DIGIT:
			case NUMBER:
				{
				alt256=1;
				}
				break;
			case DOLLAR:
				{
				int LA256_2 = input.LA(2);
				if ( ((LA256_2 >= AT && LA256_2 <= BANG)||LA256_2==DIGIT||LA256_2==LBRACE||LA256_2==LETTER||(LA256_2 >= MINUS && LA256_2 <= NAME)||LA256_2==NUMBER||LA256_2==POUND||LA256_2==QMARK||LA256_2==TIMES||LA256_2==138) ) {
					alt256=2;
				}
				else if ( (LA256_2==LPAREN) ) {
					alt256=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 256, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TICK:
				{
				alt256=3;
				}
				break;
			case LETTER:
			case NAME:
			case 138:
				{
				alt256=4;
				}
				break;
			case LPAREN:
				{
				alt256=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 256, 0, input);
				throw nvae;
			}
			switch (alt256) {
				case 1 :
					// com/caseystella/parser/bashast.g:458:11: num
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_num_in_primary4281);
					num779=num();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, num779.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:459:4: var_ref
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_var_ref_in_primary4286);
					var_ref780=var_ref();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, var_ref780.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:460:4: command_sub
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_command_sub_in_primary4291);
					command_sub781=command_sub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, command_sub781.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:461:4: name
					{
					pushFollow(FOLLOW_name_in_primary4296);
					name782=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name.add(name782.getTree());
					// AST REWRITE
					// elements: name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 461:9: -> ^( VAR_REF name )
					{
						// com/caseystella/parser/bashast.g:461:12: ^( VAR_REF name )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_REF, "VAR_REF"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:462:4: LPAREN ! ( arithmetics ) RPAREN !
					{
					root_0 = (CommonTree)adaptor.nil();


					LPAREN783=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primary4309); if (state.failed) return retval;
					// com/caseystella/parser/bashast.g:462:12: ( arithmetics )
					// com/caseystella/parser/bashast.g:462:13: arithmetics
					{
					pushFollow(FOLLOW_arithmetics_in_primary4313);
					arithmetics784=arithmetics();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmetics784.getTree());

					}

					RPAREN785=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primary4316); if (state.failed) return retval;
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "primary"


	public static class post_inc_dec_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "post_inc_dec"
	// com/caseystella/parser/bashast.g:463:1: post_inc_dec : ( name ( BLANK )? INC -> ^( POST_INCR name ) | name ( BLANK )? DEC -> ^( POST_DECR name ) );
	public final bashastParser.post_inc_dec_return post_inc_dec() throws RecognitionException {
		bashastParser.post_inc_dec_return retval = new bashastParser.post_inc_dec_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK787=null;
		Token INC788=null;
		Token BLANK790=null;
		Token DEC791=null;
		ParserRuleReturnScope name786 =null;
		ParserRuleReturnScope name789 =null;

		CommonTree BLANK787_tree=null;
		CommonTree INC788_tree=null;
		CommonTree BLANK790_tree=null;
		CommonTree DEC791_tree=null;
		RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
		RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");

		try {
			// com/caseystella/parser/bashast.g:464:2: ( name ( BLANK )? INC -> ^( POST_INCR name ) | name ( BLANK )? DEC -> ^( POST_DECR name ) )
			int alt259=2;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==LETTER||LA259_0==NAME||LA259_0==138) ) {
				switch ( input.LA(2) ) {
				case BLANK:
					{
					int LA259_2 = input.LA(3);
					if ( (LA259_2==INC) ) {
						alt259=1;
					}
					else if ( (LA259_2==DEC) ) {
						alt259=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 259, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case INC:
					{
					alt259=1;
					}
					break;
				case DEC:
					{
					alt259=2;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 259, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 259, 0, input);
				throw nvae;
			}

			switch (alt259) {
				case 1 :
					// com/caseystella/parser/bashast.g:464:4: name ( BLANK )? INC
					{
					pushFollow(FOLLOW_name_in_post_inc_dec4325);
					name786=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name.add(name786.getTree());
					// com/caseystella/parser/bashast.g:464:9: ( BLANK )?
					int alt257=2;
					int LA257_0 = input.LA(1);
					if ( (LA257_0==BLANK) ) {
						alt257=1;
					}
					switch (alt257) {
						case 1 :
							// com/caseystella/parser/bashast.g:464:9: BLANK
							{
							BLANK787=(Token)match(input,BLANK,FOLLOW_BLANK_in_post_inc_dec4327); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK787);

							}
							break;

					}

					INC788=(Token)match(input,INC,FOLLOW_INC_in_post_inc_dec4329); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_INC.add(INC788);

					// AST REWRITE
					// elements: name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 464:19: -> ^( POST_INCR name )
					{
						// com/caseystella/parser/bashast.g:464:22: ^( POST_INCR name )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_INCR, "POST_INCR"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:465:4: name ( BLANK )? DEC
					{
					pushFollow(FOLLOW_name_in_post_inc_dec4342);
					name789=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name.add(name789.getTree());
					// com/caseystella/parser/bashast.g:465:9: ( BLANK )?
					int alt258=2;
					int LA258_0 = input.LA(1);
					if ( (LA258_0==BLANK) ) {
						alt258=1;
					}
					switch (alt258) {
						case 1 :
							// com/caseystella/parser/bashast.g:465:9: BLANK
							{
							BLANK790=(Token)match(input,BLANK,FOLLOW_BLANK_in_post_inc_dec4344); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK790);

							}
							break;

					}

					DEC791=(Token)match(input,DEC,FOLLOW_DEC_in_post_inc_dec4346); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DEC.add(DEC791);

					// AST REWRITE
					// elements: name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 465:19: -> ^( POST_DECR name )
					{
						// com/caseystella/parser/bashast.g:465:22: ^( POST_DECR name )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(POST_DECR, "POST_DECR"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "post_inc_dec"


	public static class pre_inc_dec_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "pre_inc_dec"
	// com/caseystella/parser/bashast.g:466:1: pre_inc_dec : ( INC ( BLANK )? name -> ^( PRE_INCR name ) | DEC ( BLANK )? name -> ^( PRE_DECR name ) );
	public final bashastParser.pre_inc_dec_return pre_inc_dec() throws RecognitionException {
		bashastParser.pre_inc_dec_return retval = new bashastParser.pre_inc_dec_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token INC792=null;
		Token BLANK793=null;
		Token DEC795=null;
		Token BLANK796=null;
		ParserRuleReturnScope name794 =null;
		ParserRuleReturnScope name797 =null;

		CommonTree INC792_tree=null;
		CommonTree BLANK793_tree=null;
		CommonTree DEC795_tree=null;
		CommonTree BLANK796_tree=null;
		RewriteRuleTokenStream stream_DEC=new RewriteRuleTokenStream(adaptor,"token DEC");
		RewriteRuleTokenStream stream_INC=new RewriteRuleTokenStream(adaptor,"token INC");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");

		try {
			// com/caseystella/parser/bashast.g:467:2: ( INC ( BLANK )? name -> ^( PRE_INCR name ) | DEC ( BLANK )? name -> ^( PRE_DECR name ) )
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==INC) ) {
				alt262=1;
			}
			else if ( (LA262_0==DEC) ) {
				alt262=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 262, 0, input);
				throw nvae;
			}

			switch (alt262) {
				case 1 :
					// com/caseystella/parser/bashast.g:467:4: INC ( BLANK )? name
					{
					INC792=(Token)match(input,INC,FOLLOW_INC_in_pre_inc_dec4362); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_INC.add(INC792);

					// com/caseystella/parser/bashast.g:467:8: ( BLANK )?
					int alt260=2;
					int LA260_0 = input.LA(1);
					if ( (LA260_0==BLANK) ) {
						alt260=1;
					}
					switch (alt260) {
						case 1 :
							// com/caseystella/parser/bashast.g:467:8: BLANK
							{
							BLANK793=(Token)match(input,BLANK,FOLLOW_BLANK_in_pre_inc_dec4364); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK793);

							}
							break;

					}

					pushFollow(FOLLOW_name_in_pre_inc_dec4366);
					name794=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name.add(name794.getTree());
					// AST REWRITE
					// elements: name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 467:19: -> ^( PRE_INCR name )
					{
						// com/caseystella/parser/bashast.g:467:22: ^( PRE_INCR name )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_INCR, "PRE_INCR"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:468:4: DEC ( BLANK )? name
					{
					DEC795=(Token)match(input,DEC,FOLLOW_DEC_in_pre_inc_dec4379); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DEC.add(DEC795);

					// com/caseystella/parser/bashast.g:468:8: ( BLANK )?
					int alt261=2;
					int LA261_0 = input.LA(1);
					if ( (LA261_0==BLANK) ) {
						alt261=1;
					}
					switch (alt261) {
						case 1 :
							// com/caseystella/parser/bashast.g:468:8: BLANK
							{
							BLANK796=(Token)match(input,BLANK,FOLLOW_BLANK_in_pre_inc_dec4381); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK796);

							}
							break;

					}

					pushFollow(FOLLOW_name_in_pre_inc_dec4383);
					name797=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name.add(name797.getTree());
					// AST REWRITE
					// elements: name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 468:19: -> ^( PRE_DECR name )
					{
						// com/caseystella/parser/bashast.g:468:22: ^( PRE_DECR name )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_DECR, "PRE_DECR"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pre_inc_dec"


	public static class unary_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "unary"
	// com/caseystella/parser/bashast.g:469:1: unary : ( post_inc_dec | pre_inc_dec | primary | PLUS ^ primary | MINUS ^ primary );
	public final bashastParser.unary_return unary() throws RecognitionException {
		bashastParser.unary_return retval = new bashastParser.unary_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token PLUS801=null;
		Token MINUS803=null;
		ParserRuleReturnScope post_inc_dec798 =null;
		ParserRuleReturnScope pre_inc_dec799 =null;
		ParserRuleReturnScope primary800 =null;
		ParserRuleReturnScope primary802 =null;
		ParserRuleReturnScope primary804 =null;

		CommonTree PLUS801_tree=null;
		CommonTree MINUS803_tree=null;

		try {
			// com/caseystella/parser/bashast.g:469:7: ( post_inc_dec | pre_inc_dec | primary | PLUS ^ primary | MINUS ^ primary )
			int alt263=5;
			switch ( input.LA(1) ) {
			case LETTER:
			case NAME:
			case 138:
				{
				switch ( input.LA(2) ) {
				case BLANK:
					{
					switch ( input.LA(3) ) {
					case INC:
						{
						int LA263_7 = input.LA(4);
						if ( (synpred507_bashast()) ) {
							alt263=1;
						}
						else if ( (synpred509_bashast()) ) {
							alt263=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 263, 7, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case DEC:
						{
						int LA263_8 = input.LA(4);
						if ( (synpred507_bashast()) ) {
							alt263=1;
						}
						else if ( (synpred509_bashast()) ) {
							alt263=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 263, 8, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case EOF:
					case AMP:
					case ARITH_ASSIGN:
					case AT:
					case BANG:
					case BLANK:
					case BOP:
					case CARET:
					case CASE:
					case COLON:
					case COMMA:
					case DIGIT:
					case DO:
					case DOLLAR:
					case DONE:
					case DOT:
					case DOTDOT:
					case DOUBLE_SEMIC:
					case ELIF:
					case ELSE:
					case EOL:
					case EQUALS:
					case ESAC:
					case ESC_CHAR:
					case ESC_GT:
					case ESC_LT:
					case EXP:
					case FI:
					case FOR:
					case FUNCTION:
					case GEQ:
					case GT:
					case HERE_STRING_OP:
					case IF:
					case IN:
					case LEQ:
					case LET:
					case LETTER:
					case LOGICAND:
					case LOGICOR:
					case LSHIFT:
					case LSQUARE:
					case LT:
					case MINUS:
					case NAME:
					case NQSTR:
					case NUMBER:
					case PCT:
					case PCTPCT:
					case PIPE:
					case PLUS:
					case QMARK:
					case QUOTE:
					case RPAREN:
					case RRPAREN:
					case RSHIFT:
					case RSQUARE:
					case SELECT:
					case SEMIC:
					case SLASH:
					case SQUOTE:
					case TEST:
					case THEN:
					case TICK:
					case TILDE:
					case TIME:
					case TIMES:
					case UNTIL:
					case UOP:
					case WHILE:
					case 138:
						{
						alt263=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 263, 6, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
					}
					break;
				case INC:
					{
					int LA263_7 = input.LA(3);
					if ( (synpred507_bashast()) ) {
						alt263=1;
					}
					else if ( (synpred509_bashast()) ) {
						alt263=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 263, 7, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case DEC:
					{
					int LA263_8 = input.LA(3);
					if ( (synpred507_bashast()) ) {
						alt263=1;
					}
					else if ( (synpred509_bashast()) ) {
						alt263=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 263, 8, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EOF:
				case AMP:
				case ARITH_ASSIGN:
				case AT:
				case BANG:
				case BOP:
				case CARET:
				case CASE:
				case COLON:
				case COMMA:
				case DIGIT:
				case DO:
				case DOLLAR:
				case DONE:
				case DOT:
				case DOTDOT:
				case DOUBLE_SEMIC:
				case ELIF:
				case ELSE:
				case EOL:
				case EQUALS:
				case ESAC:
				case ESC_CHAR:
				case ESC_GT:
				case ESC_LT:
				case EXP:
				case FI:
				case FOR:
				case FUNCTION:
				case GEQ:
				case GT:
				case HERE_STRING_OP:
				case IF:
				case IN:
				case LEQ:
				case LET:
				case LETTER:
				case LOGICAND:
				case LOGICOR:
				case LSHIFT:
				case LSQUARE:
				case LT:
				case MINUS:
				case NAME:
				case NQSTR:
				case NUMBER:
				case PCT:
				case PCTPCT:
				case PIPE:
				case PLUS:
				case QMARK:
				case QUOTE:
				case RPAREN:
				case RRPAREN:
				case RSHIFT:
				case RSQUARE:
				case SELECT:
				case SEMIC:
				case SLASH:
				case SQUOTE:
				case TEST:
				case THEN:
				case TICK:
				case TILDE:
				case TIME:
				case TIMES:
				case UNTIL:
				case UOP:
				case WHILE:
				case 138:
					{
					alt263=3;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 263, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case DEC:
			case INC:
				{
				alt263=2;
				}
				break;
			case DIGIT:
			case DOLLAR:
			case LPAREN:
			case NUMBER:
			case TICK:
				{
				alt263=3;
				}
				break;
			case PLUS:
				{
				alt263=4;
				}
				break;
			case MINUS:
				{
				alt263=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 263, 0, input);
				throw nvae;
			}
			switch (alt263) {
				case 1 :
					// com/caseystella/parser/bashast.g:469:9: post_inc_dec
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_post_inc_dec_in_unary4398);
					post_inc_dec798=post_inc_dec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, post_inc_dec798.getTree());

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:470:4: pre_inc_dec
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_pre_inc_dec_in_unary4403);
					pre_inc_dec799=pre_inc_dec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pre_inc_dec799.getTree());

					}
					break;
				case 3 :
					// com/caseystella/parser/bashast.g:471:4: primary
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_primary_in_unary4408);
					primary800=primary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primary800.getTree());

					}
					break;
				case 4 :
					// com/caseystella/parser/bashast.g:472:4: PLUS ^ primary
					{
					root_0 = (CommonTree)adaptor.nil();


					PLUS801=(Token)match(input,PLUS,FOLLOW_PLUS_in_unary4413); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PLUS801_tree = (CommonTree)adaptor.create(PLUS801);
					root_0 = (CommonTree)adaptor.becomeRoot(PLUS801_tree, root_0);
					}

					pushFollow(FOLLOW_primary_in_unary4416);
					primary802=primary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primary802.getTree());

					}
					break;
				case 5 :
					// com/caseystella/parser/bashast.g:473:4: MINUS ^ primary
					{
					root_0 = (CommonTree)adaptor.nil();


					MINUS803=(Token)match(input,MINUS,FOLLOW_MINUS_in_unary4421); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MINUS803_tree = (CommonTree)adaptor.create(MINUS803);
					root_0 = (CommonTree)adaptor.becomeRoot(MINUS803_tree, root_0);
					}

					pushFollow(FOLLOW_primary_in_unary4424);
					primary804=primary();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primary804.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unary"


	public static class negation_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "negation"
	// com/caseystella/parser/bashast.g:474:1: negation : ( BANG ^ ( BLANK !)? | TILDE ^ ( BLANK !)? )? unary ;
	public final bashastParser.negation_return negation() throws RecognitionException {
		bashastParser.negation_return retval = new bashastParser.negation_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BANG805=null;
		Token BLANK806=null;
		Token TILDE807=null;
		Token BLANK808=null;
		ParserRuleReturnScope unary809 =null;

		CommonTree BANG805_tree=null;
		CommonTree BLANK806_tree=null;
		CommonTree TILDE807_tree=null;
		CommonTree BLANK808_tree=null;

		try {
			// com/caseystella/parser/bashast.g:475:2: ( ( BANG ^ ( BLANK !)? | TILDE ^ ( BLANK !)? )? unary )
			// com/caseystella/parser/bashast.g:475:4: ( BANG ^ ( BLANK !)? | TILDE ^ ( BLANK !)? )? unary
			{
			root_0 = (CommonTree)adaptor.nil();


			// com/caseystella/parser/bashast.g:475:4: ( BANG ^ ( BLANK !)? | TILDE ^ ( BLANK !)? )?
			int alt266=3;
			int LA266_0 = input.LA(1);
			if ( (LA266_0==BANG) ) {
				alt266=1;
			}
			else if ( (LA266_0==TILDE) ) {
				alt266=2;
			}
			switch (alt266) {
				case 1 :
					// com/caseystella/parser/bashast.g:475:5: BANG ^ ( BLANK !)?
					{
					BANG805=(Token)match(input,BANG,FOLLOW_BANG_in_negation4433); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BANG805_tree = (CommonTree)adaptor.create(BANG805);
					root_0 = (CommonTree)adaptor.becomeRoot(BANG805_tree, root_0);
					}

					// com/caseystella/parser/bashast.g:475:15: ( BLANK !)?
					int alt264=2;
					int LA264_0 = input.LA(1);
					if ( (LA264_0==BLANK) ) {
						alt264=1;
					}
					switch (alt264) {
						case 1 :
							// com/caseystella/parser/bashast.g:475:15: BLANK !
							{
							BLANK806=(Token)match(input,BLANK,FOLLOW_BLANK_in_negation4435); if (state.failed) return retval;
							}
							break;

					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:475:18: TILDE ^ ( BLANK !)?
					{
					TILDE807=(Token)match(input,TILDE,FOLLOW_TILDE_in_negation4439); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TILDE807_tree = (CommonTree)adaptor.create(TILDE807);
					root_0 = (CommonTree)adaptor.becomeRoot(TILDE807_tree, root_0);
					}

					// com/caseystella/parser/bashast.g:475:29: ( BLANK !)?
					int alt265=2;
					int LA265_0 = input.LA(1);
					if ( (LA265_0==BLANK) ) {
						alt265=1;
					}
					switch (alt265) {
						case 1 :
							// com/caseystella/parser/bashast.g:475:29: BLANK !
							{
							BLANK808=(Token)match(input,BLANK,FOLLOW_BLANK_in_negation4441); if (state.failed) return retval;
							}
							break;

					}

					}
					break;

			}

			pushFollow(FOLLOW_unary_in_negation4446);
			unary809=unary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unary809.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "negation"


	public static class exponential_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "exponential"
	// com/caseystella/parser/bashast.g:476:1: exponential : negation ( ( BLANK !)* EXP ^ ( BLANK !)* negation )* ;
	public final bashastParser.exponential_return exponential() throws RecognitionException {
		bashastParser.exponential_return retval = new bashastParser.exponential_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK811=null;
		Token EXP812=null;
		Token BLANK813=null;
		ParserRuleReturnScope negation810 =null;
		ParserRuleReturnScope negation814 =null;

		CommonTree BLANK811_tree=null;
		CommonTree EXP812_tree=null;
		CommonTree BLANK813_tree=null;

		try {
			// com/caseystella/parser/bashast.g:477:2: ( negation ( ( BLANK !)* EXP ^ ( BLANK !)* negation )* )
			// com/caseystella/parser/bashast.g:477:4: negation ( ( BLANK !)* EXP ^ ( BLANK !)* negation )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_negation_in_exponential4454);
			negation810=negation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, negation810.getTree());

			// com/caseystella/parser/bashast.g:477:13: ( ( BLANK !)* EXP ^ ( BLANK !)* negation )*
			loop269:
			while (true) {
				int alt269=2;
				alt269 = dfa269.predict(input);
				switch (alt269) {
				case 1 :
					// com/caseystella/parser/bashast.g:477:14: ( BLANK !)* EXP ^ ( BLANK !)* negation
					{
					// com/caseystella/parser/bashast.g:477:19: ( BLANK !)*
					loop267:
					while (true) {
						int alt267=2;
						int LA267_0 = input.LA(1);
						if ( (LA267_0==BLANK) ) {
							alt267=1;
						}

						switch (alt267) {
						case 1 :
							// com/caseystella/parser/bashast.g:477:19: BLANK !
							{
							BLANK811=(Token)match(input,BLANK,FOLLOW_BLANK_in_exponential4457); if (state.failed) return retval;
							}
							break;

						default :
							break loop267;
						}
					}

					EXP812=(Token)match(input,EXP,FOLLOW_EXP_in_exponential4461); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXP812_tree = (CommonTree)adaptor.create(EXP812);
					root_0 = (CommonTree)adaptor.becomeRoot(EXP812_tree, root_0);
					}

					// com/caseystella/parser/bashast.g:477:32: ( BLANK !)*
					loop268:
					while (true) {
						int alt268=2;
						int LA268_0 = input.LA(1);
						if ( (LA268_0==BLANK) ) {
							alt268=1;
						}

						switch (alt268) {
						case 1 :
							// com/caseystella/parser/bashast.g:477:32: BLANK !
							{
							BLANK813=(Token)match(input,BLANK,FOLLOW_BLANK_in_exponential4464); if (state.failed) return retval;
							}
							break;

						default :
							break loop268;
						}
					}

					pushFollow(FOLLOW_negation_in_exponential4468);
					negation814=negation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, negation814.getTree());

					}
					break;

				default :
					break loop269;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exponential"


	public static class tdm_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "tdm"
	// com/caseystella/parser/bashast.g:478:1: tdm : exponential ( ( BLANK !)* ( TIMES ^| SLASH ^| PCT ^) ( BLANK !)* exponential )* ;
	public final bashastParser.tdm_return tdm() throws RecognitionException {
		bashastParser.tdm_return retval = new bashastParser.tdm_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK816=null;
		Token TIMES817=null;
		Token SLASH818=null;
		Token PCT819=null;
		Token BLANK820=null;
		ParserRuleReturnScope exponential815 =null;
		ParserRuleReturnScope exponential821 =null;

		CommonTree BLANK816_tree=null;
		CommonTree TIMES817_tree=null;
		CommonTree SLASH818_tree=null;
		CommonTree PCT819_tree=null;
		CommonTree BLANK820_tree=null;

		try {
			// com/caseystella/parser/bashast.g:478:5: ( exponential ( ( BLANK !)* ( TIMES ^| SLASH ^| PCT ^) ( BLANK !)* exponential )* )
			// com/caseystella/parser/bashast.g:478:7: exponential ( ( BLANK !)* ( TIMES ^| SLASH ^| PCT ^) ( BLANK !)* exponential )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_exponential_in_tdm4478);
			exponential815=exponential();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exponential815.getTree());

			// com/caseystella/parser/bashast.g:478:19: ( ( BLANK !)* ( TIMES ^| SLASH ^| PCT ^) ( BLANK !)* exponential )*
			loop273:
			while (true) {
				int alt273=2;
				switch ( input.LA(1) ) {
				case BLANK:
					{
					int LA273_1 = input.LA(2);
					if ( (synpred522_bashast()) ) {
						alt273=1;
					}

					}
					break;
				case TIMES:
					{
					int LA273_28 = input.LA(2);
					if ( (synpred522_bashast()) ) {
						alt273=1;
					}

					}
					break;
				case PCT:
					{
					int LA273_37 = input.LA(2);
					if ( (synpred522_bashast()) ) {
						alt273=1;
					}

					}
					break;
				case SLASH:
					{
					int LA273_50 = input.LA(2);
					if ( (synpred522_bashast()) ) {
						alt273=1;
					}

					}
					break;
				}
				switch (alt273) {
				case 1 :
					// com/caseystella/parser/bashast.g:478:20: ( BLANK !)* ( TIMES ^| SLASH ^| PCT ^) ( BLANK !)* exponential
					{
					// com/caseystella/parser/bashast.g:478:25: ( BLANK !)*
					loop270:
					while (true) {
						int alt270=2;
						int LA270_0 = input.LA(1);
						if ( (LA270_0==BLANK) ) {
							alt270=1;
						}

						switch (alt270) {
						case 1 :
							// com/caseystella/parser/bashast.g:478:25: BLANK !
							{
							BLANK816=(Token)match(input,BLANK,FOLLOW_BLANK_in_tdm4481); if (state.failed) return retval;
							}
							break;

						default :
							break loop270;
						}
					}

					// com/caseystella/parser/bashast.g:478:27: ( TIMES ^| SLASH ^| PCT ^)
					int alt271=3;
					switch ( input.LA(1) ) {
					case TIMES:
						{
						alt271=1;
						}
						break;
					case SLASH:
						{
						alt271=2;
						}
						break;
					case PCT:
						{
						alt271=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 271, 0, input);
						throw nvae;
					}
					switch (alt271) {
						case 1 :
							// com/caseystella/parser/bashast.g:478:28: TIMES ^
							{
							TIMES817=(Token)match(input,TIMES,FOLLOW_TIMES_in_tdm4485); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TIMES817_tree = (CommonTree)adaptor.create(TIMES817);
							root_0 = (CommonTree)adaptor.becomeRoot(TIMES817_tree, root_0);
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:478:35: SLASH ^
							{
							SLASH818=(Token)match(input,SLASH,FOLLOW_SLASH_in_tdm4488); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SLASH818_tree = (CommonTree)adaptor.create(SLASH818);
							root_0 = (CommonTree)adaptor.becomeRoot(SLASH818_tree, root_0);
							}

							}
							break;
						case 3 :
							// com/caseystella/parser/bashast.g:478:42: PCT ^
							{
							PCT819=(Token)match(input,PCT,FOLLOW_PCT_in_tdm4491); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							PCT819_tree = (CommonTree)adaptor.create(PCT819);
							root_0 = (CommonTree)adaptor.becomeRoot(PCT819_tree, root_0);
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:478:52: ( BLANK !)*
					loop272:
					while (true) {
						int alt272=2;
						int LA272_0 = input.LA(1);
						if ( (LA272_0==BLANK) ) {
							alt272=1;
						}

						switch (alt272) {
						case 1 :
							// com/caseystella/parser/bashast.g:478:52: BLANK !
							{
							BLANK820=(Token)match(input,BLANK,FOLLOW_BLANK_in_tdm4494); if (state.failed) return retval;
							}
							break;

						default :
							break loop272;
						}
					}

					pushFollow(FOLLOW_exponential_in_tdm4498);
					exponential821=exponential();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exponential821.getTree());

					}
					break;

				default :
					break loop273;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tdm"


	public static class addsub_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "addsub"
	// com/caseystella/parser/bashast.g:479:1: addsub : tdm ( ( BLANK !)* ( PLUS ^| MINUS ^) ( BLANK !)* tdm )* ;
	public final bashastParser.addsub_return addsub() throws RecognitionException {
		bashastParser.addsub_return retval = new bashastParser.addsub_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK823=null;
		Token PLUS824=null;
		Token MINUS825=null;
		Token BLANK826=null;
		ParserRuleReturnScope tdm822 =null;
		ParserRuleReturnScope tdm827 =null;

		CommonTree BLANK823_tree=null;
		CommonTree PLUS824_tree=null;
		CommonTree MINUS825_tree=null;
		CommonTree BLANK826_tree=null;

		try {
			// com/caseystella/parser/bashast.g:479:8: ( tdm ( ( BLANK !)* ( PLUS ^| MINUS ^) ( BLANK !)* tdm )* )
			// com/caseystella/parser/bashast.g:479:10: tdm ( ( BLANK !)* ( PLUS ^| MINUS ^) ( BLANK !)* tdm )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_tdm_in_addsub4507);
			tdm822=tdm();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, tdm822.getTree());

			// com/caseystella/parser/bashast.g:479:14: ( ( BLANK !)* ( PLUS ^| MINUS ^) ( BLANK !)* tdm )*
			loop277:
			while (true) {
				int alt277=2;
				switch ( input.LA(1) ) {
				case BLANK:
					{
					int LA277_1 = input.LA(2);
					if ( (synpred526_bashast()) ) {
						alt277=1;
					}

					}
					break;
				case PLUS:
					{
					int LA277_27 = input.LA(2);
					if ( (synpred526_bashast()) ) {
						alt277=1;
					}

					}
					break;
				case MINUS:
					{
					int LA277_38 = input.LA(2);
					if ( (synpred526_bashast()) ) {
						alt277=1;
					}

					}
					break;
				}
				switch (alt277) {
				case 1 :
					// com/caseystella/parser/bashast.g:479:15: ( BLANK !)* ( PLUS ^| MINUS ^) ( BLANK !)* tdm
					{
					// com/caseystella/parser/bashast.g:479:20: ( BLANK !)*
					loop274:
					while (true) {
						int alt274=2;
						int LA274_0 = input.LA(1);
						if ( (LA274_0==BLANK) ) {
							alt274=1;
						}

						switch (alt274) {
						case 1 :
							// com/caseystella/parser/bashast.g:479:20: BLANK !
							{
							BLANK823=(Token)match(input,BLANK,FOLLOW_BLANK_in_addsub4510); if (state.failed) return retval;
							}
							break;

						default :
							break loop274;
						}
					}

					// com/caseystella/parser/bashast.g:479:23: ( PLUS ^| MINUS ^)
					int alt275=2;
					int LA275_0 = input.LA(1);
					if ( (LA275_0==PLUS) ) {
						alt275=1;
					}
					else if ( (LA275_0==MINUS) ) {
						alt275=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 275, 0, input);
						throw nvae;
					}

					switch (alt275) {
						case 1 :
							// com/caseystella/parser/bashast.g:479:24: PLUS ^
							{
							PLUS824=(Token)match(input,PLUS,FOLLOW_PLUS_in_addsub4515); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							PLUS824_tree = (CommonTree)adaptor.create(PLUS824);
							root_0 = (CommonTree)adaptor.becomeRoot(PLUS824_tree, root_0);
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:479:30: MINUS ^
							{
							MINUS825=(Token)match(input,MINUS,FOLLOW_MINUS_in_addsub4518); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							MINUS825_tree = (CommonTree)adaptor.create(MINUS825);
							root_0 = (CommonTree)adaptor.becomeRoot(MINUS825_tree, root_0);
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:479:42: ( BLANK !)*
					loop276:
					while (true) {
						int alt276=2;
						int LA276_0 = input.LA(1);
						if ( (LA276_0==BLANK) ) {
							alt276=1;
						}

						switch (alt276) {
						case 1 :
							// com/caseystella/parser/bashast.g:479:42: BLANK !
							{
							BLANK826=(Token)match(input,BLANK,FOLLOW_BLANK_in_addsub4521); if (state.failed) return retval;
							}
							break;

						default :
							break loop276;
						}
					}

					pushFollow(FOLLOW_tdm_in_addsub4525);
					tdm827=tdm();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tdm827.getTree());

					}
					break;

				default :
					break loop277;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "addsub"


	public static class shifts_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "shifts"
	// com/caseystella/parser/bashast.g:480:1: shifts : addsub ( ( BLANK !)* ( LSHIFT ^| RSHIFT ^) ( BLANK !)* addsub )* ;
	public final bashastParser.shifts_return shifts() throws RecognitionException {
		bashastParser.shifts_return retval = new bashastParser.shifts_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK829=null;
		Token LSHIFT830=null;
		Token RSHIFT831=null;
		Token BLANK832=null;
		ParserRuleReturnScope addsub828 =null;
		ParserRuleReturnScope addsub833 =null;

		CommonTree BLANK829_tree=null;
		CommonTree LSHIFT830_tree=null;
		CommonTree RSHIFT831_tree=null;
		CommonTree BLANK832_tree=null;

		try {
			// com/caseystella/parser/bashast.g:480:8: ( addsub ( ( BLANK !)* ( LSHIFT ^| RSHIFT ^) ( BLANK !)* addsub )* )
			// com/caseystella/parser/bashast.g:480:10: addsub ( ( BLANK !)* ( LSHIFT ^| RSHIFT ^) ( BLANK !)* addsub )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_addsub_in_shifts4534);
			addsub828=addsub();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, addsub828.getTree());

			// com/caseystella/parser/bashast.g:480:17: ( ( BLANK !)* ( LSHIFT ^| RSHIFT ^) ( BLANK !)* addsub )*
			loop281:
			while (true) {
				int alt281=2;
				switch ( input.LA(1) ) {
				case BLANK:
					{
					int LA281_1 = input.LA(2);
					if ( (synpred530_bashast()) ) {
						alt281=1;
					}

					}
					break;
				case LSHIFT:
					{
					int LA281_53 = input.LA(2);
					if ( (synpred530_bashast()) ) {
						alt281=1;
					}

					}
					break;
				case RSHIFT:
					{
					int LA281_54 = input.LA(2);
					if ( (synpred530_bashast()) ) {
						alt281=1;
					}

					}
					break;
				}
				switch (alt281) {
				case 1 :
					// com/caseystella/parser/bashast.g:480:18: ( BLANK !)* ( LSHIFT ^| RSHIFT ^) ( BLANK !)* addsub
					{
					// com/caseystella/parser/bashast.g:480:23: ( BLANK !)*
					loop278:
					while (true) {
						int alt278=2;
						int LA278_0 = input.LA(1);
						if ( (LA278_0==BLANK) ) {
							alt278=1;
						}

						switch (alt278) {
						case 1 :
							// com/caseystella/parser/bashast.g:480:23: BLANK !
							{
							BLANK829=(Token)match(input,BLANK,FOLLOW_BLANK_in_shifts4537); if (state.failed) return retval;
							}
							break;

						default :
							break loop278;
						}
					}

					// com/caseystella/parser/bashast.g:480:26: ( LSHIFT ^| RSHIFT ^)
					int alt279=2;
					int LA279_0 = input.LA(1);
					if ( (LA279_0==LSHIFT) ) {
						alt279=1;
					}
					else if ( (LA279_0==RSHIFT) ) {
						alt279=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 279, 0, input);
						throw nvae;
					}

					switch (alt279) {
						case 1 :
							// com/caseystella/parser/bashast.g:480:27: LSHIFT ^
							{
							LSHIFT830=(Token)match(input,LSHIFT,FOLLOW_LSHIFT_in_shifts4542); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LSHIFT830_tree = (CommonTree)adaptor.create(LSHIFT830);
							root_0 = (CommonTree)adaptor.becomeRoot(LSHIFT830_tree, root_0);
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:480:35: RSHIFT ^
							{
							RSHIFT831=(Token)match(input,RSHIFT,FOLLOW_RSHIFT_in_shifts4545); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RSHIFT831_tree = (CommonTree)adaptor.create(RSHIFT831);
							root_0 = (CommonTree)adaptor.becomeRoot(RSHIFT831_tree, root_0);
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:480:49: ( BLANK !)*
					loop280:
					while (true) {
						int alt280=2;
						int LA280_0 = input.LA(1);
						if ( (LA280_0==BLANK) ) {
							alt280=1;
						}

						switch (alt280) {
						case 1 :
							// com/caseystella/parser/bashast.g:480:49: BLANK !
							{
							BLANK832=(Token)match(input,BLANK,FOLLOW_BLANK_in_shifts4549); if (state.failed) return retval;
							}
							break;

						default :
							break loop280;
						}
					}

					pushFollow(FOLLOW_addsub_in_shifts4553);
					addsub833=addsub();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, addsub833.getTree());

					}
					break;

				default :
					break loop281;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "shifts"


	public static class compare_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "compare"
	// com/caseystella/parser/bashast.g:481:1: compare : shifts ( ( BLANK !)* ( LEQ ^| GEQ ^| LT ^| GT ^) ( BLANK !)* shifts )? ;
	public final bashastParser.compare_return compare() throws RecognitionException {
		bashastParser.compare_return retval = new bashastParser.compare_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK835=null;
		Token LEQ836=null;
		Token GEQ837=null;
		Token LT838=null;
		Token GT839=null;
		Token BLANK840=null;
		ParserRuleReturnScope shifts834 =null;
		ParserRuleReturnScope shifts841 =null;

		CommonTree BLANK835_tree=null;
		CommonTree LEQ836_tree=null;
		CommonTree GEQ837_tree=null;
		CommonTree LT838_tree=null;
		CommonTree GT839_tree=null;
		CommonTree BLANK840_tree=null;

		try {
			// com/caseystella/parser/bashast.g:481:9: ( shifts ( ( BLANK !)* ( LEQ ^| GEQ ^| LT ^| GT ^) ( BLANK !)* shifts )? )
			// com/caseystella/parser/bashast.g:481:11: shifts ( ( BLANK !)* ( LEQ ^| GEQ ^| LT ^| GT ^) ( BLANK !)* shifts )?
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_shifts_in_compare4562);
			shifts834=shifts();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, shifts834.getTree());

			// com/caseystella/parser/bashast.g:481:18: ( ( BLANK !)* ( LEQ ^| GEQ ^| LT ^| GT ^) ( BLANK !)* shifts )?
			int alt285=2;
			switch ( input.LA(1) ) {
				case BLANK:
					{
					int LA285_1 = input.LA(2);
					if ( (synpred536_bashast()) ) {
						alt285=1;
					}
					}
					break;
				case GEQ:
				case LEQ:
					{
					alt285=1;
					}
					break;
				case LT:
					{
					int LA285_4 = input.LA(2);
					if ( (synpred536_bashast()) ) {
						alt285=1;
					}
					}
					break;
				case GT:
					{
					int LA285_5 = input.LA(2);
					if ( (synpred536_bashast()) ) {
						alt285=1;
					}
					}
					break;
			}
			switch (alt285) {
				case 1 :
					// com/caseystella/parser/bashast.g:481:19: ( BLANK !)* ( LEQ ^| GEQ ^| LT ^| GT ^) ( BLANK !)* shifts
					{
					// com/caseystella/parser/bashast.g:481:24: ( BLANK !)*
					loop282:
					while (true) {
						int alt282=2;
						int LA282_0 = input.LA(1);
						if ( (LA282_0==BLANK) ) {
							alt282=1;
						}

						switch (alt282) {
						case 1 :
							// com/caseystella/parser/bashast.g:481:24: BLANK !
							{
							BLANK835=(Token)match(input,BLANK,FOLLOW_BLANK_in_compare4565); if (state.failed) return retval;
							}
							break;

						default :
							break loop282;
						}
					}

					// com/caseystella/parser/bashast.g:481:27: ( LEQ ^| GEQ ^| LT ^| GT ^)
					int alt283=4;
					switch ( input.LA(1) ) {
					case LEQ:
						{
						alt283=1;
						}
						break;
					case GEQ:
						{
						alt283=2;
						}
						break;
					case LT:
						{
						alt283=3;
						}
						break;
					case GT:
						{
						alt283=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 283, 0, input);
						throw nvae;
					}
					switch (alt283) {
						case 1 :
							// com/caseystella/parser/bashast.g:481:28: LEQ ^
							{
							LEQ836=(Token)match(input,LEQ,FOLLOW_LEQ_in_compare4570); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LEQ836_tree = (CommonTree)adaptor.create(LEQ836);
							root_0 = (CommonTree)adaptor.becomeRoot(LEQ836_tree, root_0);
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:481:33: GEQ ^
							{
							GEQ837=(Token)match(input,GEQ,FOLLOW_GEQ_in_compare4573); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							GEQ837_tree = (CommonTree)adaptor.create(GEQ837);
							root_0 = (CommonTree)adaptor.becomeRoot(GEQ837_tree, root_0);
							}

							}
							break;
						case 3 :
							// com/caseystella/parser/bashast.g:481:38: LT ^
							{
							LT838=(Token)match(input,LT,FOLLOW_LT_in_compare4576); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LT838_tree = (CommonTree)adaptor.create(LT838);
							root_0 = (CommonTree)adaptor.becomeRoot(LT838_tree, root_0);
							}

							}
							break;
						case 4 :
							// com/caseystella/parser/bashast.g:481:42: GT ^
							{
							GT839=(Token)match(input,GT,FOLLOW_GT_in_compare4579); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							GT839_tree = (CommonTree)adaptor.create(GT839);
							root_0 = (CommonTree)adaptor.becomeRoot(GT839_tree, root_0);
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:481:51: ( BLANK !)*
					loop284:
					while (true) {
						int alt284=2;
						int LA284_0 = input.LA(1);
						if ( (LA284_0==BLANK) ) {
							alt284=1;
						}

						switch (alt284) {
						case 1 :
							// com/caseystella/parser/bashast.g:481:51: BLANK !
							{
							BLANK840=(Token)match(input,BLANK,FOLLOW_BLANK_in_compare4582); if (state.failed) return retval;
							}
							break;

						default :
							break loop284;
						}
					}

					pushFollow(FOLLOW_shifts_in_compare4586);
					shifts841=shifts();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, shifts841.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compare"


	public static class bitwiseand_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "bitwiseand"
	// com/caseystella/parser/bashast.g:482:1: bitwiseand : compare ( ( BLANK !)* AMP ^ ( BLANK !)* compare )* ;
	public final bashastParser.bitwiseand_return bitwiseand() throws RecognitionException {
		bashastParser.bitwiseand_return retval = new bashastParser.bitwiseand_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK843=null;
		Token AMP844=null;
		Token BLANK845=null;
		ParserRuleReturnScope compare842 =null;
		ParserRuleReturnScope compare846 =null;

		CommonTree BLANK843_tree=null;
		CommonTree AMP844_tree=null;
		CommonTree BLANK845_tree=null;

		try {
			// com/caseystella/parser/bashast.g:483:2: ( compare ( ( BLANK !)* AMP ^ ( BLANK !)* compare )* )
			// com/caseystella/parser/bashast.g:483:4: compare ( ( BLANK !)* AMP ^ ( BLANK !)* compare )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_compare_in_bitwiseand4596);
			compare842=compare();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, compare842.getTree());

			// com/caseystella/parser/bashast.g:483:12: ( ( BLANK !)* AMP ^ ( BLANK !)* compare )*
			loop288:
			while (true) {
				int alt288=2;
				int LA288_0 = input.LA(1);
				if ( (LA288_0==BLANK) ) {
					int LA288_1 = input.LA(2);
					if ( (synpred539_bashast()) ) {
						alt288=1;
					}

				}
				else if ( (LA288_0==AMP) ) {
					int LA288_12 = input.LA(2);
					if ( (synpred539_bashast()) ) {
						alt288=1;
					}

				}

				switch (alt288) {
				case 1 :
					// com/caseystella/parser/bashast.g:483:13: ( BLANK !)* AMP ^ ( BLANK !)* compare
					{
					// com/caseystella/parser/bashast.g:483:18: ( BLANK !)*
					loop286:
					while (true) {
						int alt286=2;
						int LA286_0 = input.LA(1);
						if ( (LA286_0==BLANK) ) {
							alt286=1;
						}

						switch (alt286) {
						case 1 :
							// com/caseystella/parser/bashast.g:483:18: BLANK !
							{
							BLANK843=(Token)match(input,BLANK,FOLLOW_BLANK_in_bitwiseand4599); if (state.failed) return retval;
							}
							break;

						default :
							break loop286;
						}
					}

					AMP844=(Token)match(input,AMP,FOLLOW_AMP_in_bitwiseand4603); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AMP844_tree = (CommonTree)adaptor.create(AMP844);
					root_0 = (CommonTree)adaptor.becomeRoot(AMP844_tree, root_0);
					}

					// com/caseystella/parser/bashast.g:483:31: ( BLANK !)*
					loop287:
					while (true) {
						int alt287=2;
						int LA287_0 = input.LA(1);
						if ( (LA287_0==BLANK) ) {
							alt287=1;
						}

						switch (alt287) {
						case 1 :
							// com/caseystella/parser/bashast.g:483:31: BLANK !
							{
							BLANK845=(Token)match(input,BLANK,FOLLOW_BLANK_in_bitwiseand4606); if (state.failed) return retval;
							}
							break;

						default :
							break loop287;
						}
					}

					pushFollow(FOLLOW_compare_in_bitwiseand4610);
					compare846=compare();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compare846.getTree());

					}
					break;

				default :
					break loop288;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bitwiseand"


	public static class bitwisexor_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "bitwisexor"
	// com/caseystella/parser/bashast.g:484:1: bitwisexor : bitwiseand ( ( BLANK !)* CARET ^ ( BLANK !)* bitwiseand )* ;
	public final bashastParser.bitwisexor_return bitwisexor() throws RecognitionException {
		bashastParser.bitwisexor_return retval = new bashastParser.bitwisexor_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK848=null;
		Token CARET849=null;
		Token BLANK850=null;
		ParserRuleReturnScope bitwiseand847 =null;
		ParserRuleReturnScope bitwiseand851 =null;

		CommonTree BLANK848_tree=null;
		CommonTree CARET849_tree=null;
		CommonTree BLANK850_tree=null;

		try {
			// com/caseystella/parser/bashast.g:485:2: ( bitwiseand ( ( BLANK !)* CARET ^ ( BLANK !)* bitwiseand )* )
			// com/caseystella/parser/bashast.g:485:4: bitwiseand ( ( BLANK !)* CARET ^ ( BLANK !)* bitwiseand )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_bitwiseand_in_bitwisexor4620);
			bitwiseand847=bitwiseand();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseand847.getTree());

			// com/caseystella/parser/bashast.g:485:15: ( ( BLANK !)* CARET ^ ( BLANK !)* bitwiseand )*
			loop291:
			while (true) {
				int alt291=2;
				int LA291_0 = input.LA(1);
				if ( (LA291_0==BLANK) ) {
					int LA291_1 = input.LA(2);
					if ( (synpred542_bashast()) ) {
						alt291=1;
					}

				}
				else if ( (LA291_0==CARET) ) {
					int LA291_43 = input.LA(2);
					if ( (synpred542_bashast()) ) {
						alt291=1;
					}

				}

				switch (alt291) {
				case 1 :
					// com/caseystella/parser/bashast.g:485:16: ( BLANK !)* CARET ^ ( BLANK !)* bitwiseand
					{
					// com/caseystella/parser/bashast.g:485:21: ( BLANK !)*
					loop289:
					while (true) {
						int alt289=2;
						int LA289_0 = input.LA(1);
						if ( (LA289_0==BLANK) ) {
							alt289=1;
						}

						switch (alt289) {
						case 1 :
							// com/caseystella/parser/bashast.g:485:21: BLANK !
							{
							BLANK848=(Token)match(input,BLANK,FOLLOW_BLANK_in_bitwisexor4623); if (state.failed) return retval;
							}
							break;

						default :
							break loop289;
						}
					}

					CARET849=(Token)match(input,CARET,FOLLOW_CARET_in_bitwisexor4627); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CARET849_tree = (CommonTree)adaptor.create(CARET849);
					root_0 = (CommonTree)adaptor.becomeRoot(CARET849_tree, root_0);
					}

					// com/caseystella/parser/bashast.g:485:36: ( BLANK !)*
					loop290:
					while (true) {
						int alt290=2;
						int LA290_0 = input.LA(1);
						if ( (LA290_0==BLANK) ) {
							alt290=1;
						}

						switch (alt290) {
						case 1 :
							// com/caseystella/parser/bashast.g:485:36: BLANK !
							{
							BLANK850=(Token)match(input,BLANK,FOLLOW_BLANK_in_bitwisexor4630); if (state.failed) return retval;
							}
							break;

						default :
							break loop290;
						}
					}

					pushFollow(FOLLOW_bitwiseand_in_bitwisexor4634);
					bitwiseand851=bitwiseand();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseand851.getTree());

					}
					break;

				default :
					break loop291;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bitwisexor"


	public static class bitwiseor_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "bitwiseor"
	// com/caseystella/parser/bashast.g:486:1: bitwiseor : bitwisexor ( ( BLANK !)* PIPE ^ ( BLANK !)* bitwisexor )* ;
	public final bashastParser.bitwiseor_return bitwiseor() throws RecognitionException {
		bashastParser.bitwiseor_return retval = new bashastParser.bitwiseor_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK853=null;
		Token PIPE854=null;
		Token BLANK855=null;
		ParserRuleReturnScope bitwisexor852 =null;
		ParserRuleReturnScope bitwisexor856 =null;

		CommonTree BLANK853_tree=null;
		CommonTree PIPE854_tree=null;
		CommonTree BLANK855_tree=null;

		try {
			// com/caseystella/parser/bashast.g:487:2: ( bitwisexor ( ( BLANK !)* PIPE ^ ( BLANK !)* bitwisexor )* )
			// com/caseystella/parser/bashast.g:487:4: bitwisexor ( ( BLANK !)* PIPE ^ ( BLANK !)* bitwisexor )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_bitwisexor_in_bitwiseor4644);
			bitwisexor852=bitwisexor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwisexor852.getTree());

			// com/caseystella/parser/bashast.g:487:15: ( ( BLANK !)* PIPE ^ ( BLANK !)* bitwisexor )*
			loop294:
			while (true) {
				int alt294=2;
				int LA294_0 = input.LA(1);
				if ( (LA294_0==BLANK) ) {
					int LA294_1 = input.LA(2);
					if ( (synpred545_bashast()) ) {
						alt294=1;
					}

				}
				else if ( (LA294_0==PIPE) ) {
					int LA294_16 = input.LA(2);
					if ( (synpred545_bashast()) ) {
						alt294=1;
					}

				}

				switch (alt294) {
				case 1 :
					// com/caseystella/parser/bashast.g:487:16: ( BLANK !)* PIPE ^ ( BLANK !)* bitwisexor
					{
					// com/caseystella/parser/bashast.g:487:21: ( BLANK !)*
					loop292:
					while (true) {
						int alt292=2;
						int LA292_0 = input.LA(1);
						if ( (LA292_0==BLANK) ) {
							alt292=1;
						}

						switch (alt292) {
						case 1 :
							// com/caseystella/parser/bashast.g:487:21: BLANK !
							{
							BLANK853=(Token)match(input,BLANK,FOLLOW_BLANK_in_bitwiseor4647); if (state.failed) return retval;
							}
							break;

						default :
							break loop292;
						}
					}

					PIPE854=(Token)match(input,PIPE,FOLLOW_PIPE_in_bitwiseor4651); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PIPE854_tree = (CommonTree)adaptor.create(PIPE854);
					root_0 = (CommonTree)adaptor.becomeRoot(PIPE854_tree, root_0);
					}

					// com/caseystella/parser/bashast.g:487:35: ( BLANK !)*
					loop293:
					while (true) {
						int alt293=2;
						int LA293_0 = input.LA(1);
						if ( (LA293_0==BLANK) ) {
							alt293=1;
						}

						switch (alt293) {
						case 1 :
							// com/caseystella/parser/bashast.g:487:35: BLANK !
							{
							BLANK855=(Token)match(input,BLANK,FOLLOW_BLANK_in_bitwiseor4654); if (state.failed) return retval;
							}
							break;

						default :
							break loop293;
						}
					}

					pushFollow(FOLLOW_bitwisexor_in_bitwiseor4658);
					bitwisexor856=bitwisexor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwisexor856.getTree());

					}
					break;

				default :
					break loop294;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bitwiseor"


	public static class logicand_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "logicand"
	// com/caseystella/parser/bashast.g:488:1: logicand : bitwiseor ( ( BLANK !)* LOGICAND ^ ( BLANK !)* bitwiseor )* ;
	public final bashastParser.logicand_return logicand() throws RecognitionException {
		bashastParser.logicand_return retval = new bashastParser.logicand_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK858=null;
		Token LOGICAND859=null;
		Token BLANK860=null;
		ParserRuleReturnScope bitwiseor857 =null;
		ParserRuleReturnScope bitwiseor861 =null;

		CommonTree BLANK858_tree=null;
		CommonTree LOGICAND859_tree=null;
		CommonTree BLANK860_tree=null;

		try {
			// com/caseystella/parser/bashast.g:488:9: ( bitwiseor ( ( BLANK !)* LOGICAND ^ ( BLANK !)* bitwiseor )* )
			// com/caseystella/parser/bashast.g:488:11: bitwiseor ( ( BLANK !)* LOGICAND ^ ( BLANK !)* bitwiseor )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_bitwiseor_in_logicand4666);
			bitwiseor857=bitwiseor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseor857.getTree());

			// com/caseystella/parser/bashast.g:488:21: ( ( BLANK !)* LOGICAND ^ ( BLANK !)* bitwiseor )*
			loop297:
			while (true) {
				int alt297=2;
				int LA297_0 = input.LA(1);
				if ( (LA297_0==BLANK) ) {
					int LA297_1 = input.LA(2);
					if ( (synpred548_bashast()) ) {
						alt297=1;
					}

				}
				else if ( (LA297_0==LOGICAND) ) {
					int LA297_9 = input.LA(2);
					if ( (synpred548_bashast()) ) {
						alt297=1;
					}

				}

				switch (alt297) {
				case 1 :
					// com/caseystella/parser/bashast.g:488:22: ( BLANK !)* LOGICAND ^ ( BLANK !)* bitwiseor
					{
					// com/caseystella/parser/bashast.g:488:27: ( BLANK !)*
					loop295:
					while (true) {
						int alt295=2;
						int LA295_0 = input.LA(1);
						if ( (LA295_0==BLANK) ) {
							alt295=1;
						}

						switch (alt295) {
						case 1 :
							// com/caseystella/parser/bashast.g:488:27: BLANK !
							{
							BLANK858=(Token)match(input,BLANK,FOLLOW_BLANK_in_logicand4669); if (state.failed) return retval;
							}
							break;

						default :
							break loop295;
						}
					}

					LOGICAND859=(Token)match(input,LOGICAND,FOLLOW_LOGICAND_in_logicand4673); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOGICAND859_tree = (CommonTree)adaptor.create(LOGICAND859);
					root_0 = (CommonTree)adaptor.becomeRoot(LOGICAND859_tree, root_0);
					}

					// com/caseystella/parser/bashast.g:488:45: ( BLANK !)*
					loop296:
					while (true) {
						int alt296=2;
						int LA296_0 = input.LA(1);
						if ( (LA296_0==BLANK) ) {
							alt296=1;
						}

						switch (alt296) {
						case 1 :
							// com/caseystella/parser/bashast.g:488:45: BLANK !
							{
							BLANK860=(Token)match(input,BLANK,FOLLOW_BLANK_in_logicand4676); if (state.failed) return retval;
							}
							break;

						default :
							break loop296;
						}
					}

					pushFollow(FOLLOW_bitwiseor_in_logicand4680);
					bitwiseor861=bitwiseor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseor861.getTree());

					}
					break;

				default :
					break loop297;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "logicand"


	public static class logicor_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "logicor"
	// com/caseystella/parser/bashast.g:489:1: logicor : logicand ( ( BLANK !)* LOGICOR ^ ( BLANK !)* logicand )* ;
	public final bashastParser.logicor_return logicor() throws RecognitionException {
		bashastParser.logicor_return retval = new bashastParser.logicor_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK863=null;
		Token LOGICOR864=null;
		Token BLANK865=null;
		ParserRuleReturnScope logicand862 =null;
		ParserRuleReturnScope logicand866 =null;

		CommonTree BLANK863_tree=null;
		CommonTree LOGICOR864_tree=null;
		CommonTree BLANK865_tree=null;

		try {
			// com/caseystella/parser/bashast.g:489:9: ( logicand ( ( BLANK !)* LOGICOR ^ ( BLANK !)* logicand )* )
			// com/caseystella/parser/bashast.g:489:11: logicand ( ( BLANK !)* LOGICOR ^ ( BLANK !)* logicand )*
			{
			root_0 = (CommonTree)adaptor.nil();


			pushFollow(FOLLOW_logicand_in_logicor4689);
			logicand862=logicand();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, logicand862.getTree());

			// com/caseystella/parser/bashast.g:489:20: ( ( BLANK !)* LOGICOR ^ ( BLANK !)* logicand )*
			loop300:
			while (true) {
				int alt300=2;
				int LA300_0 = input.LA(1);
				if ( (LA300_0==BLANK) ) {
					int LA300_3 = input.LA(2);
					if ( (synpred551_bashast()) ) {
						alt300=1;
					}

				}
				else if ( (LA300_0==LOGICOR) ) {
					int LA300_9 = input.LA(2);
					if ( (synpred551_bashast()) ) {
						alt300=1;
					}

				}

				switch (alt300) {
				case 1 :
					// com/caseystella/parser/bashast.g:489:21: ( BLANK !)* LOGICOR ^ ( BLANK !)* logicand
					{
					// com/caseystella/parser/bashast.g:489:26: ( BLANK !)*
					loop298:
					while (true) {
						int alt298=2;
						int LA298_0 = input.LA(1);
						if ( (LA298_0==BLANK) ) {
							alt298=1;
						}

						switch (alt298) {
						case 1 :
							// com/caseystella/parser/bashast.g:489:26: BLANK !
							{
							BLANK863=(Token)match(input,BLANK,FOLLOW_BLANK_in_logicor4692); if (state.failed) return retval;
							}
							break;

						default :
							break loop298;
						}
					}

					LOGICOR864=(Token)match(input,LOGICOR,FOLLOW_LOGICOR_in_logicor4696); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOGICOR864_tree = (CommonTree)adaptor.create(LOGICOR864);
					root_0 = (CommonTree)adaptor.becomeRoot(LOGICOR864_tree, root_0);
					}

					// com/caseystella/parser/bashast.g:489:43: ( BLANK !)*
					loop299:
					while (true) {
						int alt299=2;
						int LA299_0 = input.LA(1);
						if ( (LA299_0==BLANK) ) {
							alt299=1;
						}

						switch (alt299) {
						case 1 :
							// com/caseystella/parser/bashast.g:489:43: BLANK !
							{
							BLANK865=(Token)match(input,BLANK,FOLLOW_BLANK_in_logicor4699); if (state.failed) return retval;
							}
							break;

						default :
							break loop299;
						}
					}

					pushFollow(FOLLOW_logicand_in_logicor4703);
					logicand866=logicand();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, logicand866.getTree());

					}
					break;

				default :
					break loop300;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "logicor"


	public static class arithmetic_condition_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arithmetic_condition"
	// com/caseystella/parser/bashast.g:491:1: arithmetic_condition : cnd= logicor QMARK t= logicor COLON f= logicor -> ^( ARITHMETIC_CONDITION $cnd $t $f) ;
	public final bashastParser.arithmetic_condition_return arithmetic_condition() throws RecognitionException {
		bashastParser.arithmetic_condition_return retval = new bashastParser.arithmetic_condition_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token QMARK867=null;
		Token COLON868=null;
		ParserRuleReturnScope cnd =null;
		ParserRuleReturnScope t =null;
		ParserRuleReturnScope f =null;

		CommonTree QMARK867_tree=null;
		CommonTree COLON868_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_QMARK=new RewriteRuleTokenStream(adaptor,"token QMARK");
		RewriteRuleSubtreeStream stream_logicor=new RewriteRuleSubtreeStream(adaptor,"rule logicor");

		try {
			// com/caseystella/parser/bashast.g:492:2: (cnd= logicor QMARK t= logicor COLON f= logicor -> ^( ARITHMETIC_CONDITION $cnd $t $f) )
			// com/caseystella/parser/bashast.g:492:4: cnd= logicor QMARK t= logicor COLON f= logicor
			{
			pushFollow(FOLLOW_logicor_in_arithmetic_condition4716);
			cnd=logicor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_logicor.add(cnd.getTree());
			QMARK867=(Token)match(input,QMARK,FOLLOW_QMARK_in_arithmetic_condition4718); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_QMARK.add(QMARK867);

			pushFollow(FOLLOW_logicor_in_arithmetic_condition4722);
			t=logicor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_logicor.add(t.getTree());
			COLON868=(Token)match(input,COLON,FOLLOW_COLON_in_arithmetic_condition4724); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(COLON868);

			pushFollow(FOLLOW_logicor_in_arithmetic_condition4728);
			f=logicor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_logicor.add(f.getTree());
			// AST REWRITE
			// elements: f, t, cnd
			// token labels: 
			// rule labels: f, retval, t, cnd
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.getTree():null);
			RewriteRuleSubtreeStream stream_cnd=new RewriteRuleSubtreeStream(adaptor,"rule cnd",cnd!=null?cnd.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 492:48: -> ^( ARITHMETIC_CONDITION $cnd $t $f)
			{
				// com/caseystella/parser/bashast.g:492:51: ^( ARITHMETIC_CONDITION $cnd $t $f)
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARITHMETIC_CONDITION, "ARITHMETIC_CONDITION"), root_1);
				adaptor.addChild(root_1, stream_cnd.nextTree());
				adaptor.addChild(root_1, stream_t.nextTree());
				adaptor.addChild(root_1, stream_f.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "arithmetic_condition"


	public static class arithmetic_assignment_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "arithmetic_assignment"
	// com/caseystella/parser/bashast.g:493:1: arithmetic_assignment : ( name ( BLANK !)* ( EQUALS ^| ARITH_ASSIGN ^) ( BLANK !)* )? logicor ;
	public final bashastParser.arithmetic_assignment_return arithmetic_assignment() throws RecognitionException {
		bashastParser.arithmetic_assignment_return retval = new bashastParser.arithmetic_assignment_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token BLANK870=null;
		Token EQUALS871=null;
		Token ARITH_ASSIGN872=null;
		Token BLANK873=null;
		ParserRuleReturnScope name869 =null;
		ParserRuleReturnScope logicor874 =null;

		CommonTree BLANK870_tree=null;
		CommonTree EQUALS871_tree=null;
		CommonTree ARITH_ASSIGN872_tree=null;
		CommonTree BLANK873_tree=null;

		try {
			// com/caseystella/parser/bashast.g:494:2: ( ( name ( BLANK !)* ( EQUALS ^| ARITH_ASSIGN ^) ( BLANK !)* )? logicor )
			// com/caseystella/parser/bashast.g:494:4: ( name ( BLANK !)* ( EQUALS ^| ARITH_ASSIGN ^) ( BLANK !)* )? logicor
			{
			root_0 = (CommonTree)adaptor.nil();


			// com/caseystella/parser/bashast.g:494:4: ( name ( BLANK !)* ( EQUALS ^| ARITH_ASSIGN ^) ( BLANK !)* )?
			int alt304=2;
			int LA304_0 = input.LA(1);
			if ( (LA304_0==LETTER||LA304_0==NAME||LA304_0==138) ) {
				int LA304_1 = input.LA(2);
				if ( (synpred555_bashast()) ) {
					alt304=1;
				}
			}
			switch (alt304) {
				case 1 :
					// com/caseystella/parser/bashast.g:494:5: name ( BLANK !)* ( EQUALS ^| ARITH_ASSIGN ^) ( BLANK !)*
					{
					pushFollow(FOLLOW_name_in_arithmetic_assignment4752);
					name869=name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, name869.getTree());

					// com/caseystella/parser/bashast.g:494:15: ( BLANK !)*
					loop301:
					while (true) {
						int alt301=2;
						int LA301_0 = input.LA(1);
						if ( (LA301_0==BLANK) ) {
							alt301=1;
						}

						switch (alt301) {
						case 1 :
							// com/caseystella/parser/bashast.g:494:15: BLANK !
							{
							BLANK870=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic_assignment4754); if (state.failed) return retval;
							}
							break;

						default :
							break loop301;
						}
					}

					// com/caseystella/parser/bashast.g:494:18: ( EQUALS ^| ARITH_ASSIGN ^)
					int alt302=2;
					int LA302_0 = input.LA(1);
					if ( (LA302_0==EQUALS) ) {
						alt302=1;
					}
					else if ( (LA302_0==ARITH_ASSIGN) ) {
						alt302=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 302, 0, input);
						throw nvae;
					}

					switch (alt302) {
						case 1 :
							// com/caseystella/parser/bashast.g:494:19: EQUALS ^
							{
							EQUALS871=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arithmetic_assignment4759); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQUALS871_tree = (CommonTree)adaptor.create(EQUALS871);
							root_0 = (CommonTree)adaptor.becomeRoot(EQUALS871_tree, root_0);
							}

							}
							break;
						case 2 :
							// com/caseystella/parser/bashast.g:494:27: ARITH_ASSIGN ^
							{
							ARITH_ASSIGN872=(Token)match(input,ARITH_ASSIGN,FOLLOW_ARITH_ASSIGN_in_arithmetic_assignment4762); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ARITH_ASSIGN872_tree = (CommonTree)adaptor.create(ARITH_ASSIGN872);
							root_0 = (CommonTree)adaptor.becomeRoot(ARITH_ASSIGN872_tree, root_0);
							}

							}
							break;

					}

					// com/caseystella/parser/bashast.g:494:47: ( BLANK !)*
					loop303:
					while (true) {
						int alt303=2;
						int LA303_0 = input.LA(1);
						if ( (LA303_0==BLANK) ) {
							alt303=1;
						}

						switch (alt303) {
						case 1 :
							// com/caseystella/parser/bashast.g:494:47: BLANK !
							{
							BLANK873=(Token)match(input,BLANK,FOLLOW_BLANK_in_arithmetic_assignment4766); if (state.failed) return retval;
							}
							break;

						default :
							break loop303;
						}
					}

					}
					break;

			}

			pushFollow(FOLLOW_logicor_in_arithmetic_assignment4772);
			logicor874=logicor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, logicor874.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "arithmetic_assignment"


	public static class proc_sub_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "proc_sub"
	// com/caseystella/parser/bashast.g:496:1: proc_sub : (dir= LT |dir= GT ) LPAREN ( BLANK )* clist ( BLANK )* RPAREN -> ^( PROC_SUB $dir clist ) ;
	public final bashastParser.proc_sub_return proc_sub() throws RecognitionException {
		bashastParser.proc_sub_return retval = new bashastParser.proc_sub_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token dir=null;
		Token LPAREN875=null;
		Token BLANK876=null;
		Token BLANK878=null;
		Token RPAREN879=null;
		ParserRuleReturnScope clist877 =null;

		CommonTree dir_tree=null;
		CommonTree LPAREN875_tree=null;
		CommonTree BLANK876_tree=null;
		CommonTree BLANK878_tree=null;
		CommonTree RPAREN879_tree=null;
		RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_clist=new RewriteRuleSubtreeStream(adaptor,"rule clist");

		try {
			// com/caseystella/parser/bashast.g:496:9: ( (dir= LT |dir= GT ) LPAREN ( BLANK )* clist ( BLANK )* RPAREN -> ^( PROC_SUB $dir clist ) )
			// com/caseystella/parser/bashast.g:496:11: (dir= LT |dir= GT ) LPAREN ( BLANK )* clist ( BLANK )* RPAREN
			{
			// com/caseystella/parser/bashast.g:496:11: (dir= LT |dir= GT )
			int alt305=2;
			int LA305_0 = input.LA(1);
			if ( (LA305_0==LT) ) {
				alt305=1;
			}
			else if ( (LA305_0==GT) ) {
				alt305=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 305, 0, input);
				throw nvae;
			}

			switch (alt305) {
				case 1 :
					// com/caseystella/parser/bashast.g:496:12: dir= LT
					{
					dir=(Token)match(input,LT,FOLLOW_LT_in_proc_sub4782); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LT.add(dir);

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:496:19: dir= GT
					{
					dir=(Token)match(input,GT,FOLLOW_GT_in_proc_sub4786); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_GT.add(dir);

					}
					break;

			}

			LPAREN875=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_proc_sub4788); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN875);

			// com/caseystella/parser/bashast.g:496:33: ( BLANK )*
			loop306:
			while (true) {
				int alt306=2;
				int LA306_0 = input.LA(1);
				if ( (LA306_0==BLANK) ) {
					int LA306_2 = input.LA(2);
					if ( (synpred557_bashast()) ) {
						alt306=1;
					}

				}

				switch (alt306) {
				case 1 :
					// com/caseystella/parser/bashast.g:496:33: BLANK
					{
					BLANK876=(Token)match(input,BLANK,FOLLOW_BLANK_in_proc_sub4790); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK876);

					}
					break;

				default :
					break loop306;
				}
			}

			pushFollow(FOLLOW_clist_in_proc_sub4793);
			clist877=clist();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_clist.add(clist877.getTree());
			// com/caseystella/parser/bashast.g:496:46: ( BLANK )*
			loop307:
			while (true) {
				int alt307=2;
				int LA307_0 = input.LA(1);
				if ( (LA307_0==BLANK) ) {
					alt307=1;
				}

				switch (alt307) {
				case 1 :
					// com/caseystella/parser/bashast.g:496:46: BLANK
					{
					BLANK878=(Token)match(input,BLANK,FOLLOW_BLANK_in_proc_sub4795); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_BLANK.add(BLANK878);

					}
					break;

				default :
					break loop307;
				}
			}

			RPAREN879=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_proc_sub4798); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN879);

			// AST REWRITE
			// elements: clist, dir
			// token labels: dir
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_dir=new RewriteRuleTokenStream(adaptor,"token dir",dir);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 496:60: -> ^( PROC_SUB $dir clist )
			{
				// com/caseystella/parser/bashast.g:496:63: ^( PROC_SUB $dir clist )
				{
				CommonTree root_1 = (CommonTree)adaptor.nil();
				root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROC_SUB, "PROC_SUB"), root_1);
				adaptor.addChild(root_1, stream_dir.nextNode());
				adaptor.addChild(root_1, stream_clist.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "proc_sub"


	public static class function_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "function"
	// com/caseystella/parser/bashast.g:498:1: function : ( FUNCTION ( BLANK )+ fname ( ( BLANK )* parens )? wspace compound_command ( redirect )* -> ^( FUNCTION fname compound_command ( redirect )* ) | fname ( BLANK )* parens wspace compound_command ( redirect )* -> ^( FUNCTION[\"function\"] fname compound_command ( redirect )* ) );
	public final bashastParser.function_return function() throws RecognitionException {
		bashastParser.function_return retval = new bashastParser.function_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token FUNCTION880=null;
		Token BLANK881=null;
		Token BLANK883=null;
		Token BLANK889=null;
		ParserRuleReturnScope fname882 =null;
		ParserRuleReturnScope parens884 =null;
		ParserRuleReturnScope wspace885 =null;
		ParserRuleReturnScope compound_command886 =null;
		ParserRuleReturnScope redirect887 =null;
		ParserRuleReturnScope fname888 =null;
		ParserRuleReturnScope parens890 =null;
		ParserRuleReturnScope wspace891 =null;
		ParserRuleReturnScope compound_command892 =null;
		ParserRuleReturnScope redirect893 =null;

		CommonTree FUNCTION880_tree=null;
		CommonTree BLANK881_tree=null;
		CommonTree BLANK883_tree=null;
		CommonTree BLANK889_tree=null;
		RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
		RewriteRuleTokenStream stream_BLANK=new RewriteRuleTokenStream(adaptor,"token BLANK");
		RewriteRuleSubtreeStream stream_wspace=new RewriteRuleSubtreeStream(adaptor,"rule wspace");
		RewriteRuleSubtreeStream stream_parens=new RewriteRuleSubtreeStream(adaptor,"rule parens");
		RewriteRuleSubtreeStream stream_redirect=new RewriteRuleSubtreeStream(adaptor,"rule redirect");
		RewriteRuleSubtreeStream stream_compound_command=new RewriteRuleSubtreeStream(adaptor,"rule compound_command");
		RewriteRuleSubtreeStream stream_fname=new RewriteRuleSubtreeStream(adaptor,"rule fname");

		try {
			// com/caseystella/parser/bashast.g:498:9: ( FUNCTION ( BLANK )+ fname ( ( BLANK )* parens )? wspace compound_command ( redirect )* -> ^( FUNCTION fname compound_command ( redirect )* ) | fname ( BLANK )* parens wspace compound_command ( redirect )* -> ^( FUNCTION[\"function\"] fname compound_command ( redirect )* ) )
			int alt314=2;
			alt314 = dfa314.predict(input);
			switch (alt314) {
				case 1 :
					// com/caseystella/parser/bashast.g:498:11: FUNCTION ( BLANK )+ fname ( ( BLANK )* parens )? wspace compound_command ( redirect )*
					{
					FUNCTION880=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_function4816); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_FUNCTION.add(FUNCTION880);

					// com/caseystella/parser/bashast.g:498:20: ( BLANK )+
					int cnt308=0;
					loop308:
					while (true) {
						int alt308=2;
						int LA308_0 = input.LA(1);
						if ( (LA308_0==BLANK) ) {
							alt308=1;
						}

						switch (alt308) {
						case 1 :
							// com/caseystella/parser/bashast.g:498:20: BLANK
							{
							BLANK881=(Token)match(input,BLANK,FOLLOW_BLANK_in_function4818); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK881);

							}
							break;

						default :
							if ( cnt308 >= 1 ) break loop308;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(308, input);
							throw eee;
						}
						cnt308++;
					}

					pushFollow(FOLLOW_fname_in_function4821);
					fname882=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname882.getTree());
					// com/caseystella/parser/bashast.g:498:33: ( ( BLANK )* parens )?
					int alt310=2;
					alt310 = dfa310.predict(input);
					switch (alt310) {
						case 1 :
							// com/caseystella/parser/bashast.g:498:34: ( BLANK )* parens
							{
							// com/caseystella/parser/bashast.g:498:34: ( BLANK )*
							loop309:
							while (true) {
								int alt309=2;
								int LA309_0 = input.LA(1);
								if ( (LA309_0==BLANK) ) {
									alt309=1;
								}

								switch (alt309) {
								case 1 :
									// com/caseystella/parser/bashast.g:498:34: BLANK
									{
									BLANK883=(Token)match(input,BLANK,FOLLOW_BLANK_in_function4824); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_BLANK.add(BLANK883);

									}
									break;

								default :
									break loop309;
								}
							}

							pushFollow(FOLLOW_parens_in_function4827);
							parens884=parens();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_parens.add(parens884.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_wspace_in_function4831);
					wspace885=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace885.getTree());
					pushFollow(FOLLOW_compound_command_in_function4833);
					compound_command886=compound_command();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_compound_command.add(compound_command886.getTree());
					// com/caseystella/parser/bashast.g:498:74: ( redirect )*
					loop311:
					while (true) {
						int alt311=2;
						alt311 = dfa311.predict(input);
						switch (alt311) {
						case 1 :
							// com/caseystella/parser/bashast.g:498:74: redirect
							{
							pushFollow(FOLLOW_redirect_in_function4835);
							redirect887=redirect();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_redirect.add(redirect887.getTree());
							}
							break;

						default :
							break loop311;
						}
					}

					// AST REWRITE
					// elements: FUNCTION, compound_command, fname, redirect
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 498:84: -> ^( FUNCTION fname compound_command ( redirect )* )
					{
						// com/caseystella/parser/bashast.g:498:87: ^( FUNCTION fname compound_command ( redirect )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
						adaptor.addChild(root_1, stream_fname.nextTree());
						adaptor.addChild(root_1, stream_compound_command.nextTree());
						// com/caseystella/parser/bashast.g:498:121: ( redirect )*
						while ( stream_redirect.hasNext() ) {
							adaptor.addChild(root_1, stream_redirect.nextTree());
						}
						stream_redirect.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// com/caseystella/parser/bashast.g:499:4: fname ( BLANK )* parens wspace compound_command ( redirect )*
					{
					pushFollow(FOLLOW_fname_in_function4854);
					fname888=fname();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_fname.add(fname888.getTree());
					// com/caseystella/parser/bashast.g:499:10: ( BLANK )*
					loop312:
					while (true) {
						int alt312=2;
						int LA312_0 = input.LA(1);
						if ( (LA312_0==BLANK) ) {
							alt312=1;
						}

						switch (alt312) {
						case 1 :
							// com/caseystella/parser/bashast.g:499:10: BLANK
							{
							BLANK889=(Token)match(input,BLANK,FOLLOW_BLANK_in_function4856); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_BLANK.add(BLANK889);

							}
							break;

						default :
							break loop312;
						}
					}

					pushFollow(FOLLOW_parens_in_function4859);
					parens890=parens();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parens.add(parens890.getTree());
					pushFollow(FOLLOW_wspace_in_function4861);
					wspace891=wspace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_wspace.add(wspace891.getTree());
					pushFollow(FOLLOW_compound_command_in_function4863);
					compound_command892=compound_command();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_compound_command.add(compound_command892.getTree());
					// com/caseystella/parser/bashast.g:499:48: ( redirect )*
					loop313:
					while (true) {
						int alt313=2;
						alt313 = dfa313.predict(input);
						switch (alt313) {
						case 1 :
							// com/caseystella/parser/bashast.g:499:48: redirect
							{
							pushFollow(FOLLOW_redirect_in_function4865);
							redirect893=redirect();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_redirect.add(redirect893.getTree());
							}
							break;

						default :
							break loop313;
						}
					}

					// AST REWRITE
					// elements: redirect, fname, compound_command
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (CommonTree)adaptor.nil();
					// 499:58: -> ^( FUNCTION[\"function\"] fname compound_command ( redirect )* )
					{
						// com/caseystella/parser/bashast.g:499:61: ^( FUNCTION[\"function\"] fname compound_command ( redirect )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.nil();
						root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FUNCTION, "function"), root_1);
						adaptor.addChild(root_1, stream_fname.nextTree());
						adaptor.addChild(root_1, stream_compound_command.nextTree());
						// com/caseystella/parser/bashast.g:499:107: ( redirect )*
						while ( stream_redirect.hasNext() ) {
							adaptor.addChild(root_1, stream_redirect.nextTree());
						}
						stream_redirect.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function"


	public static class parens_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "parens"
	// com/caseystella/parser/bashast.g:500:1: parens : LPAREN ( BLANK )* RPAREN ;
	public final bashastParser.parens_return parens() throws RecognitionException {
		bashastParser.parens_return retval = new bashastParser.parens_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token LPAREN894=null;
		Token BLANK895=null;
		Token RPAREN896=null;

		CommonTree LPAREN894_tree=null;
		CommonTree BLANK895_tree=null;
		CommonTree RPAREN896_tree=null;

		try {
			// com/caseystella/parser/bashast.g:500:8: ( LPAREN ( BLANK )* RPAREN )
			// com/caseystella/parser/bashast.g:500:10: LPAREN ( BLANK )* RPAREN
			{
			root_0 = (CommonTree)adaptor.nil();


			LPAREN894=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parens4887); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN894_tree = (CommonTree)adaptor.create(LPAREN894);
			adaptor.addChild(root_0, LPAREN894_tree);
			}

			// com/caseystella/parser/bashast.g:500:17: ( BLANK )*
			loop315:
			while (true) {
				int alt315=2;
				int LA315_0 = input.LA(1);
				if ( (LA315_0==BLANK) ) {
					alt315=1;
				}

				switch (alt315) {
				case 1 :
					// com/caseystella/parser/bashast.g:500:17: BLANK
					{
					BLANK895=(Token)match(input,BLANK,FOLLOW_BLANK_in_parens4889); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BLANK895_tree = (CommonTree)adaptor.create(BLANK895);
					adaptor.addChild(root_0, BLANK895_tree);
					}

					}
					break;

				default :
					break loop315;
				}
			}

			RPAREN896=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parens4892); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN896_tree = (CommonTree)adaptor.create(RPAREN896);
			adaptor.addChild(root_0, RPAREN896_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parens"


	public static class name_return extends ParserRuleReturnScope {
		CommonTree tree;
		@Override
		public CommonTree getTree() { return tree; }
	};


	// $ANTLR start "name"
	// com/caseystella/parser/bashast.g:501:1: name : ( NAME | LETTER | '_' );
	public final bashastParser.name_return name() throws RecognitionException {
		bashastParser.name_return retval = new bashastParser.name_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token set897=null;

		CommonTree set897_tree=null;

		try {
			// com/caseystella/parser/bashast.g:501:6: ( NAME | LETTER | '_' )
			// com/caseystella/parser/bashast.g:
			{
			root_0 = (CommonTree)adaptor.nil();


			set897=input.LT(1);
			if ( input.LA(1)==LETTER||input.LA(1)==NAME||input.LA(1)==138 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set897));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "name"

	// $ANTLR start synpred5_bashast
	public final void synpred5_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:86:4: ( nqstr )
		// com/caseystella/parser/bashast.g:86:4: nqstr
		{
		pushFollow(FOLLOW_nqstr_in_synpred5_bashast291);
		nqstr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred5_bashast

	// $ANTLR start synpred11_bashast
	public final void synpred11_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:86:49: ( TICK )
		// com/caseystella/parser/bashast.g:86:49: TICK
		{
		match(input,TICK,FOLLOW_TICK_in_synpred11_bashast303); if (state.failed) return;

		}

	}
	// $ANTLR end synpred11_bashast

	// $ANTLR start synpred18_bashast
	public final void synpred18_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:86:95: ( SQUOTE )
		// com/caseystella/parser/bashast.g:86:95: SQUOTE
		{
		match(input,SQUOTE,FOLLOW_SQUOTE_in_synpred18_bashast317); if (state.failed) return;

		}

	}
	// $ANTLR end synpred18_bashast

	// $ANTLR start synpred19_bashast
	public final void synpred19_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:86:102: ( QUOTE )
		// com/caseystella/parser/bashast.g:86:102: QUOTE
		{
		match(input,QUOTE,FOLLOW_QUOTE_in_synpred19_bashast319); if (state.failed) return;

		}

	}
	// $ANTLR end synpred19_bashast

	// $ANTLR start synpred25_bashast
	public final void synpred25_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:92:5: ( function )
		// com/caseystella/parser/bashast.g:92:5: function
		{
		pushFollow(FOLLOW_function_in_synpred25_bashast382);
		function();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred25_bashast

	// $ANTLR start synpred28_bashast
	public final void synpred28_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:92:50: ( BLANK )
		// com/caseystella/parser/bashast.g:92:50: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred28_bashast398); if (state.failed) return;

		}

	}
	// $ANTLR end synpred28_bashast

	// $ANTLR start synpred29_bashast
	public final void synpred29_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:92:54: ( function )
		// com/caseystella/parser/bashast.g:92:54: function
		{
		pushFollow(FOLLOW_function_in_synpred29_bashast403);
		function();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred29_bashast

	// $ANTLR start synpred37_bashast
	public final void synpred37_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:94:64: ( BLANK )
		// com/caseystella/parser/bashast.g:94:64: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred37_bashast442); if (state.failed) return;

		}

	}
	// $ANTLR end synpred37_bashast

	// $ANTLR start synpred38_bashast
	public final void synpred38_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:94:18: ( ( ( BLANK )? ';' | ( BLANK )? '&' | ( ( BLANK )? EOL )+ ) ( BLANK )? list_level_1 )
		// com/caseystella/parser/bashast.g:94:18: ( ( BLANK )? ';' | ( BLANK )? '&' | ( ( BLANK )? EOL )+ ) ( BLANK )? list_level_1
		{
		// com/caseystella/parser/bashast.g:94:18: ( ( BLANK )? ';' | ( BLANK )? '&' | ( ( BLANK )? EOL )+ )
		int alt326=3;
		switch ( input.LA(1) ) {
		case BLANK:
			{
			switch ( input.LA(2) ) {
			case SEMIC:
				{
				alt326=1;
				}
				break;
			case AMP:
				{
				alt326=2;
				}
				break;
			case EOL:
				{
				alt326=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				int nvaeMark = input.mark();
				try {
					input.consume();
					NoViableAltException nvae =
						new NoViableAltException("", 326, 1, input);
					throw nvae;
				} finally {
					input.rewind(nvaeMark);
				}
			}
			}
			break;
		case SEMIC:
			{
			alt326=1;
			}
			break;
		case AMP:
			{
			alt326=2;
			}
			break;
		case EOL:
			{
			alt326=3;
			}
			break;
		default:
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 326, 0, input);
			throw nvae;
		}
		switch (alt326) {
			case 1 :
				// com/caseystella/parser/bashast.g:94:19: ( BLANK )? ';'
				{
				// com/caseystella/parser/bashast.g:94:24: ( BLANK )?
				int alt322=2;
				int LA322_0 = input.LA(1);
				if ( (LA322_0==BLANK) ) {
					alt322=1;
				}
				switch (alt322) {
					case 1 :
						// com/caseystella/parser/bashast.g:94:24: BLANK
						{
						match(input,BLANK,FOLLOW_BLANK_in_synpred38_bashast420); if (state.failed) return;

						}
						break;

				}

				match(input,SEMIC,FOLLOW_SEMIC_in_synpred38_bashast423); if (state.failed) return;

				}
				break;
			case 2 :
				// com/caseystella/parser/bashast.g:94:31: ( BLANK )? '&'
				{
				// com/caseystella/parser/bashast.g:94:36: ( BLANK )?
				int alt323=2;
				int LA323_0 = input.LA(1);
				if ( (LA323_0==BLANK) ) {
					alt323=1;
				}
				switch (alt323) {
					case 1 :
						// com/caseystella/parser/bashast.g:94:36: BLANK
						{
						match(input,BLANK,FOLLOW_BLANK_in_synpred38_bashast426); if (state.failed) return;

						}
						break;

				}

				match(input,AMP,FOLLOW_AMP_in_synpred38_bashast429); if (state.failed) return;

				}
				break;
			case 3 :
				// com/caseystella/parser/bashast.g:94:43: ( ( BLANK )? EOL )+
				{
				// com/caseystella/parser/bashast.g:94:43: ( ( BLANK )? EOL )+
				int cnt325=0;
				loop325:
				while (true) {
					int alt325=2;
					int LA325_0 = input.LA(1);
					if ( (LA325_0==BLANK) ) {
						int LA325_1 = input.LA(2);
						if ( (LA325_1==EOL) ) {
							alt325=1;
						}

					}
					else if ( (LA325_0==EOL) ) {
						alt325=1;
					}

					switch (alt325) {
					case 1 :
						// com/caseystella/parser/bashast.g:94:44: ( BLANK )? EOL
						{
						// com/caseystella/parser/bashast.g:94:49: ( BLANK )?
						int alt324=2;
						int LA324_0 = input.LA(1);
						if ( (LA324_0==BLANK) ) {
							alt324=1;
						}
						switch (alt324) {
							case 1 :
								// com/caseystella/parser/bashast.g:94:49: BLANK
								{
								match(input,BLANK,FOLLOW_BLANK_in_synpred38_bashast433); if (state.failed) return;

								}
								break;

						}

						match(input,EOL,FOLLOW_EOL_in_synpred38_bashast437); if (state.failed) return;

						}
						break;

					default :
						if ( cnt325 >= 1 ) break loop325;
						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee = new EarlyExitException(325, input);
						throw eee;
					}
					cnt325++;
				}

				}
				break;

		}

		// com/caseystella/parser/bashast.g:94:64: ( BLANK )?
		int alt327=2;
		int LA327_0 = input.LA(1);
		if ( (LA327_0==BLANK) ) {
			int LA327_1 = input.LA(2);
			if ( (synpred37_bashast()) ) {
				alt327=1;
			}
		}
		switch (alt327) {
			case 1 :
				// com/caseystella/parser/bashast.g:94:64: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred38_bashast442); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_list_level_1_in_synpred38_bashast446);
		list_level_1();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred38_bashast

	// $ANTLR start synpred40_bashast
	public final void synpred40_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:96:4: ( ( var_def )+ )
		// com/caseystella/parser/bashast.g:96:4: ( var_def )+
		{
		// com/caseystella/parser/bashast.g:96:4: ( var_def )+
		int cnt328=0;
		loop328:
		while (true) {
			int alt328=2;
			int LA328_0 = input.LA(1);
			if ( (LA328_0==BLANK||(LA328_0 >= LET && LA328_0 <= LETTER)||LA328_0==NAME||LA328_0==138) ) {
				alt328=1;
			}

			switch (alt328) {
			case 1 :
				// com/caseystella/parser/bashast.g:96:4: var_def
				{
				pushFollow(FOLLOW_var_def_in_synpred40_bashast456);
				var_def();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				if ( cnt328 >= 1 ) break loop328;
				if (state.backtracking>0) {state.failed=true; return;}
				EarlyExitException eee = new EarlyExitException(328, input);
				throw eee;
			}
			cnt328++;
		}

		}

	}
	// $ANTLR end synpred40_bashast

	// $ANTLR start synpred42_bashast
	public final void synpred42_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:97:19: ( BLANK )
		// com/caseystella/parser/bashast.g:97:19: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred42_bashast467); if (state.failed) return;

		}

	}
	// $ANTLR end synpred42_bashast

	// $ANTLR start synpred43_bashast
	public final void synpred43_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:97:10: ( '!' ( BLANK )* )
		// com/caseystella/parser/bashast.g:97:10: '!' ( BLANK )*
		{
		match(input,BANG,FOLLOW_BANG_in_synpred43_bashast465); if (state.failed) return;

		// com/caseystella/parser/bashast.g:97:19: ( BLANK )*
		loop329:
		while (true) {
			int alt329=2;
			int LA329_0 = input.LA(1);
			if ( (LA329_0==BLANK) ) {
				alt329=1;
			}

			switch (alt329) {
			case 1 :
				// com/caseystella/parser/bashast.g:97:19: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred43_bashast467); if (state.failed) return;

				}
				break;

			default :
				break loop329;
			}
		}

		}

	}
	// $ANTLR end synpred43_bashast

	// $ANTLR start synpred44_bashast
	public final void synpred44_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:97:29: ( BLANK )
		// com/caseystella/parser/bashast.g:97:29: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred44_bashast473); if (state.failed) return;

		}

	}
	// $ANTLR end synpred44_bashast

	// $ANTLR start synpred46_bashast
	public final void synpred46_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:97:61: ( BLANK )
		// com/caseystella/parser/bashast.g:97:61: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred46_bashast488); if (state.failed) return;

		}

	}
	// $ANTLR end synpred46_bashast

	// $ANTLR start synpred48_bashast
	public final void synpred48_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:98:19: ( BLANK )
		// com/caseystella/parser/bashast.g:98:19: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred48_bashast504); if (state.failed) return;

		}

	}
	// $ANTLR end synpred48_bashast

	// $ANTLR start synpred50_bashast
	public final void synpred50_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:99:21: ( BLANK )
		// com/caseystella/parser/bashast.g:99:21: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred50_bashast518); if (state.failed) return;

		}

	}
	// $ANTLR end synpred50_bashast

	// $ANTLR start synpred53_bashast
	public final void synpred53_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:103:4: ( compound_command )
		// com/caseystella/parser/bashast.g:103:4: compound_command
		{
		pushFollow(FOLLOW_compound_command_in_synpred53_bashast538);
		compound_command();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred53_bashast

	// $ANTLR start synpred54_bashast
	public final void synpred54_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:107:4: ( var_def )
		// com/caseystella/parser/bashast.g:107:4: var_def
		{
		pushFollow(FOLLOW_var_def_in_synpred54_bashast552);
		var_def();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred54_bashast

	// $ANTLR start synpred56_bashast
	public final void synpred56_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:107:4: ( ( var_def )+ bash_command ( redirect )* )
		// com/caseystella/parser/bashast.g:107:4: ( var_def )+ bash_command ( redirect )*
		{
		// com/caseystella/parser/bashast.g:107:4: ( var_def )+
		int cnt333=0;
		loop333:
		while (true) {
			int alt333=2;
			switch ( input.LA(1) ) {
			case 138:
				{
				int LA333_13 = input.LA(2);
				if ( (synpred54_bashast()) ) {
					alt333=1;
				}

				}
				break;
			case LETTER:
			case NAME:
				{
				int LA333_25 = input.LA(2);
				if ( (synpred54_bashast()) ) {
					alt333=1;
				}

				}
				break;
			case BLANK:
			case LET:
				{
				alt333=1;
				}
				break;
			}
			switch (alt333) {
			case 1 :
				// com/caseystella/parser/bashast.g:107:4: var_def
				{
				pushFollow(FOLLOW_var_def_in_synpred56_bashast552);
				var_def();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				if ( cnt333 >= 1 ) break loop333;
				if (state.backtracking>0) {state.failed=true; return;}
				EarlyExitException eee = new EarlyExitException(333, input);
				throw eee;
			}
			cnt333++;
		}

		pushFollow(FOLLOW_bash_command_in_synpred56_bashast555);
		bash_command();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:107:27: ( redirect )*
		loop334:
		while (true) {
			int alt334=2;
			int LA334_0 = input.LA(1);
			if ( (LA334_0==AMP||LA334_0==BLANK||LA334_0==DIGIT||(LA334_0 >= GT && LA334_0 <= HERE_STRING_OP)||LA334_0==LSHIFT||LA334_0==LT||LA334_0==RSHIFT) ) {
				alt334=1;
			}

			switch (alt334) {
			case 1 :
				// com/caseystella/parser/bashast.g:107:27: redirect
				{
				pushFollow(FOLLOW_redirect_in_synpred56_bashast558);
				redirect();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop334;
			}
		}

		}

	}
	// $ANTLR end synpred56_bashast

	// $ANTLR start synpred59_bashast
	public final void synpred59_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:110:23: ( ( BLANK )+ arg )
		// com/caseystella/parser/bashast.g:110:23: ( BLANK )+ arg
		{
		// com/caseystella/parser/bashast.g:110:23: ( BLANK )+
		int cnt335=0;
		loop335:
		while (true) {
			int alt335=2;
			int LA335_0 = input.LA(1);
			if ( (LA335_0==BLANK) ) {
				alt335=1;
			}

			switch (alt335) {
			case 1 :
				// com/caseystella/parser/bashast.g:110:23: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred59_bashast579); if (state.failed) return;

				}
				break;

			default :
				if ( cnt335 >= 1 ) break loop335;
				if (state.backtracking>0) {state.failed=true; return;}
				EarlyExitException eee = new EarlyExitException(335, input);
				throw eee;
			}
			cnt335++;
		}

		pushFollow(FOLLOW_arg_in_synpred59_bashast582);
		arg();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred59_bashast

	// $ANTLR start synpred60_bashast
	public final void synpred60_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:113:4: ( brace_expansion )
		// com/caseystella/parser/bashast.g:113:4: brace_expansion
		{
		pushFollow(FOLLOW_brace_expansion_in_synpred60_bashast604);
		brace_expansion();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred60_bashast

	// $ANTLR start synpred61_bashast
	public final void synpred61_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:114:4: ( var_ref )
		// com/caseystella/parser/bashast.g:114:4: var_ref
		{
		pushFollow(FOLLOW_var_ref_in_synpred61_bashast609);
		var_ref();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred61_bashast

	// $ANTLR start synpred62_bashast
	public final void synpred62_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:115:4: ( fname )
		// com/caseystella/parser/bashast.g:115:4: fname
		{
		pushFollow(FOLLOW_fname_in_synpred62_bashast614);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred62_bashast

	// $ANTLR start synpred63_bashast
	public final void synpred63_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:116:4: ( res_word_str )
		// com/caseystella/parser/bashast.g:116:4: res_word_str
		{
		pushFollow(FOLLOW_res_word_str_in_synpred63_bashast619);
		res_word_str();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred63_bashast

	// $ANTLR start synpred64_bashast
	public final void synpred64_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:117:4: ( command_sub )
		// com/caseystella/parser/bashast.g:117:4: command_sub
		{
		pushFollow(FOLLOW_command_sub_in_synpred64_bashast632);
		command_sub();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred64_bashast

	// $ANTLR start synpred67_bashast
	public final void synpred67_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:119:11: ( ( BLANK )* here_string_op ( BLANK )* fname )
		// com/caseystella/parser/bashast.g:119:11: ( BLANK )* here_string_op ( BLANK )* fname
		{
		// com/caseystella/parser/bashast.g:119:16: ( BLANK )*
		loop336:
		while (true) {
			int alt336=2;
			int LA336_0 = input.LA(1);
			if ( (LA336_0==BLANK) ) {
				alt336=1;
			}

			switch (alt336) {
			case 1 :
				// com/caseystella/parser/bashast.g:119:16: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred67_bashast643); if (state.failed) return;

				}
				break;

			default :
				break loop336;
			}
		}

		pushFollow(FOLLOW_here_string_op_in_synpred67_bashast647);
		here_string_op();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:119:40: ( BLANK )*
		loop337:
		while (true) {
			int alt337=2;
			int LA337_0 = input.LA(1);
			if ( (LA337_0==BLANK) ) {
				alt337=1;
			}

			switch (alt337) {
			case 1 :
				// com/caseystella/parser/bashast.g:119:40: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred67_bashast650); if (state.failed) return;

				}
				break;

			default :
				break loop337;
			}
		}

		pushFollow(FOLLOW_fname_in_synpred67_bashast654);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred67_bashast

	// $ANTLR start synpred70_bashast
	public final void synpred70_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:120:4: ( ( BLANK )* here_doc_op ( BLANK )* fname EOL heredoc )
		// com/caseystella/parser/bashast.g:120:4: ( BLANK )* here_doc_op ( BLANK )* fname EOL heredoc
		{
		// com/caseystella/parser/bashast.g:120:9: ( BLANK )*
		loop338:
		while (true) {
			int alt338=2;
			int LA338_0 = input.LA(1);
			if ( (LA338_0==BLANK) ) {
				alt338=1;
			}

			switch (alt338) {
			case 1 :
				// com/caseystella/parser/bashast.g:120:9: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred70_bashast659); if (state.failed) return;

				}
				break;

			default :
				break loop338;
			}
		}

		pushFollow(FOLLOW_here_doc_op_in_synpred70_bashast663);
		here_doc_op();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:120:30: ( BLANK )*
		loop339:
		while (true) {
			int alt339=2;
			int LA339_0 = input.LA(1);
			if ( (LA339_0==BLANK) ) {
				alt339=1;
			}

			switch (alt339) {
			case 1 :
				// com/caseystella/parser/bashast.g:120:30: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred70_bashast666); if (state.failed) return;

				}
				break;

			default :
				break loop339;
			}
		}

		pushFollow(FOLLOW_fname_in_synpred70_bashast670);
		fname();
		state._fsp--;
		if (state.failed) return;

		match(input,EOL,FOLLOW_EOL_in_synpred70_bashast672); if (state.failed) return;

		pushFollow(FOLLOW_heredoc_in_synpred70_bashast675);
		heredoc();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred70_bashast

	// $ANTLR start synpred74_bashast
	public final void synpred74_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:121:4: ( ( BLANK )* redir_op ( BLANK )* DIGIT ( MINUS )? )
		// com/caseystella/parser/bashast.g:121:4: ( BLANK )* redir_op ( BLANK )* DIGIT ( MINUS )?
		{
		// com/caseystella/parser/bashast.g:121:4: ( BLANK )*
		loop340:
		while (true) {
			int alt340=2;
			int LA340_0 = input.LA(1);
			if ( (LA340_0==BLANK) ) {
				alt340=1;
			}

			switch (alt340) {
			case 1 :
				// com/caseystella/parser/bashast.g:121:4: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred74_bashast680); if (state.failed) return;

				}
				break;

			default :
				break loop340;
			}
		}

		pushFollow(FOLLOW_redir_op_in_synpred74_bashast683);
		redir_op();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:121:20: ( BLANK )*
		loop341:
		while (true) {
			int alt341=2;
			int LA341_0 = input.LA(1);
			if ( (LA341_0==BLANK) ) {
				alt341=1;
			}

			switch (alt341) {
			case 1 :
				// com/caseystella/parser/bashast.g:121:20: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred74_bashast685); if (state.failed) return;

				}
				break;

			default :
				break loop341;
			}
		}

		match(input,DIGIT,FOLLOW_DIGIT_in_synpred74_bashast688); if (state.failed) return;

		// com/caseystella/parser/bashast.g:121:33: ( MINUS )?
		int alt342=2;
		int LA342_0 = input.LA(1);
		if ( (LA342_0==MINUS) ) {
			alt342=1;
		}
		switch (alt342) {
			case 1 :
				// com/caseystella/parser/bashast.g:121:33: MINUS
				{
				match(input,MINUS,FOLLOW_MINUS_in_synpred74_bashast690); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred74_bashast

	// $ANTLR start synpred77_bashast
	public final void synpred77_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:122:4: ( ( BLANK )* redir_op ( BLANK )* redir_dest )
		// com/caseystella/parser/bashast.g:122:4: ( BLANK )* redir_op ( BLANK )* redir_dest
		{
		// com/caseystella/parser/bashast.g:122:4: ( BLANK )*
		loop343:
		while (true) {
			int alt343=2;
			int LA343_0 = input.LA(1);
			if ( (LA343_0==BLANK) ) {
				alt343=1;
			}

			switch (alt343) {
			case 1 :
				// com/caseystella/parser/bashast.g:122:4: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred77_bashast709); if (state.failed) return;

				}
				break;

			default :
				break loop343;
			}
		}

		pushFollow(FOLLOW_redir_op_in_synpred77_bashast712);
		redir_op();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:122:20: ( BLANK )*
		loop344:
		while (true) {
			int alt344=2;
			int LA344_0 = input.LA(1);
			if ( (LA344_0==BLANK) ) {
				alt344=1;
			}

			switch (alt344) {
			case 1 :
				// com/caseystella/parser/bashast.g:122:20: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred77_bashast714); if (state.failed) return;

				}
				break;

			default :
				break loop344;
			}
		}

		pushFollow(FOLLOW_redir_dest_in_synpred77_bashast717);
		redir_dest();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred77_bashast

	// $ANTLR start synpred81_bashast
	public final void synpred81_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:130:12: ( fname EOL )
		// com/caseystella/parser/bashast.g:130:12: fname EOL
		{
		pushFollow(FOLLOW_fname_in_synpred81_bashast788);
		fname();
		state._fsp--;
		if (state.failed) return;

		match(input,EOL,FOLLOW_EOL_in_synpred81_bashast790); if (state.failed) return;

		}

	}
	// $ANTLR end synpred81_bashast

	// $ANTLR start synpred82_bashast
	public final void synpred82_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:134:4: ( LSHIFT MINUS )
		// com/caseystella/parser/bashast.g:134:4: LSHIFT MINUS
		{
		match(input,LSHIFT,FOLLOW_LSHIFT_in_synpred82_bashast809); if (state.failed) return;

		match(input,MINUS,FOLLOW_MINUS_in_synpred82_bashast811); if (state.failed) return;

		}

	}
	// $ANTLR end synpred82_bashast

	// $ANTLR start synpred84_bashast
	public final void synpred84_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:137:4: ( GT AMP )
		// com/caseystella/parser/bashast.g:137:4: GT AMP
		{
		match(input,GT,FOLLOW_GT_in_synpred84_bashast844); if (state.failed) return;

		match(input,AMP,FOLLOW_AMP_in_synpred84_bashast846); if (state.failed) return;

		}

	}
	// $ANTLR end synpred84_bashast

	// $ANTLR start synpred85_bashast
	public final void synpred85_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:138:4: ( LT AMP )
		// com/caseystella/parser/bashast.g:138:4: LT AMP
		{
		match(input,LT,FOLLOW_LT_in_synpred85_bashast856); if (state.failed) return;

		match(input,AMP,FOLLOW_AMP_in_synpred85_bashast858); if (state.failed) return;

		}

	}
	// $ANTLR end synpred85_bashast

	// $ANTLR start synpred90_bashast
	public final void synpred90_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:143:4: ( LT )
		// com/caseystella/parser/bashast.g:143:4: LT
		{
		match(input,LT,FOLLOW_LT_in_synpred90_bashast915); if (state.failed) return;

		}

	}
	// $ANTLR end synpred90_bashast

	// $ANTLR start synpred91_bashast
	public final void synpred91_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:144:4: ( GT )
		// com/caseystella/parser/bashast.g:144:4: GT
		{
		match(input,GT,FOLLOW_GT_in_synpred91_bashast920); if (state.failed) return;

		}

	}
	// $ANTLR end synpred91_bashast

	// $ANTLR start synpred93_bashast
	public final void synpred93_bashast_fragment() throws RecognitionException {
		ParserRuleReturnScope post =null;


		// com/caseystella/parser/bashast.g:147:25: (post= fname )
		// com/caseystella/parser/bashast.g:147:25: post= fname
		{
		pushFollow(FOLLOW_fname_in_synpred93_bashast944);
		post=fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred93_bashast

	// $ANTLR start synpred98_bashast
	public final void synpred98_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:155:4: ( fname )
		// com/caseystella/parser/bashast.g:155:4: fname
		{
		pushFollow(FOLLOW_fname_in_synpred98_bashast1030);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred98_bashast

	// $ANTLR start synpred100_bashast
	public final void synpred100_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:157:4: ( var_ref )
		// com/caseystella/parser/bashast.g:157:4: var_ref
		{
		pushFollow(FOLLOW_var_ref_in_synpred100_bashast1040);
		var_ref();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred100_bashast

	// $ANTLR start synpred102_bashast
	public final void synpred102_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:161:18: ( BLANK )
		// com/caseystella/parser/bashast.g:161:18: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred102_bashast1070); if (state.failed) return;

		}

	}
	// $ANTLR end synpred102_bashast

	// $ANTLR start synpred105_bashast
	public final void synpred105_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:162:9: ( BLANK )
		// com/caseystella/parser/bashast.g:162:9: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred105_bashast1093); if (state.failed) return;

		}

	}
	// $ANTLR end synpred105_bashast

	// $ANTLR start synpred119_bashast
	public final void synpred119_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:176:62: ( wspace )
		// com/caseystella/parser/bashast.g:176:62: wspace
		{
		pushFollow(FOLLOW_wspace_in_synpred119_bashast1194);
		wspace();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred119_bashast

	// $ANTLR start synpred140_bashast
	public final void synpred140_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:180:65: ( wspace )
		// com/caseystella/parser/bashast.g:180:65: wspace
		{
		pushFollow(FOLLOW_wspace_in_synpred140_bashast1361);
		wspace();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred140_bashast

	// $ANTLR start synpred141_bashast
	public final void synpred141_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:182:14: ( wspace )
		// com/caseystella/parser/bashast.g:182:14: wspace
		{
		pushFollow(FOLLOW_wspace_in_synpred141_bashast1394);
		wspace();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred141_bashast

	// $ANTLR start synpred143_bashast
	public final void synpred143_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:182:50: ( wspace )
		// com/caseystella/parser/bashast.g:182:50: wspace
		{
		pushFollow(FOLLOW_wspace_in_synpred143_bashast1408);
		wspace();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred143_bashast

	// $ANTLR start synpred147_bashast
	public final void synpred147_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:182:109: ( wspace )
		// com/caseystella/parser/bashast.g:182:109: wspace
		{
		pushFollow(FOLLOW_wspace_in_synpred147_bashast1431);
		wspace();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred147_bashast

	// $ANTLR start synpred151_bashast
	public final void synpred151_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:186:9: ( BLANK )
		// com/caseystella/parser/bashast.g:186:9: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred151_bashast1485); if (state.failed) return;

		}

	}
	// $ANTLR end synpred151_bashast

	// $ANTLR start synpred153_bashast
	public final void synpred153_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:186:44: ( wspace )
		// com/caseystella/parser/bashast.g:186:44: wspace
		{
		pushFollow(FOLLOW_wspace_in_synpred153_bashast1499);
		wspace();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred153_bashast

	// $ANTLR start synpred156_bashast
	public final void synpred156_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:194:44: ( case_stmt wspace )
		// com/caseystella/parser/bashast.g:194:44: case_stmt wspace
		{
		pushFollow(FOLLOW_case_stmt_in_synpred156_bashast1633);
		case_stmt();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_wspace_in_synpred156_bashast1635);
		wspace();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred156_bashast

	// $ANTLR start synpred157_bashast
	public final void synpred157_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:194:64: ( last_case )
		// com/caseystella/parser/bashast.g:194:64: last_case
		{
		pushFollow(FOLLOW_last_case_in_synpred157_bashast1640);
		last_case();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred157_bashast

	// $ANTLR start synpred165_bashast
	public final void synpred165_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:197:81: ( wspace )
		// com/caseystella/parser/bashast.g:197:81: wspace
		{
		pushFollow(FOLLOW_wspace_in_synpred165_bashast1690);
		wspace();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred165_bashast

	// $ANTLR start synpred167_bashast
	public final void synpred167_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:197:4: ( ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )* PIPE ( BLANK )? pattern )* ( BLANK )* RPAREN ( wspace )* clist ( wspace )* DOUBLE_SEMIC )
		// com/caseystella/parser/bashast.g:197:4: ( wspace )* ( LPAREN ( BLANK )* )? pattern ( ( BLANK )* PIPE ( BLANK )? pattern )* ( BLANK )* RPAREN ( wspace )* clist ( wspace )* DOUBLE_SEMIC
		{
		// com/caseystella/parser/bashast.g:197:4: ( wspace )*
		loop370:
		while (true) {
			int alt370=2;
			int LA370_0 = input.LA(1);
			if ( (LA370_0==BLANK||LA370_0==EOL) ) {
				alt370=1;
			}

			switch (alt370) {
			case 1 :
				// com/caseystella/parser/bashast.g:197:4: wspace
				{
				pushFollow(FOLLOW_wspace_in_synpred167_bashast1659);
				wspace();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop370;
			}
		}

		// com/caseystella/parser/bashast.g:197:12: ( LPAREN ( BLANK )* )?
		int alt372=2;
		int LA372_0 = input.LA(1);
		if ( (LA372_0==LPAREN) ) {
			alt372=1;
		}
		switch (alt372) {
			case 1 :
				// com/caseystella/parser/bashast.g:197:13: LPAREN ( BLANK )*
				{
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred167_bashast1663); if (state.failed) return;

				// com/caseystella/parser/bashast.g:197:20: ( BLANK )*
				loop371:
				while (true) {
					int alt371=2;
					int LA371_0 = input.LA(1);
					if ( (LA371_0==BLANK) ) {
						alt371=1;
					}

					switch (alt371) {
					case 1 :
						// com/caseystella/parser/bashast.g:197:20: BLANK
						{
						match(input,BLANK,FOLLOW_BLANK_in_synpred167_bashast1665); if (state.failed) return;

						}
						break;

					default :
						break loop371;
					}
				}

				}
				break;

		}

		pushFollow(FOLLOW_pattern_in_synpred167_bashast1670);
		pattern();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:197:37: ( ( BLANK )* PIPE ( BLANK )? pattern )*
		loop375:
		while (true) {
			int alt375=2;
			alt375 = dfa375.predict(input);
			switch (alt375) {
			case 1 :
				// com/caseystella/parser/bashast.g:197:38: ( BLANK )* PIPE ( BLANK )? pattern
				{
				// com/caseystella/parser/bashast.g:197:38: ( BLANK )*
				loop373:
				while (true) {
					int alt373=2;
					int LA373_0 = input.LA(1);
					if ( (LA373_0==BLANK) ) {
						alt373=1;
					}

					switch (alt373) {
					case 1 :
						// com/caseystella/parser/bashast.g:197:38: BLANK
						{
						match(input,BLANK,FOLLOW_BLANK_in_synpred167_bashast1673); if (state.failed) return;

						}
						break;

					default :
						break loop373;
					}
				}

				match(input,PIPE,FOLLOW_PIPE_in_synpred167_bashast1676); if (state.failed) return;

				// com/caseystella/parser/bashast.g:197:50: ( BLANK )?
				int alt374=2;
				int LA374_0 = input.LA(1);
				if ( (LA374_0==BLANK) ) {
					alt374=1;
				}
				switch (alt374) {
					case 1 :
						// com/caseystella/parser/bashast.g:197:50: BLANK
						{
						match(input,BLANK,FOLLOW_BLANK_in_synpred167_bashast1678); if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_pattern_in_synpred167_bashast1681);
				pattern();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop375;
			}
		}

		// com/caseystella/parser/bashast.g:197:67: ( BLANK )*
		loop376:
		while (true) {
			int alt376=2;
			int LA376_0 = input.LA(1);
			if ( (LA376_0==BLANK) ) {
				alt376=1;
			}

			switch (alt376) {
			case 1 :
				// com/caseystella/parser/bashast.g:197:67: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred167_bashast1685); if (state.failed) return;

				}
				break;

			default :
				break loop376;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred167_bashast1688); if (state.failed) return;

		// com/caseystella/parser/bashast.g:197:81: ( wspace )*
		loop377:
		while (true) {
			int alt377=2;
			int LA377_0 = input.LA(1);
			if ( (LA377_0==BLANK) ) {
				int LA377_2 = input.LA(2);
				if ( (synpred165_bashast()) ) {
					alt377=1;
				}

			}
			else if ( (LA377_0==EOL) ) {
				alt377=1;
			}

			switch (alt377) {
			case 1 :
				// com/caseystella/parser/bashast.g:197:81: wspace
				{
				pushFollow(FOLLOW_wspace_in_synpred167_bashast1690);
				wspace();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop377;
			}
		}

		pushFollow(FOLLOW_clist_in_synpred167_bashast1693);
		clist();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:197:95: ( wspace )*
		loop378:
		while (true) {
			int alt378=2;
			int LA378_0 = input.LA(1);
			if ( (LA378_0==BLANK||LA378_0==EOL) ) {
				alt378=1;
			}

			switch (alt378) {
			case 1 :
				// com/caseystella/parser/bashast.g:197:95: wspace
				{
				pushFollow(FOLLOW_wspace_in_synpred167_bashast1695);
				wspace();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop378;
			}
		}

		match(input,DOUBLE_SEMIC,FOLLOW_DOUBLE_SEMIC_in_synpred167_bashast1698); if (state.failed) return;

		}

	}
	// $ANTLR end synpred167_bashast

	// $ANTLR start synpred183_bashast
	public final void synpred183_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:205:81: ( wspace )
		// com/caseystella/parser/bashast.g:205:81: wspace
		{
		pushFollow(FOLLOW_wspace_in_synpred183_bashast1810);
		wspace();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred183_bashast

	// $ANTLR start synpred189_bashast
	public final void synpred189_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:209:18: ( wspace )
		// com/caseystella/parser/bashast.g:209:18: wspace
		{
		pushFollow(FOLLOW_wspace_in_synpred189_bashast1854);
		wspace();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred189_bashast

	// $ANTLR start synpred200_bashast
	public final void synpred200_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:220:72: ( BLANK )
		// com/caseystella/parser/bashast.g:220:72: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred200_bashast1984); if (state.failed) return;

		}

	}
	// $ANTLR end synpred200_bashast

	// $ANTLR start synpred203_bashast
	public final void synpred203_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:221:36: ( BLANK )
		// com/caseystella/parser/bashast.g:221:36: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred203_bashast2016); if (state.failed) return;

		}

	}
	// $ANTLR end synpred203_bashast

	// $ANTLR start synpred206_bashast
	public final void synpred206_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:222:46: ( BLANK )
		// com/caseystella/parser/bashast.g:222:46: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred206_bashast2037); if (state.failed) return;

		}

	}
	// $ANTLR end synpred206_bashast

	// $ANTLR start synpred207_bashast
	public final void synpred207_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:224:9: ( num )
		// com/caseystella/parser/bashast.g:224:9: num
		{
		pushFollow(FOLLOW_num_in_synpred207_bashast2047);
		num();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred207_bashast

	// $ANTLR start synpred208_bashast
	public final void synpred208_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:225:4: ( var_ref )
		// com/caseystella/parser/bashast.g:225:4: var_ref
		{
		pushFollow(FOLLOW_var_ref_in_synpred208_bashast2052);
		var_ref();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred208_bashast

	// $ANTLR start synpred209_bashast
	public final void synpred209_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:226:4: ( fname )
		// com/caseystella/parser/bashast.g:226:4: fname
		{
		pushFollow(FOLLOW_fname_in_synpred209_bashast2057);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred209_bashast

	// $ANTLR start synpred216_bashast
	public final void synpred216_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:231:7: ( '[' ( BLANK )* index ( BLANK )? ']' EQUALS pos_val )
		// com/caseystella/parser/bashast.g:231:7: '[' ( BLANK )* index ( BLANK )? ']' EQUALS pos_val
		{
		match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred216_bashast2108); if (state.failed) return;

		// com/caseystella/parser/bashast.g:231:16: ( BLANK )*
		loop396:
		while (true) {
			int alt396=2;
			int LA396_0 = input.LA(1);
			if ( (LA396_0==BLANK) ) {
				alt396=1;
			}

			switch (alt396) {
			case 1 :
				// com/caseystella/parser/bashast.g:231:16: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred216_bashast2110); if (state.failed) return;

				}
				break;

			default :
				break loop396;
			}
		}

		pushFollow(FOLLOW_index_in_synpred216_bashast2113);
		index();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:231:29: ( BLANK )?
		int alt397=2;
		int LA397_0 = input.LA(1);
		if ( (LA397_0==BLANK) ) {
			alt397=1;
		}
		switch (alt397) {
			case 1 :
				// com/caseystella/parser/bashast.g:231:29: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred216_bashast2115); if (state.failed) return;

				}
				break;

		}

		match(input,RSQUARE,FOLLOW_RSQUARE_in_synpred216_bashast2118); if (state.failed) return;

		match(input,EQUALS,FOLLOW_EQUALS_in_synpred216_bashast2120); if (state.failed) return;

		pushFollow(FOLLOW_pos_val_in_synpred216_bashast2123);
		pos_val();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred216_bashast

	// $ANTLR start synpred217_bashast
	public final void synpred217_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:233:11: ( command_sub )
		// com/caseystella/parser/bashast.g:233:11: command_sub
		{
		pushFollow(FOLLOW_command_sub_in_synpred217_bashast2135);
		command_sub();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred217_bashast

	// $ANTLR start synpred218_bashast
	public final void synpred218_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:234:4: ( var_ref )
		// com/caseystella/parser/bashast.g:234:4: var_ref
		{
		pushFollow(FOLLOW_var_ref_in_synpred218_bashast2140);
		var_ref();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred218_bashast

	// $ANTLR start synpred219_bashast
	public final void synpred219_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:235:4: ( num )
		// com/caseystella/parser/bashast.g:235:4: num
		{
		pushFollow(FOLLOW_num_in_synpred219_bashast2145);
		num();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred219_bashast

	// $ANTLR start synpred224_bashast
	public final void synpred224_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:243:4: ( DOLLAR name )
		// com/caseystella/parser/bashast.g:243:4: DOLLAR name
		{
		match(input,DOLLAR,FOLLOW_DOLLAR_in_synpred224_bashast2197); if (state.failed) return;

		pushFollow(FOLLOW_name_in_synpred224_bashast2199);
		name();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred224_bashast

	// $ANTLR start synpred232_bashast
	public final void synpred232_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:253:11: ( var_name WORDOP word )
		// com/caseystella/parser/bashast.g:253:11: var_name WORDOP word
		{
		pushFollow(FOLLOW_var_name_in_synpred232_bashast2335);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,WORDOP,FOLLOW_WORDOP_in_synpred232_bashast2337); if (state.failed) return;

		pushFollow(FOLLOW_word_in_synpred232_bashast2340);
		word();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred232_bashast

	// $ANTLR start synpred234_bashast
	public final void synpred234_bashast_fragment() throws RecognitionException {
		ParserRuleReturnScope os =null;
		ParserRuleReturnScope len =null;


		// com/caseystella/parser/bashast.g:254:4: ( var_name COLON os= num ( COLON len= num )? )
		// com/caseystella/parser/bashast.g:254:4: var_name COLON os= num ( COLON len= num )?
		{
		pushFollow(FOLLOW_var_name_in_synpred234_bashast2345);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,COLON,FOLLOW_COLON_in_synpred234_bashast2347); if (state.failed) return;

		pushFollow(FOLLOW_num_in_synpred234_bashast2351);
		os=num();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:254:26: ( COLON len= num )?
		int alt400=2;
		int LA400_0 = input.LA(1);
		if ( (LA400_0==COLON) ) {
			alt400=1;
		}
		switch (alt400) {
			case 1 :
				// com/caseystella/parser/bashast.g:254:27: COLON len= num
				{
				match(input,COLON,FOLLOW_COLON_in_synpred234_bashast2354); if (state.failed) return;

				pushFollow(FOLLOW_num_in_synpred234_bashast2358);
				len=num();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred234_bashast

	// $ANTLR start synpred236_bashast
	public final void synpred236_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:255:4: ( BANG var_name ( TIMES | AT ) )
		// com/caseystella/parser/bashast.g:255:4: BANG var_name ( TIMES | AT )
		{
		match(input,BANG,FOLLOW_BANG_in_synpred236_bashast2382); if (state.failed) return;

		pushFollow(FOLLOW_var_name_in_synpred236_bashast2385);
		var_name();
		state._fsp--;
		if (state.failed) return;

		if ( input.LA(1)==AT||input.LA(1)==TIMES ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred236_bashast

	// $ANTLR start synpred238_bashast
	public final void synpred238_bashast_fragment() throws RecognitionException {
		Token op=null;


		// com/caseystella/parser/bashast.g:256:4: ( BANG var_name LSQUARE (op= TIMES |op= AT ) RSQUARE )
		// com/caseystella/parser/bashast.g:256:4: BANG var_name LSQUARE (op= TIMES |op= AT ) RSQUARE
		{
		match(input,BANG,FOLLOW_BANG_in_synpred238_bashast2396); if (state.failed) return;

		pushFollow(FOLLOW_var_name_in_synpred238_bashast2398);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred238_bashast2400); if (state.failed) return;

		// com/caseystella/parser/bashast.g:256:26: (op= TIMES |op= AT )
		int alt401=2;
		int LA401_0 = input.LA(1);
		if ( (LA401_0==TIMES) ) {
			alt401=1;
		}
		else if ( (LA401_0==AT) ) {
			alt401=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 401, 0, input);
			throw nvae;
		}

		switch (alt401) {
			case 1 :
				// com/caseystella/parser/bashast.g:256:27: op= TIMES
				{
				op=(Token)match(input,TIMES,FOLLOW_TIMES_in_synpred238_bashast2405); if (state.failed) return;

				}
				break;
			case 2 :
				// com/caseystella/parser/bashast.g:256:36: op= AT
				{
				op=(Token)match(input,AT,FOLLOW_AT_in_synpred238_bashast2409); if (state.failed) return;

				}
				break;

		}

		match(input,RSQUARE,FOLLOW_RSQUARE_in_synpred238_bashast2412); if (state.failed) return;

		}

	}
	// $ANTLR end synpred238_bashast

	// $ANTLR start synpred241_bashast
	public final void synpred241_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:258:4: ( var_name ( POUND | POUNDPOUND ) fname )
		// com/caseystella/parser/bashast.g:258:4: var_name ( POUND | POUNDPOUND ) fname
		{
		pushFollow(FOLLOW_var_name_in_synpred241_bashast2436);
		var_name();
		state._fsp--;
		if (state.failed) return;

		if ( (input.LA(1) >= POUND && input.LA(1) <= POUNDPOUND) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_fname_in_synpred241_bashast2446);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred241_bashast

	// $ANTLR start synpred243_bashast
	public final void synpred243_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:259:4: ( var_name ( PCT | PCTPCT ) fname )
		// com/caseystella/parser/bashast.g:259:4: var_name ( PCT | PCTPCT ) fname
		{
		pushFollow(FOLLOW_var_name_in_synpred243_bashast2451);
		var_name();
		state._fsp--;
		if (state.failed) return;

		if ( (input.LA(1) >= PCT && input.LA(1) <= PCTPCT) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_fname_in_synpred243_bashast2461);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred243_bashast

	// $ANTLR start synpred244_bashast
	public final void synpred244_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:260:4: ( var_name SLASH POUND ns_str SLASH fname )
		// com/caseystella/parser/bashast.g:260:4: var_name SLASH POUND ns_str SLASH fname
		{
		pushFollow(FOLLOW_var_name_in_synpred244_bashast2466);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred244_bashast2468); if (state.failed) return;

		match(input,POUND,FOLLOW_POUND_in_synpred244_bashast2470); if (state.failed) return;

		pushFollow(FOLLOW_ns_str_in_synpred244_bashast2472);
		ns_str();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred244_bashast2474); if (state.failed) return;

		pushFollow(FOLLOW_fname_in_synpred244_bashast2476);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred244_bashast

	// $ANTLR start synpred245_bashast
	public final void synpred245_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:261:5: ( var_name SLASH PCT ns_str SLASH fname )
		// com/caseystella/parser/bashast.g:261:5: var_name SLASH PCT ns_str SLASH fname
		{
		pushFollow(FOLLOW_var_name_in_synpred245_bashast2494);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred245_bashast2496); if (state.failed) return;

		match(input,PCT,FOLLOW_PCT_in_synpred245_bashast2498); if (state.failed) return;

		pushFollow(FOLLOW_ns_str_in_synpred245_bashast2500);
		ns_str();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred245_bashast2502); if (state.failed) return;

		pushFollow(FOLLOW_fname_in_synpred245_bashast2504);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred245_bashast

	// $ANTLR start synpred246_bashast
	public final void synpred246_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:262:4: ( var_name SLASH SLASH ns_str SLASH fname )
		// com/caseystella/parser/bashast.g:262:4: var_name SLASH SLASH ns_str SLASH fname
		{
		pushFollow(FOLLOW_var_name_in_synpred246_bashast2521);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred246_bashast2523); if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred246_bashast2525); if (state.failed) return;

		pushFollow(FOLLOW_ns_str_in_synpred246_bashast2527);
		ns_str();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred246_bashast2529); if (state.failed) return;

		pushFollow(FOLLOW_fname_in_synpred246_bashast2531);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred246_bashast

	// $ANTLR start synpred248_bashast
	public final void synpred248_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:263:4: ( var_name SLASH SLASH ns_str ( SLASH )? )
		// com/caseystella/parser/bashast.g:263:4: var_name SLASH SLASH ns_str ( SLASH )?
		{
		pushFollow(FOLLOW_var_name_in_synpred248_bashast2548);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred248_bashast2550); if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred248_bashast2552); if (state.failed) return;

		pushFollow(FOLLOW_ns_str_in_synpred248_bashast2554);
		ns_str();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:263:32: ( SLASH )?
		int alt402=2;
		int LA402_0 = input.LA(1);
		if ( (LA402_0==SLASH) ) {
			alt402=1;
		}
		switch (alt402) {
			case 1 :
				// com/caseystella/parser/bashast.g:263:32: SLASH
				{
				match(input,SLASH,FOLLOW_SLASH_in_synpred248_bashast2556); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred248_bashast

	// $ANTLR start synpred249_bashast
	public final void synpred249_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:264:4: ( var_name SLASH ns_str SLASH fname )
		// com/caseystella/parser/bashast.g:264:4: var_name SLASH ns_str SLASH fname
		{
		pushFollow(FOLLOW_var_name_in_synpred249_bashast2572);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred249_bashast2574); if (state.failed) return;

		pushFollow(FOLLOW_ns_str_in_synpred249_bashast2576);
		ns_str();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred249_bashast2578); if (state.failed) return;

		pushFollow(FOLLOW_fname_in_synpred249_bashast2580);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred249_bashast

	// $ANTLR start synpred251_bashast
	public final void synpred251_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:265:4: ( var_name SLASH POUND ns_str ( SLASH )? )
		// com/caseystella/parser/bashast.g:265:4: var_name SLASH POUND ns_str ( SLASH )?
		{
		pushFollow(FOLLOW_var_name_in_synpred251_bashast2597);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred251_bashast2599); if (state.failed) return;

		match(input,POUND,FOLLOW_POUND_in_synpred251_bashast2601); if (state.failed) return;

		pushFollow(FOLLOW_ns_str_in_synpred251_bashast2603);
		ns_str();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:265:32: ( SLASH )?
		int alt403=2;
		int LA403_0 = input.LA(1);
		if ( (LA403_0==SLASH) ) {
			alt403=1;
		}
		switch (alt403) {
			case 1 :
				// com/caseystella/parser/bashast.g:265:32: SLASH
				{
				match(input,SLASH,FOLLOW_SLASH_in_synpred251_bashast2605); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred251_bashast

	// $ANTLR start synpred253_bashast
	public final void synpred253_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:266:4: ( var_name SLASH PCT ns_str ( SLASH )? )
		// com/caseystella/parser/bashast.g:266:4: var_name SLASH PCT ns_str ( SLASH )?
		{
		pushFollow(FOLLOW_var_name_in_synpred253_bashast2621);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred253_bashast2623); if (state.failed) return;

		match(input,PCT,FOLLOW_PCT_in_synpred253_bashast2625); if (state.failed) return;

		pushFollow(FOLLOW_ns_str_in_synpred253_bashast2627);
		ns_str();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:266:30: ( SLASH )?
		int alt404=2;
		int LA404_0 = input.LA(1);
		if ( (LA404_0==SLASH) ) {
			alt404=1;
		}
		switch (alt404) {
			case 1 :
				// com/caseystella/parser/bashast.g:266:30: SLASH
				{
				match(input,SLASH,FOLLOW_SLASH_in_synpred253_bashast2629); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred253_bashast

	// $ANTLR start synpred255_bashast
	public final void synpred255_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:267:4: ( var_name SLASH ns_str ( SLASH )? )
		// com/caseystella/parser/bashast.g:267:4: var_name SLASH ns_str ( SLASH )?
		{
		pushFollow(FOLLOW_var_name_in_synpred255_bashast2645);
		var_name();
		state._fsp--;
		if (state.failed) return;

		match(input,SLASH,FOLLOW_SLASH_in_synpred255_bashast2647); if (state.failed) return;

		pushFollow(FOLLOW_ns_str_in_synpred255_bashast2649);
		ns_str();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:267:26: ( SLASH )?
		int alt405=2;
		int LA405_0 = input.LA(1);
		if ( (LA405_0==SLASH) ) {
			alt405=1;
		}
		switch (alt405) {
			case 1 :
				// com/caseystella/parser/bashast.g:267:26: SLASH
				{
				match(input,SLASH,FOLLOW_SLASH_in_synpred255_bashast2651); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred255_bashast

	// $ANTLR start synpred256_bashast
	public final void synpred256_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:268:4: ( arr_var_ref )
		// com/caseystella/parser/bashast.g:268:4: arr_var_ref
		{
		pushFollow(FOLLOW_arr_var_ref_in_synpred256_bashast2667);
		arr_var_ref();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred256_bashast

	// $ANTLR start synpred265_bashast
	public final void synpred265_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:281:4: ( LPAREN ( BLANK )* keyword_cond ( BLANK )* RPAREN )
		// com/caseystella/parser/bashast.g:281:4: LPAREN ( BLANK )* keyword_cond ( BLANK )* RPAREN
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred265_bashast2778); if (state.failed) return;

		// com/caseystella/parser/bashast.g:281:17: ( BLANK )*
		loop406:
		while (true) {
			int alt406=2;
			int LA406_0 = input.LA(1);
			if ( (LA406_0==BLANK) ) {
				alt406=1;
			}

			switch (alt406) {
			case 1 :
				// com/caseystella/parser/bashast.g:281:17: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred265_bashast2781); if (state.failed) return;

				}
				break;

			default :
				break loop406;
			}
		}

		pushFollow(FOLLOW_keyword_cond_in_synpred265_bashast2785);
		keyword_cond();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:281:38: ( BLANK )*
		loop407:
		while (true) {
			int alt407=2;
			int LA407_0 = input.LA(1);
			if ( (LA407_0==BLANK) ) {
				alt407=1;
			}

			switch (alt407) {
			case 1 :
				// com/caseystella/parser/bashast.g:281:38: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred265_bashast2787); if (state.failed) return;

				}
				break;

			default :
				break loop407;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred265_bashast2791); if (state.failed) return;

		}

	}
	// $ANTLR end synpred265_bashast

	// $ANTLR start synpred266_bashast
	public final void synpred266_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:282:4: ( keyword_cond_binary )
		// com/caseystella/parser/bashast.g:282:4: keyword_cond_binary
		{
		pushFollow(FOLLOW_keyword_cond_binary_in_synpred266_bashast2797);
		keyword_cond_binary();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred266_bashast

	// $ANTLR start synpred267_bashast
	public final void synpred267_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:283:4: ( keyword_cond_unary )
		// com/caseystella/parser/bashast.g:283:4: keyword_cond_unary
		{
		pushFollow(FOLLOW_keyword_cond_unary_in_synpred267_bashast2802);
		keyword_cond_unary();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred267_bashast

	// $ANTLR start synpred273_bashast
	public final void synpred273_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:290:4: ( LPAREN ( BLANK )* builtin_cond ( BLANK )* RPAREN )
		// com/caseystella/parser/bashast.g:290:4: LPAREN ( BLANK )* builtin_cond ( BLANK )* RPAREN
		{
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred273_bashast2851); if (state.failed) return;

		// com/caseystella/parser/bashast.g:290:17: ( BLANK )*
		loop408:
		while (true) {
			int alt408=2;
			int LA408_0 = input.LA(1);
			if ( (LA408_0==BLANK) ) {
				alt408=1;
			}

			switch (alt408) {
			case 1 :
				// com/caseystella/parser/bashast.g:290:17: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred273_bashast2854); if (state.failed) return;

				}
				break;

			default :
				break loop408;
			}
		}

		pushFollow(FOLLOW_builtin_cond_in_synpred273_bashast2858);
		builtin_cond();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:290:38: ( BLANK )*
		loop409:
		while (true) {
			int alt409=2;
			int LA409_0 = input.LA(1);
			if ( (LA409_0==BLANK) ) {
				alt409=1;
			}

			switch (alt409) {
			case 1 :
				// com/caseystella/parser/bashast.g:290:38: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred273_bashast2860); if (state.failed) return;

				}
				break;

			default :
				break loop409;
			}
		}

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred273_bashast2864); if (state.failed) return;

		}

	}
	// $ANTLR end synpred273_bashast

	// $ANTLR start synpred274_bashast
	public final void synpred274_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:291:4: ( builtin_cond_binary )
		// com/caseystella/parser/bashast.g:291:4: builtin_cond_binary
		{
		pushFollow(FOLLOW_builtin_cond_binary_in_synpred274_bashast2870);
		builtin_cond_binary();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred274_bashast

	// $ANTLR start synpred275_bashast
	public final void synpred275_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:292:4: ( builtin_cond_unary )
		// com/caseystella/parser/bashast.g:292:4: builtin_cond_unary
		{
		pushFollow(FOLLOW_builtin_cond_unary_in_synpred275_bashast2875);
		builtin_cond_unary();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred275_bashast

	// $ANTLR start synpred279_bashast
	public final void synpred279_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:299:5: ( negate_primary )
		// com/caseystella/parser/bashast.g:299:5: negate_primary
		{
		pushFollow(FOLLOW_negate_primary_in_synpred279_bashast2925);
		negate_primary();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred279_bashast

	// $ANTLR start synpred284_bashast
	public final void synpred284_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:301:5: ( negate_builtin_primary )
		// com/caseystella/parser/bashast.g:301:5: negate_builtin_primary
		{
		pushFollow(FOLLOW_negate_builtin_primary_in_synpred284_bashast2958);
		negate_builtin_primary();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred284_bashast

	// $ANTLR start synpred288_bashast
	public final void synpred288_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:301:51: ( ( BLANK )* ( LOGICOR | LOGICAND ) ( BLANK )* builtin_cond )
		// com/caseystella/parser/bashast.g:301:51: ( BLANK )* ( LOGICOR | LOGICAND ) ( BLANK )* builtin_cond
		{
		// com/caseystella/parser/bashast.g:301:56: ( BLANK )*
		loop412:
		while (true) {
			int alt412=2;
			int LA412_0 = input.LA(1);
			if ( (LA412_0==BLANK) ) {
				alt412=1;
			}

			switch (alt412) {
			case 1 :
				// com/caseystella/parser/bashast.g:301:56: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred288_bashast2964); if (state.failed) return;

				}
				break;

			default :
				break loop412;
			}
		}

		if ( (input.LA(1) >= LOGICAND && input.LA(1) <= LOGICOR) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		// com/caseystella/parser/bashast.g:301:85: ( BLANK )*
		loop413:
		while (true) {
			int alt413=2;
			int LA413_0 = input.LA(1);
			if ( (LA413_0==BLANK) ) {
				alt413=1;
			}

			switch (alt413) {
			case 1 :
				// com/caseystella/parser/bashast.g:301:85: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred288_bashast2976); if (state.failed) return;

				}
				break;

			default :
				break loop413;
			}
		}

		pushFollow(FOLLOW_builtin_cond_in_synpred288_bashast2980);
		builtin_cond();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred288_bashast

	// $ANTLR start synpred292_bashast
	public final void synpred292_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:308:4: ( EQUALS EQUALS )
		// com/caseystella/parser/bashast.g:308:4: EQUALS EQUALS
		{
		match(input,EQUALS,FOLLOW_EQUALS_in_synpred292_bashast3037); if (state.failed) return;

		match(input,EQUALS,FOLLOW_EQUALS_in_synpred292_bashast3039); if (state.failed) return;

		}

	}
	// $ANTLR end synpred292_bashast

	// $ANTLR start synpred293_bashast
	public final void synpred293_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:309:4: ( EQUALS )
		// com/caseystella/parser/bashast.g:309:4: EQUALS
		{
		match(input,EQUALS,FOLLOW_EQUALS_in_synpred293_bashast3049); if (state.failed) return;

		}

	}
	// $ANTLR end synpred293_bashast

	// $ANTLR start synpred300_bashast
	public final void synpred300_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:322:12: ( brace_expansion )
		// com/caseystella/parser/bashast.g:322:12: brace_expansion
		{
		pushFollow(FOLLOW_brace_expansion_in_synpred300_bashast3127);
		brace_expansion();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred300_bashast

	// $ANTLR start synpred301_bashast
	public final void synpred301_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:323:4: ( var_ref )
		// com/caseystella/parser/bashast.g:323:4: var_ref
		{
		pushFollow(FOLLOW_var_ref_in_synpred301_bashast3132);
		var_ref();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred301_bashast

	// $ANTLR start synpred302_bashast
	public final void synpred302_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:324:4: ( res_word_str )
		// com/caseystella/parser/bashast.g:324:4: res_word_str
		{
		pushFollow(FOLLOW_res_word_str_in_synpred302_bashast3137);
		res_word_str();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred302_bashast

	// $ANTLR start synpred303_bashast
	public final void synpred303_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:325:4: ( num )
		// com/caseystella/parser/bashast.g:325:4: num
		{
		pushFollow(FOLLOW_num_in_synpred303_bashast3150);
		num();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred303_bashast

	// $ANTLR start synpred304_bashast
	public final void synpred304_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:326:4: ( fname )
		// com/caseystella/parser/bashast.g:326:4: fname
		{
		pushFollow(FOLLOW_fname_in_synpred304_bashast3155);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred304_bashast

	// $ANTLR start synpred305_bashast
	public final void synpred305_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:329:10: ( BLANK )
		// com/caseystella/parser/bashast.g:329:10: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred305_bashast3168); if (state.failed) return;

		}

	}
	// $ANTLR end synpred305_bashast

	// $ANTLR start synpred309_bashast
	public final void synpred309_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:333:8: ( brace_expansion )
		// com/caseystella/parser/bashast.g:333:8: brace_expansion
		{
		pushFollow(FOLLOW_brace_expansion_in_synpred309_bashast3194);
		brace_expansion();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred309_bashast

	// $ANTLR start synpred310_bashast
	public final void synpred310_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:334:4: ( command_sub )
		// com/caseystella/parser/bashast.g:334:4: command_sub
		{
		pushFollow(FOLLOW_command_sub_in_synpred310_bashast3199);
		command_sub();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred310_bashast

	// $ANTLR start synpred311_bashast
	public final void synpred311_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:335:4: ( var_ref )
		// com/caseystella/parser/bashast.g:335:4: var_ref
		{
		pushFollow(FOLLOW_var_ref_in_synpred311_bashast3204);
		var_ref();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred311_bashast

	// $ANTLR start synpred312_bashast
	public final void synpred312_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:336:4: ( num )
		// com/caseystella/parser/bashast.g:336:4: num
		{
		pushFollow(FOLLOW_num_in_synpred312_bashast3209);
		num();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred312_bashast

	// $ANTLR start synpred313_bashast
	public final void synpred313_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:337:4: ( fname )
		// com/caseystella/parser/bashast.g:337:4: fname
		{
		pushFollow(FOLLOW_fname_in_synpred313_bashast3214);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred313_bashast

	// $ANTLR start synpred314_bashast
	public final void synpred314_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:338:4: ( arithmetic_expansion )
		// com/caseystella/parser/bashast.g:338:4: arithmetic_expansion
		{
		pushFollow(FOLLOW_arithmetic_expansion_in_synpred314_bashast3219);
		arithmetic_expansion();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred314_bashast

	// $ANTLR start synpred315_bashast
	public final void synpred315_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:340:11: ( command_sub )
		// com/caseystella/parser/bashast.g:340:11: command_sub
		{
		pushFollow(FOLLOW_command_sub_in_synpred315_bashast3239);
		command_sub();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred315_bashast

	// $ANTLR start synpred316_bashast
	public final void synpred316_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:341:4: ( fname )
		// com/caseystella/parser/bashast.g:341:4: fname
		{
		pushFollow(FOLLOW_fname_in_synpred316_bashast3244);
		fname();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred316_bashast

	// $ANTLR start synpred337_bashast
	public final void synpred337_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:365:4: ( name )
		// com/caseystella/parser/bashast.g:365:4: name
		{
		pushFollow(FOLLOW_name_in_synpred337_bashast3370);
		name();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred337_bashast

	// $ANTLR start synpred349_bashast
	public final void synpred349_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:365:69: ( '_' )
		// com/caseystella/parser/bashast.g:365:69: '_'
		{
		match(input,138,FOLLOW_138_in_synpred349_bashast3394); if (state.failed) return;

		}

	}
	// $ANTLR end synpred349_bashast

	// $ANTLR start synpred377_bashast
	public final void synpred377_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:374:4: ( str_part_with_pound )
		// com/caseystella/parser/bashast.g:374:4: str_part_with_pound
		{
		pushFollow(FOLLOW_str_part_with_pound_in_synpred377_bashast3487);
		str_part_with_pound();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred377_bashast

	// $ANTLR start synpred398_bashast
	public final void synpred398_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:375:133: ( BOP )
		// com/caseystella/parser/bashast.g:375:133: BOP
		{
		match(input,BOP,FOLLOW_BOP_in_synpred398_bashast3532); if (state.failed) return;

		}

	}
	// $ANTLR end synpred398_bashast

	// $ANTLR start synpred399_bashast
	public final void synpred399_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:383:18: ( no_res_word_part )
		// com/caseystella/parser/bashast.g:383:18: no_res_word_part
		{
		pushFollow(FOLLOW_no_res_word_part_in_synpred399_bashast3579);
		no_res_word_part();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred399_bashast

	// $ANTLR start synpred400_bashast
	public final void synpred400_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:383:35: ( str_part_with_pound )
		// com/caseystella/parser/bashast.g:383:35: str_part_with_pound
		{
		pushFollow(FOLLOW_str_part_with_pound_in_synpred400_bashast3581);
		str_part_with_pound();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred400_bashast

	// $ANTLR start synpred402_bashast
	public final void synpred402_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:384:22: ( no_res_word_part )
		// com/caseystella/parser/bashast.g:384:22: no_res_word_part
		{
		pushFollow(FOLLOW_no_res_word_part_in_synpred402_bashast3591);
		no_res_word_part();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred402_bashast

	// $ANTLR start synpred403_bashast
	public final void synpred403_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:384:39: ( str_part_with_pound )
		// com/caseystella/parser/bashast.g:384:39: str_part_with_pound
		{
		pushFollow(FOLLOW_str_part_with_pound_in_synpred403_bashast3593);
		str_part_with_pound();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred403_bashast

	// $ANTLR start synpred404_bashast
	public final void synpred404_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:387:4: ( bracket_pattern_match )
		// com/caseystella/parser/bashast.g:387:4: bracket_pattern_match
		{
		pushFollow(FOLLOW_bracket_pattern_match_in_synpred404_bashast3604);
		bracket_pattern_match();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred404_bashast

	// $ANTLR start synpred405_bashast
	public final void synpred405_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:388:4: ( extended_pattern_match )
		// com/caseystella/parser/bashast.g:388:4: extended_pattern_match
		{
		pushFollow(FOLLOW_extended_pattern_match_in_synpred405_bashast3609);
		extended_pattern_match();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred405_bashast

	// $ANTLR start synpred406_bashast
	public final void synpred406_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:389:4: ( var_ref )
		// com/caseystella/parser/bashast.g:389:4: var_ref
		{
		pushFollow(FOLLOW_var_ref_in_synpred406_bashast3614);
		var_ref();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred406_bashast

	// $ANTLR start synpred407_bashast
	public final void synpred407_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:390:4: ( command_sub )
		// com/caseystella/parser/bashast.g:390:4: command_sub
		{
		pushFollow(FOLLOW_command_sub_in_synpred407_bashast3619);
		command_sub();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred407_bashast

	// $ANTLR start synpred408_bashast
	public final void synpred408_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:391:4: ( arithmetic_expansion )
		// com/caseystella/parser/bashast.g:391:4: arithmetic_expansion
		{
		pushFollow(FOLLOW_arithmetic_expansion_in_synpred408_bashast3624);
		arithmetic_expansion();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred408_bashast

	// $ANTLR start synpred413_bashast
	public final void synpred413_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:10: ( bracket_pattern_match )
		// com/caseystella/parser/bashast.g:398:10: bracket_pattern_match
		{
		pushFollow(FOLLOW_bracket_pattern_match_in_synpred413_bashast3658);
		bracket_pattern_match();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred413_bashast

	// $ANTLR start synpred414_bashast
	public final void synpred414_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:32: ( extended_pattern_match )
		// com/caseystella/parser/bashast.g:398:32: extended_pattern_match
		{
		pushFollow(FOLLOW_extended_pattern_match_in_synpred414_bashast3660);
		extended_pattern_match();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred414_bashast

	// $ANTLR start synpred415_bashast
	public final void synpred415_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:55: ( var_ref )
		// com/caseystella/parser/bashast.g:398:55: var_ref
		{
		pushFollow(FOLLOW_var_ref_in_synpred415_bashast3662);
		var_ref();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred415_bashast

	// $ANTLR start synpred416_bashast
	public final void synpred416_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:63: ( command_sub )
		// com/caseystella/parser/bashast.g:398:63: command_sub
		{
		pushFollow(FOLLOW_command_sub_in_synpred416_bashast3664);
		command_sub();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred416_bashast

	// $ANTLR start synpred417_bashast
	public final void synpred417_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:75: ( arithmetic_expansion )
		// com/caseystella/parser/bashast.g:398:75: arithmetic_expansion
		{
		pushFollow(FOLLOW_arithmetic_expansion_in_synpred417_bashast3666);
		arithmetic_expansion();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred417_bashast

	// $ANTLR start synpred418_bashast
	public final void synpred418_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:96: ( dqstr )
		// com/caseystella/parser/bashast.g:398:96: dqstr
		{
		pushFollow(FOLLOW_dqstr_in_synpred418_bashast3668);
		dqstr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred418_bashast

	// $ANTLR start synpred419_bashast
	public final void synpred419_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:102: ( sqstr )
		// com/caseystella/parser/bashast.g:398:102: sqstr
		{
		pushFollow(FOLLOW_sqstr_in_synpred419_bashast3670);
		sqstr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred419_bashast

	// $ANTLR start synpred420_bashast
	public final void synpred420_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:118: ( str_part_with_pound )
		// com/caseystella/parser/bashast.g:398:118: str_part_with_pound
		{
		pushFollow(FOLLOW_str_part_with_pound_in_synpred420_bashast3675);
		str_part_with_pound();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred420_bashast

	// $ANTLR start synpred421_bashast
	public final void synpred421_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:108: ( ( str_part ( str_part_with_pound )* ) )
		// com/caseystella/parser/bashast.g:398:108: ( str_part ( str_part_with_pound )* )
		{
		// com/caseystella/parser/bashast.g:398:108: ( str_part ( str_part_with_pound )* )
		// com/caseystella/parser/bashast.g:398:109: str_part ( str_part_with_pound )*
		{
		pushFollow(FOLLOW_str_part_in_synpred421_bashast3673);
		str_part();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:398:118: ( str_part_with_pound )*
		loop416:
		while (true) {
			int alt416=2;
			int LA416_0 = input.LA(1);
			if ( (LA416_0==ARITH_ASSIGN||LA416_0==BOP||(LA416_0 >= CARET && LA416_0 <= CASE)||LA416_0==COLON||(LA416_0 >= DEC && LA416_0 <= DO)||(LA416_0 >= DONE && LA416_0 <= DOTDOT)||(LA416_0 >= ELIF && LA416_0 <= ELSE)||LA416_0==EQUALS||(LA416_0 >= ESAC && LA416_0 <= ESC_CHAR)||LA416_0==FI||LA416_0==FOR||LA416_0==FUNCTION||(LA416_0 >= IF && LA416_0 <= INC)||LA416_0==LETTER||(LA416_0 >= MINUS && LA416_0 <= NAME)||(LA416_0 >= NQSTR && LA416_0 <= NUMBER)||(LA416_0 >= PCT && LA416_0 <= PCTPCT)||(LA416_0 >= POUND && LA416_0 <= POUNDPOUND)||LA416_0==SELECT||LA416_0==SLASH||(LA416_0 >= TEST && LA416_0 <= THEN)||(LA416_0 >= TILDE && LA416_0 <= TIME)||(LA416_0 >= UNTIL && LA416_0 <= UOP)||LA416_0==WHILE||LA416_0==138) ) {
				alt416=1;
			}

			switch (alt416) {
			case 1 :
				// com/caseystella/parser/bashast.g:398:118: str_part_with_pound
				{
				pushFollow(FOLLOW_str_part_with_pound_in_synpred421_bashast3675);
				str_part_with_pound();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop416;
			}
		}

		}

		}

	}
	// $ANTLR end synpred421_bashast

	// $ANTLR start synpred422_bashast
	public final void synpred422_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:140: ( pattern_match_trigger )
		// com/caseystella/parser/bashast.g:398:140: pattern_match_trigger
		{
		pushFollow(FOLLOW_pattern_match_trigger_in_synpred422_bashast3679);
		pattern_match_trigger();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred422_bashast

	// $ANTLR start synpred423_bashast
	public final void synpred423_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:398:162: ( BANG )
		// com/caseystella/parser/bashast.g:398:162: BANG
		{
		match(input,BANG,FOLLOW_BANG_in_synpred423_bashast3681); if (state.failed) return;

		}

	}
	// $ANTLR end synpred423_bashast

	// $ANTLR start synpred425_bashast
	public final void synpred425_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:402:4: ( bracket_pattern_match )
		// com/caseystella/parser/bashast.g:402:4: bracket_pattern_match
		{
		pushFollow(FOLLOW_bracket_pattern_match_in_synpred425_bashast3713);
		bracket_pattern_match();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred425_bashast

	// $ANTLR start synpred426_bashast
	public final void synpred426_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:403:4: ( extended_pattern_match )
		// com/caseystella/parser/bashast.g:403:4: extended_pattern_match
		{
		pushFollow(FOLLOW_extended_pattern_match_in_synpred426_bashast3718);
		extended_pattern_match();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred426_bashast

	// $ANTLR start synpred427_bashast
	public final void synpred427_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:404:4: ( var_ref )
		// com/caseystella/parser/bashast.g:404:4: var_ref
		{
		pushFollow(FOLLOW_var_ref_in_synpred427_bashast3723);
		var_ref();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred427_bashast

	// $ANTLR start synpred428_bashast
	public final void synpred428_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:405:4: ( command_sub )
		// com/caseystella/parser/bashast.g:405:4: command_sub
		{
		pushFollow(FOLLOW_command_sub_in_synpred428_bashast3728);
		command_sub();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred428_bashast

	// $ANTLR start synpred429_bashast
	public final void synpred429_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:406:4: ( arithmetic_expansion )
		// com/caseystella/parser/bashast.g:406:4: arithmetic_expansion
		{
		pushFollow(FOLLOW_arithmetic_expansion_in_synpred429_bashast3733);
		arithmetic_expansion();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred429_bashast

	// $ANTLR start synpred430_bashast
	public final void synpred430_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:407:4: ( dq_str_part )
		// com/caseystella/parser/bashast.g:407:4: dq_str_part
		{
		pushFollow(FOLLOW_dq_str_part_in_synpred430_bashast3738);
		dq_str_part();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred430_bashast

	// $ANTLR start synpred431_bashast
	public final void synpred431_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:408:4: ( pattern_match_trigger )
		// com/caseystella/parser/bashast.g:408:4: pattern_match_trigger
		{
		pushFollow(FOLLOW_pattern_match_trigger_in_synpred431_bashast3743);
		pattern_match_trigger();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred431_bashast

	// $ANTLR start synpred440_bashast
	public final void synpred440_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:422:4: ( LSQUARE RSQUARE ( BANG | CARET ) ( pattern_match )* RSQUARE )
		// com/caseystella/parser/bashast.g:422:4: LSQUARE RSQUARE ( BANG | CARET ) ( pattern_match )* RSQUARE
		{
		match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred440_bashast3813); if (state.failed) return;

		match(input,RSQUARE,FOLLOW_RSQUARE_in_synpred440_bashast3815); if (state.failed) return;

		if ( input.LA(1)==BANG||input.LA(1)==CARET ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		// com/caseystella/parser/bashast.g:422:33: ( pattern_match )*
		loop417:
		while (true) {
			int alt417=2;
			int LA417_0 = input.LA(1);
			if ( (LA417_0==ARITH_ASSIGN||LA417_0==BOP||(LA417_0 >= CARET && LA417_0 <= CASE)||LA417_0==COLON||(LA417_0 >= DEC && LA417_0 <= DO)||(LA417_0 >= DONE && LA417_0 <= DOTDOT)||(LA417_0 >= ELIF && LA417_0 <= ELSE)||LA417_0==EQUALS||(LA417_0 >= ESAC && LA417_0 <= ESC_CHAR)||LA417_0==FI||LA417_0==FOR||LA417_0==FUNCTION||(LA417_0 >= IF && LA417_0 <= INC)||LA417_0==LETTER||LA417_0==LSQUARE||(LA417_0 >= MINUS && LA417_0 <= NAME)||(LA417_0 >= NQSTR && LA417_0 <= NUMBER)||(LA417_0 >= PCT && LA417_0 <= PCTPCT)||LA417_0==SELECT||LA417_0==SLASH||(LA417_0 >= TEST && LA417_0 <= THEN)||(LA417_0 >= TILDE && LA417_0 <= TIME)||(LA417_0 >= UNTIL && LA417_0 <= UOP)||LA417_0==WHILE||LA417_0==138) ) {
				alt417=1;
			}

			switch (alt417) {
			case 1 :
				// com/caseystella/parser/bashast.g:422:33: pattern_match
				{
				pushFollow(FOLLOW_pattern_match_in_synpred440_bashast3823);
				pattern_match();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop417;
			}
		}

		match(input,RSQUARE,FOLLOW_RSQUARE_in_synpred440_bashast3826); if (state.failed) return;

		}

	}
	// $ANTLR end synpred440_bashast

	// $ANTLR start synpred442_bashast
	public final void synpred442_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:423:4: ( LSQUARE RSQUARE ( pattern_match )* RSQUARE )
		// com/caseystella/parser/bashast.g:423:4: LSQUARE RSQUARE ( pattern_match )* RSQUARE
		{
		match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred442_bashast3842); if (state.failed) return;

		match(input,RSQUARE,FOLLOW_RSQUARE_in_synpred442_bashast3844); if (state.failed) return;

		// com/caseystella/parser/bashast.g:423:20: ( pattern_match )*
		loop418:
		while (true) {
			int alt418=2;
			int LA418_0 = input.LA(1);
			if ( (LA418_0==ARITH_ASSIGN||LA418_0==BOP||(LA418_0 >= CARET && LA418_0 <= CASE)||LA418_0==COLON||(LA418_0 >= DEC && LA418_0 <= DO)||(LA418_0 >= DONE && LA418_0 <= DOTDOT)||(LA418_0 >= ELIF && LA418_0 <= ELSE)||LA418_0==EQUALS||(LA418_0 >= ESAC && LA418_0 <= ESC_CHAR)||LA418_0==FI||LA418_0==FOR||LA418_0==FUNCTION||(LA418_0 >= IF && LA418_0 <= INC)||LA418_0==LETTER||LA418_0==LSQUARE||(LA418_0 >= MINUS && LA418_0 <= NAME)||(LA418_0 >= NQSTR && LA418_0 <= NUMBER)||(LA418_0 >= PCT && LA418_0 <= PCTPCT)||LA418_0==SELECT||LA418_0==SLASH||(LA418_0 >= TEST && LA418_0 <= THEN)||(LA418_0 >= TILDE && LA418_0 <= TIME)||(LA418_0 >= UNTIL && LA418_0 <= UOP)||LA418_0==WHILE||LA418_0==138) ) {
				alt418=1;
			}

			switch (alt418) {
			case 1 :
				// com/caseystella/parser/bashast.g:423:20: pattern_match
				{
				pushFollow(FOLLOW_pattern_match_in_synpred442_bashast3846);
				pattern_match();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				break loop418;
			}
		}

		match(input,RSQUARE,FOLLOW_RSQUARE_in_synpred442_bashast3849); if (state.failed) return;

		}

	}
	// $ANTLR end synpred442_bashast

	// $ANTLR start synpred445_bashast
	public final void synpred445_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:424:4: ( LSQUARE ( BANG | CARET ) ( pattern_match )+ RSQUARE )
		// com/caseystella/parser/bashast.g:424:4: LSQUARE ( BANG | CARET ) ( pattern_match )+ RSQUARE
		{
		match(input,LSQUARE,FOLLOW_LSQUARE_in_synpred445_bashast3865); if (state.failed) return;

		if ( input.LA(1)==BANG||input.LA(1)==CARET ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		// com/caseystella/parser/bashast.g:424:25: ( pattern_match )+
		int cnt419=0;
		loop419:
		while (true) {
			int alt419=2;
			int LA419_0 = input.LA(1);
			if ( (LA419_0==ARITH_ASSIGN||LA419_0==BOP||(LA419_0 >= CARET && LA419_0 <= CASE)||LA419_0==COLON||(LA419_0 >= DEC && LA419_0 <= DO)||(LA419_0 >= DONE && LA419_0 <= DOTDOT)||(LA419_0 >= ELIF && LA419_0 <= ELSE)||LA419_0==EQUALS||(LA419_0 >= ESAC && LA419_0 <= ESC_CHAR)||LA419_0==FI||LA419_0==FOR||LA419_0==FUNCTION||(LA419_0 >= IF && LA419_0 <= INC)||LA419_0==LETTER||LA419_0==LSQUARE||(LA419_0 >= MINUS && LA419_0 <= NAME)||(LA419_0 >= NQSTR && LA419_0 <= NUMBER)||(LA419_0 >= PCT && LA419_0 <= PCTPCT)||LA419_0==SELECT||LA419_0==SLASH||(LA419_0 >= TEST && LA419_0 <= THEN)||(LA419_0 >= TILDE && LA419_0 <= TIME)||(LA419_0 >= UNTIL && LA419_0 <= UOP)||LA419_0==WHILE||LA419_0==138) ) {
				alt419=1;
			}

			switch (alt419) {
			case 1 :
				// com/caseystella/parser/bashast.g:424:25: pattern_match
				{
				pushFollow(FOLLOW_pattern_match_in_synpred445_bashast3873);
				pattern_match();
				state._fsp--;
				if (state.failed) return;

				}
				break;

			default :
				if ( cnt419 >= 1 ) break loop419;
				if (state.backtracking>0) {state.failed=true; return;}
				EarlyExitException eee = new EarlyExitException(419, input);
				throw eee;
			}
			cnt419++;
		}

		match(input,RSQUARE,FOLLOW_RSQUARE_in_synpred445_bashast3876); if (state.failed) return;

		}

	}
	// $ANTLR end synpred445_bashast

	// $ANTLR start synpred448_bashast
	public final void synpred448_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:429:13: ( str_part_with_pound )
		// com/caseystella/parser/bashast.g:429:13: str_part_with_pound
		{
		pushFollow(FOLLOW_str_part_with_pound_in_synpred448_bashast3920);
		str_part_with_pound();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred448_bashast

	// $ANTLR start synpred492_bashast
	public final void synpred492_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:449:4: ( arithmetics )
		// com/caseystella/parser/bashast.g:449:4: arithmetics
		{
		pushFollow(FOLLOW_arithmetics_in_synpred492_bashast4230);
		arithmetics();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred492_bashast

	// $ANTLR start synpred496_bashast
	public final void synpred496_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:455:4: ( arithmetic_condition )
		// com/caseystella/parser/bashast.g:455:4: arithmetic_condition
		{
		pushFollow(FOLLOW_arithmetic_condition_in_synpred496_bashast4268);
		arithmetic_condition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred496_bashast

	// $ANTLR start synpred507_bashast
	public final void synpred507_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:469:9: ( post_inc_dec )
		// com/caseystella/parser/bashast.g:469:9: post_inc_dec
		{
		pushFollow(FOLLOW_post_inc_dec_in_synpred507_bashast4398);
		post_inc_dec();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred507_bashast

	// $ANTLR start synpred509_bashast
	public final void synpred509_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:471:4: ( primary )
		// com/caseystella/parser/bashast.g:471:4: primary
		{
		pushFollow(FOLLOW_primary_in_synpred509_bashast4408);
		primary();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred509_bashast

	// $ANTLR start synpred522_bashast
	public final void synpred522_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:478:20: ( ( BLANK )* ( TIMES | SLASH | PCT ) ( BLANK )* exponential )
		// com/caseystella/parser/bashast.g:478:20: ( BLANK )* ( TIMES | SLASH | PCT ) ( BLANK )* exponential
		{
		// com/caseystella/parser/bashast.g:478:25: ( BLANK )*
		loop432:
		while (true) {
			int alt432=2;
			int LA432_0 = input.LA(1);
			if ( (LA432_0==BLANK) ) {
				alt432=1;
			}

			switch (alt432) {
			case 1 :
				// com/caseystella/parser/bashast.g:478:25: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred522_bashast4481); if (state.failed) return;

				}
				break;

			default :
				break loop432;
			}
		}

		if ( input.LA(1)==PCT||input.LA(1)==SLASH||input.LA(1)==TIMES ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		// com/caseystella/parser/bashast.g:478:52: ( BLANK )*
		loop433:
		while (true) {
			int alt433=2;
			int LA433_0 = input.LA(1);
			if ( (LA433_0==BLANK) ) {
				alt433=1;
			}

			switch (alt433) {
			case 1 :
				// com/caseystella/parser/bashast.g:478:52: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred522_bashast4494); if (state.failed) return;

				}
				break;

			default :
				break loop433;
			}
		}

		pushFollow(FOLLOW_exponential_in_synpred522_bashast4498);
		exponential();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred522_bashast

	// $ANTLR start synpred526_bashast
	public final void synpred526_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:479:15: ( ( BLANK )* ( PLUS | MINUS ) ( BLANK )* tdm )
		// com/caseystella/parser/bashast.g:479:15: ( BLANK )* ( PLUS | MINUS ) ( BLANK )* tdm
		{
		// com/caseystella/parser/bashast.g:479:20: ( BLANK )*
		loop434:
		while (true) {
			int alt434=2;
			int LA434_0 = input.LA(1);
			if ( (LA434_0==BLANK) ) {
				alt434=1;
			}

			switch (alt434) {
			case 1 :
				// com/caseystella/parser/bashast.g:479:20: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred526_bashast4510); if (state.failed) return;

				}
				break;

			default :
				break loop434;
			}
		}

		if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		// com/caseystella/parser/bashast.g:479:42: ( BLANK )*
		loop435:
		while (true) {
			int alt435=2;
			int LA435_0 = input.LA(1);
			if ( (LA435_0==BLANK) ) {
				alt435=1;
			}

			switch (alt435) {
			case 1 :
				// com/caseystella/parser/bashast.g:479:42: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred526_bashast4521); if (state.failed) return;

				}
				break;

			default :
				break loop435;
			}
		}

		pushFollow(FOLLOW_tdm_in_synpred526_bashast4525);
		tdm();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred526_bashast

	// $ANTLR start synpred530_bashast
	public final void synpred530_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:480:18: ( ( BLANK )* ( LSHIFT | RSHIFT ) ( BLANK )* addsub )
		// com/caseystella/parser/bashast.g:480:18: ( BLANK )* ( LSHIFT | RSHIFT ) ( BLANK )* addsub
		{
		// com/caseystella/parser/bashast.g:480:23: ( BLANK )*
		loop436:
		while (true) {
			int alt436=2;
			int LA436_0 = input.LA(1);
			if ( (LA436_0==BLANK) ) {
				alt436=1;
			}

			switch (alt436) {
			case 1 :
				// com/caseystella/parser/bashast.g:480:23: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred530_bashast4537); if (state.failed) return;

				}
				break;

			default :
				break loop436;
			}
		}

		if ( input.LA(1)==LSHIFT||input.LA(1)==RSHIFT ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		// com/caseystella/parser/bashast.g:480:49: ( BLANK )*
		loop437:
		while (true) {
			int alt437=2;
			int LA437_0 = input.LA(1);
			if ( (LA437_0==BLANK) ) {
				alt437=1;
			}

			switch (alt437) {
			case 1 :
				// com/caseystella/parser/bashast.g:480:49: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred530_bashast4549); if (state.failed) return;

				}
				break;

			default :
				break loop437;
			}
		}

		pushFollow(FOLLOW_addsub_in_synpred530_bashast4553);
		addsub();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred530_bashast

	// $ANTLR start synpred536_bashast
	public final void synpred536_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:481:19: ( ( BLANK )* ( LEQ | GEQ | LT | GT ) ( BLANK )* shifts )
		// com/caseystella/parser/bashast.g:481:19: ( BLANK )* ( LEQ | GEQ | LT | GT ) ( BLANK )* shifts
		{
		// com/caseystella/parser/bashast.g:481:24: ( BLANK )*
		loop438:
		while (true) {
			int alt438=2;
			int LA438_0 = input.LA(1);
			if ( (LA438_0==BLANK) ) {
				alt438=1;
			}

			switch (alt438) {
			case 1 :
				// com/caseystella/parser/bashast.g:481:24: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred536_bashast4565); if (state.failed) return;

				}
				break;

			default :
				break loop438;
			}
		}

		if ( (input.LA(1) >= GEQ && input.LA(1) <= GT)||input.LA(1)==LEQ||input.LA(1)==LT ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		// com/caseystella/parser/bashast.g:481:51: ( BLANK )*
		loop439:
		while (true) {
			int alt439=2;
			int LA439_0 = input.LA(1);
			if ( (LA439_0==BLANK) ) {
				alt439=1;
			}

			switch (alt439) {
			case 1 :
				// com/caseystella/parser/bashast.g:481:51: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred536_bashast4582); if (state.failed) return;

				}
				break;

			default :
				break loop439;
			}
		}

		pushFollow(FOLLOW_shifts_in_synpred536_bashast4586);
		shifts();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred536_bashast

	// $ANTLR start synpred539_bashast
	public final void synpred539_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:483:13: ( ( BLANK )* AMP ( BLANK )* compare )
		// com/caseystella/parser/bashast.g:483:13: ( BLANK )* AMP ( BLANK )* compare
		{
		// com/caseystella/parser/bashast.g:483:18: ( BLANK )*
		loop440:
		while (true) {
			int alt440=2;
			int LA440_0 = input.LA(1);
			if ( (LA440_0==BLANK) ) {
				alt440=1;
			}

			switch (alt440) {
			case 1 :
				// com/caseystella/parser/bashast.g:483:18: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred539_bashast4599); if (state.failed) return;

				}
				break;

			default :
				break loop440;
			}
		}

		match(input,AMP,FOLLOW_AMP_in_synpred539_bashast4603); if (state.failed) return;

		// com/caseystella/parser/bashast.g:483:31: ( BLANK )*
		loop441:
		while (true) {
			int alt441=2;
			int LA441_0 = input.LA(1);
			if ( (LA441_0==BLANK) ) {
				alt441=1;
			}

			switch (alt441) {
			case 1 :
				// com/caseystella/parser/bashast.g:483:31: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred539_bashast4606); if (state.failed) return;

				}
				break;

			default :
				break loop441;
			}
		}

		pushFollow(FOLLOW_compare_in_synpred539_bashast4610);
		compare();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred539_bashast

	// $ANTLR start synpred542_bashast
	public final void synpred542_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:485:16: ( ( BLANK )* CARET ( BLANK )* bitwiseand )
		// com/caseystella/parser/bashast.g:485:16: ( BLANK )* CARET ( BLANK )* bitwiseand
		{
		// com/caseystella/parser/bashast.g:485:21: ( BLANK )*
		loop442:
		while (true) {
			int alt442=2;
			int LA442_0 = input.LA(1);
			if ( (LA442_0==BLANK) ) {
				alt442=1;
			}

			switch (alt442) {
			case 1 :
				// com/caseystella/parser/bashast.g:485:21: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred542_bashast4623); if (state.failed) return;

				}
				break;

			default :
				break loop442;
			}
		}

		match(input,CARET,FOLLOW_CARET_in_synpred542_bashast4627); if (state.failed) return;

		// com/caseystella/parser/bashast.g:485:36: ( BLANK )*
		loop443:
		while (true) {
			int alt443=2;
			int LA443_0 = input.LA(1);
			if ( (LA443_0==BLANK) ) {
				alt443=1;
			}

			switch (alt443) {
			case 1 :
				// com/caseystella/parser/bashast.g:485:36: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred542_bashast4630); if (state.failed) return;

				}
				break;

			default :
				break loop443;
			}
		}

		pushFollow(FOLLOW_bitwiseand_in_synpred542_bashast4634);
		bitwiseand();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred542_bashast

	// $ANTLR start synpred545_bashast
	public final void synpred545_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:487:16: ( ( BLANK )* PIPE ( BLANK )* bitwisexor )
		// com/caseystella/parser/bashast.g:487:16: ( BLANK )* PIPE ( BLANK )* bitwisexor
		{
		// com/caseystella/parser/bashast.g:487:21: ( BLANK )*
		loop444:
		while (true) {
			int alt444=2;
			int LA444_0 = input.LA(1);
			if ( (LA444_0==BLANK) ) {
				alt444=1;
			}

			switch (alt444) {
			case 1 :
				// com/caseystella/parser/bashast.g:487:21: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred545_bashast4647); if (state.failed) return;

				}
				break;

			default :
				break loop444;
			}
		}

		match(input,PIPE,FOLLOW_PIPE_in_synpred545_bashast4651); if (state.failed) return;

		// com/caseystella/parser/bashast.g:487:35: ( BLANK )*
		loop445:
		while (true) {
			int alt445=2;
			int LA445_0 = input.LA(1);
			if ( (LA445_0==BLANK) ) {
				alt445=1;
			}

			switch (alt445) {
			case 1 :
				// com/caseystella/parser/bashast.g:487:35: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred545_bashast4654); if (state.failed) return;

				}
				break;

			default :
				break loop445;
			}
		}

		pushFollow(FOLLOW_bitwisexor_in_synpred545_bashast4658);
		bitwisexor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred545_bashast

	// $ANTLR start synpred548_bashast
	public final void synpred548_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:488:22: ( ( BLANK )* LOGICAND ( BLANK )* bitwiseor )
		// com/caseystella/parser/bashast.g:488:22: ( BLANK )* LOGICAND ( BLANK )* bitwiseor
		{
		// com/caseystella/parser/bashast.g:488:27: ( BLANK )*
		loop446:
		while (true) {
			int alt446=2;
			int LA446_0 = input.LA(1);
			if ( (LA446_0==BLANK) ) {
				alt446=1;
			}

			switch (alt446) {
			case 1 :
				// com/caseystella/parser/bashast.g:488:27: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred548_bashast4669); if (state.failed) return;

				}
				break;

			default :
				break loop446;
			}
		}

		match(input,LOGICAND,FOLLOW_LOGICAND_in_synpred548_bashast4673); if (state.failed) return;

		// com/caseystella/parser/bashast.g:488:45: ( BLANK )*
		loop447:
		while (true) {
			int alt447=2;
			int LA447_0 = input.LA(1);
			if ( (LA447_0==BLANK) ) {
				alt447=1;
			}

			switch (alt447) {
			case 1 :
				// com/caseystella/parser/bashast.g:488:45: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred548_bashast4676); if (state.failed) return;

				}
				break;

			default :
				break loop447;
			}
		}

		pushFollow(FOLLOW_bitwiseor_in_synpred548_bashast4680);
		bitwiseor();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred548_bashast

	// $ANTLR start synpred551_bashast
	public final void synpred551_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:489:21: ( ( BLANK )* LOGICOR ( BLANK )* logicand )
		// com/caseystella/parser/bashast.g:489:21: ( BLANK )* LOGICOR ( BLANK )* logicand
		{
		// com/caseystella/parser/bashast.g:489:26: ( BLANK )*
		loop448:
		while (true) {
			int alt448=2;
			int LA448_0 = input.LA(1);
			if ( (LA448_0==BLANK) ) {
				alt448=1;
			}

			switch (alt448) {
			case 1 :
				// com/caseystella/parser/bashast.g:489:26: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred551_bashast4692); if (state.failed) return;

				}
				break;

			default :
				break loop448;
			}
		}

		match(input,LOGICOR,FOLLOW_LOGICOR_in_synpred551_bashast4696); if (state.failed) return;

		// com/caseystella/parser/bashast.g:489:43: ( BLANK )*
		loop449:
		while (true) {
			int alt449=2;
			int LA449_0 = input.LA(1);
			if ( (LA449_0==BLANK) ) {
				alt449=1;
			}

			switch (alt449) {
			case 1 :
				// com/caseystella/parser/bashast.g:489:43: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred551_bashast4699); if (state.failed) return;

				}
				break;

			default :
				break loop449;
			}
		}

		pushFollow(FOLLOW_logicand_in_synpred551_bashast4703);
		logicand();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred551_bashast

	// $ANTLR start synpred555_bashast
	public final void synpred555_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:494:5: ( name ( BLANK )* ( EQUALS | ARITH_ASSIGN ) ( BLANK )* )
		// com/caseystella/parser/bashast.g:494:5: name ( BLANK )* ( EQUALS | ARITH_ASSIGN ) ( BLANK )*
		{
		pushFollow(FOLLOW_name_in_synpred555_bashast4752);
		name();
		state._fsp--;
		if (state.failed) return;

		// com/caseystella/parser/bashast.g:494:15: ( BLANK )*
		loop450:
		while (true) {
			int alt450=2;
			int LA450_0 = input.LA(1);
			if ( (LA450_0==BLANK) ) {
				alt450=1;
			}

			switch (alt450) {
			case 1 :
				// com/caseystella/parser/bashast.g:494:15: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred555_bashast4754); if (state.failed) return;

				}
				break;

			default :
				break loop450;
			}
		}

		if ( input.LA(1)==ARITH_ASSIGN||input.LA(1)==EQUALS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		// com/caseystella/parser/bashast.g:494:47: ( BLANK )*
		loop451:
		while (true) {
			int alt451=2;
			int LA451_0 = input.LA(1);
			if ( (LA451_0==BLANK) ) {
				alt451=1;
			}

			switch (alt451) {
			case 1 :
				// com/caseystella/parser/bashast.g:494:47: BLANK
				{
				match(input,BLANK,FOLLOW_BLANK_in_synpred555_bashast4766); if (state.failed) return;

				}
				break;

			default :
				break loop451;
			}
		}

		}

	}
	// $ANTLR end synpred555_bashast

	// $ANTLR start synpred557_bashast
	public final void synpred557_bashast_fragment() throws RecognitionException {
		// com/caseystella/parser/bashast.g:496:33: ( BLANK )
		// com/caseystella/parser/bashast.g:496:33: BLANK
		{
		match(input,BLANK,FOLLOW_BLANK_in_synpred557_bashast4790); if (state.failed) return;

		}

	}
	// $ANTLR end synpred557_bashast

	// Delegated rules

	public final boolean synpred37_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred37_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred203_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred203_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred349_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred349_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred530_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred530_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred29_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred29_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred273_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred273_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred545_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred545_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred243_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred243_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred234_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred234_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred238_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred238_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred422_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred422_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred77_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred77_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred44_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred44_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred208_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred208_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred416_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred416_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred548_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred548_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred54_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred421_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred421_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred430_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred430_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred274_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred274_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred509_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred509_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred218_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred218_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred74_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred74_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred147_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred147_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred165_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred165_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred189_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred189_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred431_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred431_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred206_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred206_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred304_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred304_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred423_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred423_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred140_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred140_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred316_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred316_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred50_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred50_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred249_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred249_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred426_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred426_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred216_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred216_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred542_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred542_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred496_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred496_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred245_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred245_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred445_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred445_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred62_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred62_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred310_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred310_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred90_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred90_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred219_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred219_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred313_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred313_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred43_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred43_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred404_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred404_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred100_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred100_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred46_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred46_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred5_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred337_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred337_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred253_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred253_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred311_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred311_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred102_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred102_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred183_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred183_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred25_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred25_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred301_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred301_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred425_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred425_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred314_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred314_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred207_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred207_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred59_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred59_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred93_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred93_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred81_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred81_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred551_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred551_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred539_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred539_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred85_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred85_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred526_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred526_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred440_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred440_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred413_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred413_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred151_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred151_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred399_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred399_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred428_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred428_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred48_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred48_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred67_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred67_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred417_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred417_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred255_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred255_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred507_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred507_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred40_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred40_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred241_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred241_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred427_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred427_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred157_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred157_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred64_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred64_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred408_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred408_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred42_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred42_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred419_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred419_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred53_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred53_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred153_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred153_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred293_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred293_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred279_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred279_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred60_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred60_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred265_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred265_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred28_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred28_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred407_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred407_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred217_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred217_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred167_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred167_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred536_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred536_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred251_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred251_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred70_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred70_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred266_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred266_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred315_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred315_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred555_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred555_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred309_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred309_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred105_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred105_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred267_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred267_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred398_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred398_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred284_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred284_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred292_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred292_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred56_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred56_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred236_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred236_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred302_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred302_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred448_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred448_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred420_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred420_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred244_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred244_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred400_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred400_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred84_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred84_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred232_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred232_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred522_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred522_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred209_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred209_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred377_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred377_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred156_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred156_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred82_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred82_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred429_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred429_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred312_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred312_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred442_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred442_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred414_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred414_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred91_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred91_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred61_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred61_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred402_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred402_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred275_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred275_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred38_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred406_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred406_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred224_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred224_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred63_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred63_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred492_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred492_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred305_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred305_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred288_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred288_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred200_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred200_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred143_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred143_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred98_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred98_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred141_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred141_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred300_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred300_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred405_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred405_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred418_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred418_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred18_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred11_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred246_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred246_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred557_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred557_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred119_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred119_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred256_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred256_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred403_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred403_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred19_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred303_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred303_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred415_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred415_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred248_bashast() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred248_bashast_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA13 dfa13 = new DFA13(this);
	protected DFA21 dfa21 = new DFA21(this);
	protected DFA28 dfa28 = new DFA28(this);
	protected DFA33 dfa33 = new DFA33(this);
	protected DFA36 dfa36 = new DFA36(this);
	protected DFA37 dfa37 = new DFA37(this);
	protected DFA90 dfa90 = new DFA90(this);
	protected DFA81 dfa81 = new DFA81(this);
	protected DFA88 dfa88 = new DFA88(this);
	protected DFA117 dfa117 = new DFA117(this);
	protected DFA135 dfa135 = new DFA135(this);
	protected DFA138 dfa138 = new DFA138(this);
	protected DFA142 dfa142 = new DFA142(this);
	protected DFA145 dfa145 = new DFA145(this);
	protected DFA147 dfa147 = new DFA147(this);
	protected DFA159 dfa159 = new DFA159(this);
	protected DFA201 dfa201 = new DFA201(this);
	protected DFA231 dfa231 = new DFA231(this);
	protected DFA239 dfa239 = new DFA239(this);
	protected DFA254 dfa254 = new DFA254(this);
	protected DFA269 dfa269 = new DFA269(this);
	protected DFA314 dfa314 = new DFA314(this);
	protected DFA310 dfa310 = new DFA310(this);
	protected DFA311 dfa311 = new DFA311(this);
	protected DFA313 dfa313 = new DFA313(this);
	protected DFA375 dfa375 = new DFA375(this);
	static final String DFA13_eotS =
		"\5\uffff";
	static final String DFA13_eofS =
		"\2\2\2\uffff\1\2";
	static final String DFA13_minS =
		"\2\5\2\uffff\1\5";
	static final String DFA13_maxS =
		"\2\170\2\uffff\1\170";
	static final String DFA13_acceptS =
		"\2\uffff\1\2\1\1\1\uffff";
	static final String DFA13_specialS =
		"\5\uffff}>";
	static final String[] DFA13_transitionS = {
			"\1\2\6\uffff\1\1\32\uffff\1\2\2\uffff\1\2\41\uffff\2\3\45\uffff\1\2\4"+
			"\uffff\1\2",
			"\1\2\6\uffff\1\4\32\uffff\1\2\2\uffff\1\2\41\uffff\2\3\45\uffff\1\2"+
			"\4\uffff\1\2",
			"",
			"",
			"\1\2\6\uffff\1\4\32\uffff\1\2\2\uffff\1\2\41\uffff\2\3\45\uffff\1\2"+
			"\4\uffff\1\2"
	};

	static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
	static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
	static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
	static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
	static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
	static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
	static final short[][] DFA13_transition;

	static {
		int numStates = DFA13_transitionS.length;
		DFA13_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
		}
	}

	protected class DFA13 extends DFA {

		public DFA13(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 92:24: ( ( BLANK !)* ( '&&' ^| '||' ^) ( BLANK !)* ( function | pipeline ) )*";
		}
	}

	static final String DFA21_eotS =
		"\5\uffff";
	static final String DFA21_eofS =
		"\2\2\2\uffff\1\2";
	static final String DFA21_minS =
		"\2\5\2\uffff\1\5";
	static final String DFA21_maxS =
		"\2\u008a\2\uffff\1\u008a";
	static final String DFA21_acceptS =
		"\2\uffff\1\2\1\1\1\uffff";
	static final String DFA21_specialS =
		"\5\uffff}>";
	static final String[] DFA21_transitionS = {
			"\1\2\6\uffff\1\1\32\uffff\1\2\2\uffff\1\2\34\uffff\2\3\3\uffff\2\2\14"+
			"\uffff\1\3\30\uffff\1\2\4\uffff\1\2\7\uffff\1\2\11\uffff\1\3",
			"\1\2\6\uffff\1\4\32\uffff\1\2\2\uffff\1\2\34\uffff\2\3\3\uffff\2\2\14"+
			"\uffff\1\3\30\uffff\1\2\4\uffff\1\2\7\uffff\1\2\11\uffff\1\3",
			"",
			"",
			"\1\2\6\uffff\1\4\32\uffff\1\2\2\uffff\1\2\34\uffff\2\3\3\uffff\2\2\14"+
			"\uffff\1\3\30\uffff\1\2\4\uffff\1\2\21\uffff\1\3"
	};

	static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
	static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
	static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
	static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
	static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
	static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
	static final short[][] DFA21_transition;

	static {
		int numStates = DFA21_transitionS.length;
		DFA21_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
		}
	}

	protected class DFA21 extends DFA {

		public DFA21(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 21;
			this.eot = DFA21_eot;
			this.eof = DFA21_eof;
			this.min = DFA21_min;
			this.max = DFA21_max;
			this.accept = DFA21_accept;
			this.special = DFA21_special;
			this.transition = DFA21_transition;
		}
		@Override
		public String getDescription() {
			return "()+ loopback of 96:4: ( var_def )+";
		}
	}

	static final String DFA28_eotS =
		"\5\uffff";
	static final String DFA28_eofS =
		"\2\2\2\uffff\1\2";
	static final String DFA28_minS =
		"\2\5\2\uffff\1\5";
	static final String DFA28_maxS =
		"\2\u0080\2\uffff\1\170";
	static final String DFA28_acceptS =
		"\2\uffff\1\2\1\1\1\uffff";
	static final String DFA28_specialS =
		"\5\uffff}>";
	static final String[] DFA28_transitionS = {
			"\1\2\6\uffff\1\1\32\uffff\1\2\2\uffff\1\2\41\uffff\2\2\25\uffff\1\3\17"+
			"\uffff\1\2\4\uffff\1\2\7\uffff\1\2",
			"\1\2\6\uffff\1\4\32\uffff\1\2\2\uffff\1\2\41\uffff\2\2\25\uffff\1\3"+
			"\17\uffff\1\2\4\uffff\1\2\7\uffff\1\2",
			"",
			"",
			"\1\2\6\uffff\1\4\32\uffff\1\2\2\uffff\1\2\41\uffff\2\2\25\uffff\1\3"+
			"\17\uffff\1\2\4\uffff\1\2"
	};

	static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
	static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
	static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
	static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
	static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
	static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
	static final short[][] DFA28_transition;

	static {
		int numStates = DFA28_transitionS.length;
		DFA28_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
		}
	}

	protected class DFA28 extends DFA {

		public DFA28(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 28;
			this.eot = DFA28_eot;
			this.eof = DFA28_eof;
			this.min = DFA28_min;
			this.max = DFA28_max;
			this.accept = DFA28_accept;
			this.special = DFA28_special;
			this.transition = DFA28_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 97:41: ( ( BLANK !)* PIPE ^ ( BLANK !)* command )*";
		}
	}

	static final String DFA33_eotS =
		"\5\uffff";
	static final String DFA33_eofS =
		"\2\2\2\uffff\1\2";
	static final String DFA33_minS =
		"\2\5\2\uffff\1\5";
	static final String DFA33_maxS =
		"\2\u008a\2\uffff\1\u008a";
	static final String DFA33_acceptS =
		"\2\uffff\1\2\1\1\1\uffff";
	static final String DFA33_specialS =
		"\5\uffff}>";
	static final String[] DFA33_transitionS = {
			"\1\2\6\uffff\1\1\32\uffff\1\2\2\uffff\1\2\34\uffff\2\3\3\uffff\2\2\14"+
			"\uffff\1\3\10\uffff\1\2\17\uffff\1\2\4\uffff\1\2\7\uffff\1\2\11\uffff"+
			"\1\3",
			"\1\2\6\uffff\1\4\32\uffff\1\2\2\uffff\1\2\34\uffff\2\3\3\uffff\2\2\14"+
			"\uffff\1\3\10\uffff\1\2\17\uffff\1\2\4\uffff\1\2\7\uffff\1\2\11\uffff"+
			"\1\3",
			"",
			"",
			"\1\2\6\uffff\1\4\32\uffff\1\2\2\uffff\1\2\34\uffff\2\3\3\uffff\2\2\14"+
			"\uffff\1\3\10\uffff\1\2\17\uffff\1\2\4\uffff\1\2\21\uffff\1\3"
	};

	static final short[] DFA33_eot = DFA.unpackEncodedString(DFA33_eotS);
	static final short[] DFA33_eof = DFA.unpackEncodedString(DFA33_eofS);
	static final char[] DFA33_min = DFA.unpackEncodedStringToUnsignedChars(DFA33_minS);
	static final char[] DFA33_max = DFA.unpackEncodedStringToUnsignedChars(DFA33_maxS);
	static final short[] DFA33_accept = DFA.unpackEncodedString(DFA33_acceptS);
	static final short[] DFA33_special = DFA.unpackEncodedString(DFA33_specialS);
	static final short[][] DFA33_transition;

	static {
		int numStates = DFA33_transitionS.length;
		DFA33_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA33_transition[i] = DFA.unpackEncodedString(DFA33_transitionS[i]);
		}
	}

	protected class DFA33 extends DFA {

		public DFA33(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 33;
			this.eot = DFA33_eot;
			this.eof = DFA33_eof;
			this.min = DFA33_min;
			this.max = DFA33_max;
			this.accept = DFA33_accept;
			this.special = DFA33_special;
			this.transition = DFA33_transition;
		}
		@Override
		public String getDescription() {
			return "()+ loopback of 102:12: ( var_def )+";
		}
	}

	static final String DFA36_eotS =
		"\7\uffff";
	static final String DFA36_eofS =
		"\2\2\1\uffff\1\2\1\uffff\2\2";
	static final String DFA36_minS =
		"\2\5\1\uffff\1\10\1\uffff\1\5\1\77";
	static final String DFA36_maxS =
		"\2\u0080\1\uffff\1\u008a\1\uffff\1\170\1\165";
	static final String DFA36_acceptS =
		"\2\uffff\1\2\1\uffff\1\1\2\uffff";
	static final String DFA36_specialS =
		"\7\uffff}>";
	static final String[] DFA36_transitionS = {
			"\1\3\6\uffff\1\1\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\21\uffff\1\2\17\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\1\2\7\uffff\1\2",
			"\1\3\6\uffff\1\5\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\21\uffff\1\2\17\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\1\2\7\uffff\1\2",
			"",
			"\1\2\1\uffff\4\2\3\uffff\2\2\3\uffff\1\2\10\uffff\7\2\2\uffff\2\2\1"+
			"\uffff\1\2\1\uffff\2\2\5\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\uffff\1"+
			"\4\1\uffff\3\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\1\2\1\4\7\uffff\2\2\2\uffff\2\2\2\uffff\2\2\1\uffff\1\2\7\uffff\2\2"+
			"\7\uffff\1\4\2\2\2\uffff\2\2\2\uffff\10\2\1\uffff\1\2\2\uffff\1\2",
			"",
			"\1\6\6\uffff\1\5\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\21\uffff\1\2\17\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\1\2",
			"\1\4\21\uffff\1\4\43\uffff\1\4"
	};

	static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
	static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
	static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
	static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
	static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
	static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
	static final short[][] DFA36_transition;

	static {
		int numStates = DFA36_transitionS.length;
		DFA36_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
		}
	}

	protected class DFA36 extends DFA {

		public DFA36(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 107:27: ( redirect )*";
		}
	}

	static final String DFA37_eotS =
		"\7\uffff";
	static final String DFA37_eofS =
		"\2\2\1\uffff\1\2\1\uffff\2\2";
	static final String DFA37_minS =
		"\2\5\1\uffff\1\10\1\uffff\1\5\1\77";
	static final String DFA37_maxS =
		"\2\u0080\1\uffff\1\u008a\1\uffff\1\170\1\165";
	static final String DFA37_acceptS =
		"\2\uffff\1\2\1\uffff\1\1\2\uffff";
	static final String DFA37_specialS =
		"\7\uffff}>";
	static final String[] DFA37_transitionS = {
			"\1\3\6\uffff\1\1\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\21\uffff\1\2\17\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\1\2\7\uffff\1\2",
			"\1\3\6\uffff\1\5\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\21\uffff\1\2\17\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\1\2\7\uffff\1\2",
			"",
			"\1\2\1\uffff\4\2\3\uffff\2\2\3\uffff\1\2\10\uffff\7\2\2\uffff\2\2\1"+
			"\uffff\1\2\1\uffff\2\2\5\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\uffff\1"+
			"\4\1\uffff\3\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\1\2\1\4\7\uffff\2\2\2\uffff\2\2\2\uffff\2\2\1\uffff\1\2\7\uffff\2\2"+
			"\7\uffff\1\4\2\2\2\uffff\2\2\2\uffff\10\2\1\uffff\1\2\2\uffff\1\2",
			"",
			"\1\6\6\uffff\1\5\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\21\uffff\1\2\17\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\1\2",
			"\1\4\21\uffff\1\4\43\uffff\1\4"
	};

	static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
	static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
	static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
	static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
	static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
	static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
	static final short[][] DFA37_transition;

	static {
		int numStates = DFA37_transitionS.length;
		DFA37_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
		}
	}

	protected class DFA37 extends DFA {

		public DFA37(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 108:18: ( redirect )*";
		}
	}

	static final String DFA90_eotS =
		"\5\uffff";
	static final String DFA90_eofS =
		"\5\uffff";
	static final String DFA90_minS =
		"\1\71\2\14\2\uffff";
	static final String DFA90_maxS =
		"\1\71\1\113\1\u008a\2\uffff";
	static final String DFA90_acceptS =
		"\3\uffff\1\2\1\1";
	static final String DFA90_specialS =
		"\5\uffff}>";
	static final String[] DFA90_transitionS = {
			"\1\1",
			"\1\2\76\uffff\1\3",
			"\1\2\73\uffff\1\4\2\uffff\1\3\16\uffff\1\4\57\uffff\1\4",
			"",
			""
	};

	static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
	static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
	static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
	static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
	static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
	static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
	static final short[][] DFA90_transition;

	static {
		int numStates = DFA90_transitionS.length;
		DFA90_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
		}
	}

	protected class DFA90 extends DFA {

		public DFA90(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 90;
			this.eot = DFA90_eot;
			this.eof = DFA90_eof;
			this.min = DFA90_min;
			this.max = DFA90_max;
			this.accept = DFA90_accept;
			this.special = DFA90_special;
			this.transition = DFA90_transition;
		}
		@Override
		public String getDescription() {
			return "176:1: for_expr : ( FOR ( BLANK )+ name ( wspace IN ( BLANK )+ word )? semiel DO ( wspace )* clist semiel DONE -> ^( FOR name ( word )? clist ) | FOR ( BLANK )* LLPAREN ( EOL )? ( ( BLANK )* init= arithmetic ( BLANK )* | ( BLANK )+ )? ( SEMIC ( ( BLANK )? fcond= arithmetic ( BLANK )* | ( BLANK )+ )? SEMIC | DOUBLE_SEMIC ) ( ( BLANK )* mod= arithmetic )? ( wspace )* RRPAREN semiel DO wspace clist semiel DONE -> ^( FOR ( ^( FOR_INIT $init) )? ( ^( FOR_COND $fcond) )? ( ^( FOR_MOD $mod) )? clist ) );";
		}
	}

	static final String DFA81_eotS =
		"\5\uffff";
	static final String DFA81_eofS =
		"\5\uffff";
	static final String DFA81_minS =
		"\2\13\3\uffff";
	static final String DFA81_maxS =
		"\2\u008a\3\uffff";
	static final String DFA81_acceptS =
		"\2\uffff\1\1\1\3\1\2";
	static final String DFA81_specialS =
		"\5\uffff}>";
	static final String[] DFA81_transitionS = {
			"\1\2\1\1\22\uffff\2\2\1\uffff\1\2\4\uffff\1\3\33\uffff\1\2\4\uffff\1"+
			"\2\5\uffff\1\2\12\uffff\2\2\3\uffff\1\2\5\uffff\1\2\23\uffff\1\3\7\uffff"+
			"\2\2\10\uffff\1\2",
			"\1\2\1\1\22\uffff\2\2\1\uffff\1\2\4\uffff\1\4\33\uffff\1\2\4\uffff\1"+
			"\2\5\uffff\1\2\12\uffff\2\2\3\uffff\1\2\5\uffff\1\2\23\uffff\1\4\7\uffff"+
			"\2\2\10\uffff\1\2",
			"",
			"",
			""
	};

	static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
	static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
	static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
	static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
	static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
	static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
	static final short[][] DFA81_transition;

	static {
		int numStates = DFA81_transitionS.length;
		DFA81_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
		}
	}

	protected class DFA81 extends DFA {

		public DFA81(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}
		@Override
		public String getDescription() {
			return "177:28: ( ( BLANK )* init= arithmetic ( BLANK )* | ( BLANK )+ )?";
		}
	}

	static final String DFA88_eotS =
		"\4\uffff";
	static final String DFA88_eofS =
		"\4\uffff";
	static final String DFA88_minS =
		"\2\13\2\uffff";
	static final String DFA88_maxS =
		"\2\u008a\2\uffff";
	static final String DFA88_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA88_specialS =
		"\4\uffff}>";
	static final String[] DFA88_transitionS = {
			"\1\2\1\1\22\uffff\2\2\1\uffff\1\2\7\uffff\1\3\30\uffff\1\2\4\uffff\1"+
			"\2\5\uffff\1\2\12\uffff\2\2\3\uffff\1\2\5\uffff\1\2\17\uffff\1\3\13\uffff"+
			"\2\2\10\uffff\1\2",
			"\1\2\1\1\22\uffff\2\2\1\uffff\1\2\7\uffff\1\3\30\uffff\1\2\4\uffff\1"+
			"\2\5\uffff\1\2\12\uffff\2\2\3\uffff\1\2\5\uffff\1\2\17\uffff\1\3\13\uffff"+
			"\2\2\10\uffff\1\2",
			"",
			""
	};

	static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
	static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
	static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
	static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
	static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
	static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
	static final short[][] DFA88_transition;

	static {
		int numStates = DFA88_transitionS.length;
		DFA88_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
		}
	}

	protected class DFA88 extends DFA {

		public DFA88(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 88;
			this.eot = DFA88_eot;
			this.eof = DFA88_eof;
			this.min = DFA88_min;
			this.max = DFA88_max;
			this.accept = DFA88_accept;
			this.special = DFA88_special;
			this.transition = DFA88_transition;
		}
		@Override
		public String getDescription() {
			return "177:136: ( ( BLANK )* mod= arithmetic )?";
		}
	}

	static final String DFA117_eotS =
		"\4\uffff";
	static final String DFA117_eofS =
		"\4\uffff";
	static final String DFA117_minS =
		"\2\14\2\uffff";
	static final String DFA117_maxS =
		"\2\163\2\uffff";
	static final String DFA117_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA117_specialS =
		"\4\uffff}>";
	static final String[] DFA117_transitionS = {
			"\1\1\126\uffff\1\3\17\uffff\1\2",
			"\1\1\126\uffff\1\3\17\uffff\1\2",
			"",
			""
	};

	static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
	static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
	static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
	static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
	static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
	static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
	static final short[][] DFA117_transition;

	static {
		int numStates = DFA117_transitionS.length;
		DFA117_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
		}
	}

	protected class DFA117 extends DFA {

		public DFA117(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 117;
			this.eot = DFA117_eot;
			this.eof = DFA117_eof;
			this.min = DFA117_min;
			this.max = DFA117_max;
			this.accept = DFA117_accept;
			this.special = DFA117_special;
			this.transition = DFA117_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 197:37: ( ( BLANK )* PIPE ( BLANK )? pattern )*";
		}
	}

	static final String DFA135_eotS =
		"\4\uffff";
	static final String DFA135_eofS =
		"\4\uffff";
	static final String DFA135_minS =
		"\2\14\2\uffff";
	static final String DFA135_maxS =
		"\2\163\2\uffff";
	static final String DFA135_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA135_specialS =
		"\4\uffff}>";
	static final String[] DFA135_transitionS = {
			"\1\1\126\uffff\1\3\17\uffff\1\2",
			"\1\1\126\uffff\1\3\17\uffff\1\2",
			"",
			""
	};

	static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
	static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
	static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
	static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
	static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
	static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
	static final short[][] DFA135_transition;

	static {
		int numStates = DFA135_transitionS.length;
		DFA135_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
		}
	}

	protected class DFA135 extends DFA {

		public DFA135(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 135;
			this.eot = DFA135_eot;
			this.eof = DFA135_eof;
			this.min = DFA135_min;
			this.max = DFA135_max;
			this.accept = DFA135_accept;
			this.special = DFA135_special;
			this.transition = DFA135_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 205:37: ( ( BLANK )* PIPE ( BLANK )? pattern )*";
		}
	}

	static final String DFA138_eotS =
		"\4\uffff";
	static final String DFA138_eofS =
		"\4\uffff";
	static final String DFA138_minS =
		"\1\10\1\uffff\1\10\1\uffff";
	static final String DFA138_maxS =
		"\1\u008a\1\uffff\1\u008a\1\uffff";
	static final String DFA138_acceptS =
		"\1\uffff\1\1\1\uffff\1\2";
	static final String DFA138_specialS =
		"\4\uffff}>";
	static final String[] DFA138_transitionS = {
			"\1\1\1\uffff\2\1\1\2\1\1\3\uffff\2\1\3\uffff\1\1\10\uffff\7\1\1\uffff"+
			"\1\3\2\1\1\3\1\1\1\uffff\2\1\5\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff"+
			"\3\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\10\uffff"+
			"\2\1\2\uffff\2\1\2\uffff\2\1\1\uffff\1\1\7\uffff\2\1\10\uffff\2\1\2\uffff"+
			"\2\1\2\uffff\10\1\1\uffff\1\1\2\uffff\1\1",
			"",
			"\1\1\1\uffff\2\1\1\2\1\1\3\uffff\2\1\3\uffff\1\1\10\uffff\7\1\1\uffff"+
			"\1\3\2\1\1\3\1\1\1\uffff\2\1\5\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff"+
			"\3\1\1\uffff\1\1\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\10\uffff"+
			"\2\1\2\uffff\2\1\2\uffff\2\1\1\uffff\1\1\7\uffff\2\1\10\uffff\2\1\2\uffff"+
			"\2\1\2\uffff\10\1\1\uffff\1\1\2\uffff\1\1",
			""
	};

	static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
	static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
	static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
	static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
	static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
	static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
	static final short[][] DFA138_transition;

	static {
		int numStates = DFA138_transitionS.length;
		DFA138_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
		}
	}

	protected class DFA138 extends DFA {

		public DFA138(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 138;
			this.eot = DFA138_eot;
			this.eof = DFA138_eof;
			this.min = DFA138_min;
			this.max = DFA138_max;
			this.accept = DFA138_accept;
			this.special = DFA138_special;
			this.transition = DFA138_transition;
		}
		@Override
		public String getDescription() {
			return "205:89: ( clist )?";
		}
	}

	static final String DFA142_eotS =
		"\5\uffff";
	static final String DFA142_eofS =
		"\2\uffff\1\4\2\uffff";
	static final String DFA142_minS =
		"\3\14\2\uffff";
	static final String DFA142_maxS =
		"\2\52\1\55\2\uffff";
	static final String DFA142_acceptS =
		"\3\uffff\1\1\1\2";
	static final String DFA142_specialS =
		"\5\uffff}>";
	static final String[] DFA142_transitionS = {
			"\1\1\32\uffff\1\3\2\uffff\1\2",
			"\1\1\32\uffff\1\3\2\uffff\1\2",
			"\1\1\32\uffff\1\3\2\uffff\1\2\2\uffff\1\4",
			"",
			""
	};

	static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
	static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
	static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
	static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
	static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
	static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
	static final short[][] DFA142_transition;

	static {
		int numStates = DFA142_transitionS.length;
		DFA142_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
		}
	}

	protected class DFA142 extends DFA {

		public DFA142(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 142;
			this.eot = DFA142_eot;
			this.eof = DFA142_eof;
			this.min = DFA142_min;
			this.max = DFA142_max;
			this.accept = DFA142_accept;
			this.special = DFA142_special;
			this.transition = DFA142_transition;
		}
		@Override
		public String getDescription() {
			return "205:96: ( ( wspace )* DOUBLE_SEMIC | ( ( BLANK )* EOL )+ )";
		}
	}

	static final String DFA145_eotS =
		"\4\uffff";
	static final String DFA145_eofS =
		"\4\uffff";
	static final String DFA145_minS =
		"\2\14\2\uffff";
	static final String DFA145_maxS =
		"\2\170\2\uffff";
	static final String DFA145_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA145_specialS =
		"\4\uffff}>";
	static final String[] DFA145_transitionS = {
			"\1\1\35\uffff\1\3\110\uffff\1\3\4\uffff\1\2",
			"\1\1\35\uffff\1\3\110\uffff\1\3\4\uffff\1\2",
			"",
			""
	};

	static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
	static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
	static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
	static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
	static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
	static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
	static final short[][] DFA145_transition;

	static {
		int numStates = DFA145_transitionS.length;
		DFA145_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
		}
	}

	protected class DFA145 extends DFA {

		public DFA145(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 145;
			this.eot = DFA145_eot;
			this.eof = DFA145_eof;
			this.min = DFA145_min;
			this.max = DFA145_max;
			this.accept = DFA145_accept;
			this.special = DFA145_special;
			this.transition = DFA145_transition;
		}
		@Override
		public String getDescription() {
			return "209:32: ( ( BLANK )* SEMIC )?";
		}
	}

	static final String DFA147_eotS =
		"\4\uffff";
	static final String DFA147_eofS =
		"\4\uffff";
	static final String DFA147_minS =
		"\2\14\2\uffff";
	static final String DFA147_maxS =
		"\2\163\2\uffff";
	static final String DFA147_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA147_specialS =
		"\4\uffff}>";
	static final String[] DFA147_transitionS = {
			"\1\1\35\uffff\1\3\110\uffff\1\2",
			"\1\1\35\uffff\1\3\110\uffff\1\2",
			"",
			""
	};

	static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
	static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
	static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
	static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
	static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
	static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
	static final short[][] DFA147_transition;

	static {
		int numStates = DFA147_transitionS.length;
		DFA147_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
		}
	}

	protected class DFA147 extends DFA {

		public DFA147(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 147;
			this.eot = DFA147_eot;
			this.eof = DFA147_eof;
			this.min = DFA147_min;
			this.max = DFA147_max;
			this.accept = DFA147_accept;
			this.special = DFA147_special;
			this.transition = DFA147_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 209:48: ( ( BLANK )* EOL )*";
		}
	}

	static final String DFA159_eotS =
		"\6\uffff";
	static final String DFA159_eofS =
		"\6\uffff";
	static final String DFA159_minS =
		"\2\14\1\53\3\uffff";
	static final String DFA159_maxS =
		"\2\u008a\1\120\3\uffff";
	static final String DFA159_acceptS =
		"\3\uffff\1\3\1\1\1\2";
	static final String DFA159_specialS =
		"\6\uffff}>";
	static final String[] DFA159_transitionS = {
			"\1\1\72\uffff\1\3\1\2\21\uffff\1\2\57\uffff\1\2",
			"\1\1\72\uffff\1\3\1\2\21\uffff\1\2\57\uffff\1\2",
			"\1\5\44\uffff\1\4",
			"",
			"",
			""
	};

	static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
	static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
	static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
	static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
	static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
	static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
	static final short[][] DFA159_transition;

	static {
		int numStates = DFA159_transitionS.length;
		DFA159_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
		}
	}

	protected class DFA159 extends DFA {

		public DFA159(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 159;
			this.eot = DFA159_eot;
			this.eof = DFA159_eof;
			this.min = DFA159_min;
			this.max = DFA159_max;
			this.accept = DFA159_accept;
			this.special = DFA159_special;
			this.transition = DFA159_transition;
		}
		@Override
		public String getDescription() {
			return "220:1: var_def : ( ( BLANK )* name LSQUARE ( BLANK )? index ( BLANK )* RSQUARE EQUALS value ( BLANK )* -> ^( EQUALS ^( name index ) value ) | ( BLANK !)* name EQUALS ^ value ( BLANK !)* | ( BLANK !)* LET ! name EQUALS ^ arithmetic ( BLANK !)* );";
		}
	}

	static final String DFA201_eotS =
		"\4\uffff";
	static final String DFA201_eofS =
		"\1\3\3\uffff";
	static final String DFA201_minS =
		"\2\14\2\uffff";
	static final String DFA201_maxS =
		"\1\163\1\166\2\uffff";
	static final String DFA201_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA201_specialS =
		"\4\uffff}>";
	static final String[] DFA201_transitionS = {
			"\1\1\35\uffff\1\3\41\uffff\2\2\45\uffff\1\3",
			"\1\1\77\uffff\2\2\45\uffff\1\3\2\uffff\1\3",
			"",
			""
	};

	static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
	static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
	static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
	static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
	static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
	static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
	static final short[][] DFA201_transition;

	static {
		int numStates = DFA201_transitionS.length;
		DFA201_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
		}
	}

	protected class DFA201 extends DFA {

		public DFA201(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 201;
			this.eot = DFA201_eot;
			this.eof = DFA201_eof;
			this.min = DFA201_min;
			this.max = DFA201_max;
			this.accept = DFA201_accept;
			this.special = DFA201_special;
			this.transition = DFA201_transition;
		}
		@Override
		public String getDescription() {
			return "299:34: ( ( BLANK !)* ( LOGICOR ^| LOGICAND ^) ( BLANK !)* keyword_cond )?";
		}
	}

	static final String DFA231_eotS =
		"\74\uffff";
	static final String DFA231_eofS =
		"\74\uffff";
	static final String DFA231_minS =
		"\1\5\10\0\63\uffff";
	static final String DFA231_maxS =
		"\1\u008a\10\0\63\uffff";
	static final String DFA231_acceptS =
		"\11\uffff\1\6\53\uffff\1\7\1\1\1\2\1\10\1\3\1\4\1\5";
	static final String DFA231_specialS =
		"\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\63\uffff}>";
	static final String[] DFA231_transitionS = {
			"\1\11\2\uffff\1\11\1\uffff\1\5\1\6\2\11\3\uffff\2\11\3\uffff\2\11\7\uffff"+
			"\3\11\1\7\3\11\1\uffff\5\11\1\uffff\2\11\6\uffff\1\11\3\uffff\1\11\3"+
			"\uffff\3\11\1\uffff\3\11\1\uffff\2\11\1\uffff\1\11\2\uffff\4\11\1\uffff"+
			"\1\1\1\11\7\uffff\2\11\2\uffff\2\11\2\uffff\3\11\1\4\2\uffff\2\11\3\uffff"+
			"\1\2\1\uffff\1\11\4\uffff\2\11\1\uffff\1\65\2\11\1\uffff\2\11\2\uffff"+
			"\2\11\1\10\2\11\1\3\2\11\1\uffff\1\11\2\uffff\1\11",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA231_eot = DFA.unpackEncodedString(DFA231_eotS);
	static final short[] DFA231_eof = DFA.unpackEncodedString(DFA231_eofS);
	static final char[] DFA231_min = DFA.unpackEncodedStringToUnsignedChars(DFA231_minS);
	static final char[] DFA231_max = DFA.unpackEncodedStringToUnsignedChars(DFA231_maxS);
	static final short[] DFA231_accept = DFA.unpackEncodedString(DFA231_acceptS);
	static final short[] DFA231_special = DFA.unpackEncodedString(DFA231_specialS);
	static final short[][] DFA231_transition;

	static {
		int numStates = DFA231_transitionS.length;
		DFA231_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA231_transition[i] = DFA.unpackEncodedString(DFA231_transitionS[i]);
		}
	}

	protected class DFA231 extends DFA {

		public DFA231(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 231;
			this.eot = DFA231_eot;
			this.eof = DFA231_eof;
			this.min = DFA231_min;
			this.max = DFA231_max;
			this.accept = DFA231_accept;
			this.special = DFA231_special;
			this.transition = DFA231_transition;
		}
		@Override
		public String getDescription() {
			return "401:1: dqstr_part : ( bracket_pattern_match | extended_pattern_match | var_ref | command_sub | arithmetic_expansion | dq_str_part | pattern_match_trigger | BANG );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA231_1 = input.LA(1);
						 
						int index231_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred425_bashast()) ) {s = 54;}
						else if ( (synpred431_bashast()) ) {s = 53;}
						 
						input.seek(index231_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA231_2 = input.LA(1);
						 
						int index231_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred426_bashast()) ) {s = 55;}
						else if ( (synpred431_bashast()) ) {s = 53;}
						 
						input.seek(index231_2);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA231_3 = input.LA(1);
						 
						int index231_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred426_bashast()) ) {s = 55;}
						else if ( (synpred431_bashast()) ) {s = 53;}
						 
						input.seek(index231_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA231_4 = input.LA(1);
						 
						int index231_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred426_bashast()) ) {s = 55;}
						else if ( (synpred431_bashast()) ) {s = 53;}
						 
						input.seek(index231_4);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA231_5 = input.LA(1);
						 
						int index231_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred426_bashast()) ) {s = 55;}
						else if ( (synpred431_bashast()) ) {s = 53;}
						 
						input.seek(index231_5);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA231_6 = input.LA(1);
						 
						int index231_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred426_bashast()) ) {s = 55;}
						else if ( (true) ) {s = 56;}
						 
						input.seek(index231_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA231_7 = input.LA(1);
						 
						int index231_7 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred427_bashast()) ) {s = 57;}
						else if ( (synpred428_bashast()) ) {s = 58;}
						else if ( (synpred429_bashast()) ) {s = 59;}
						 
						input.seek(index231_7);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA231_8 = input.LA(1);
						 
						int index231_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred428_bashast()) ) {s = 58;}
						else if ( (synpred430_bashast()) ) {s = 9;}
						 
						input.seek(index231_8);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 231, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA239_eotS =
		"\u00f3\uffff";
	static final String DFA239_eofS =
		"\u00f3\uffff";
	static final String DFA239_minS =
		"\1\120\2\10\1\uffff\1\10\2\uffff\1\10\1\uffff\1\26\26\10\1\26\26\10\1"+
		"\0\1\132\1\5\1\132\30\10\26\0\1\132\1\5\1\132\30\10\1\26\1\53\1\44\30"+
		"\0\1\26\1\53\1\44\6\166\6\10\1\0\26\10\2\0\26\10\26\0";
	static final String DFA239_maxS =
		"\1\120\2\u008a\1\uffff\1\u008a\2\uffff\1\u008a\1\uffff\1\53\26\u008a\1"+
		"\53\26\u008a\1\0\1\132\1\u0083\1\132\30\u008a\26\0\1\132\1\u0083\1\132"+
		"\30\u008a\1\26\1\53\1\44\30\0\1\26\1\53\1\44\6\166\6\u008a\1\0\26\u008a"+
		"\2\0\26\u008a\26\0";
	static final String DFA239_acceptS =
		"\3\uffff\1\3\1\uffff\1\4\1\1\1\uffff\1\2\u00ea\uffff";
	static final String DFA239_specialS =
		"\67\uffff\1\107\33\uffff\1\45\1\44\1\43\1\42\1\41\1\40\1\37\1\36\1\35"+
		"\1\34\1\33\1\32\1\31\1\30\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\36\uffff"+
		"\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
		"\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\17\uffff\1\106"+
		"\26\uffff\1\27\1\26\26\uffff\1\25\1\24\1\23\1\22\1\21\1\20\1\17\1\16\1"+
		"\15\1\14\1\13\1\12\1\11\1\10\1\7\1\6\1\5\1\4\1\3\1\2\1\1\1\0}>";
	static final String[] DFA239_transitionS = {
			"\1\1",
			"\1\5\2\uffff\1\3\1\uffff\1\5\3\uffff\1\4\1\5\3\uffff\1\5\10\uffff\3"+
			"\5\1\uffff\3\5\2\uffff\2\5\1\uffff\1\5\1\uffff\2\5\6\uffff\1\5\3\uffff"+
			"\1\5\3\uffff\1\5\3\uffff\3\5\4\uffff\1\5\7\uffff\1\5\10\uffff\2\5\2\uffff"+
			"\2\5\2\uffff\2\5\23\uffff\1\2\1\5\2\uffff\1\5\3\uffff\2\5\1\uffff\2\5"+
			"\1\uffff\2\5\1\uffff\1\5\2\uffff\1\5",
			"\1\10\2\uffff\1\6\1\uffff\1\10\3\uffff\1\7\1\10\3\uffff\1\10\10\uffff"+
			"\3\10\1\uffff\3\10\2\uffff\2\10\1\uffff\1\10\1\uffff\2\10\6\uffff\1\10"+
			"\3\uffff\1\10\3\uffff\1\10\3\uffff\3\10\4\uffff\1\10\7\uffff\1\10\10"+
			"\uffff\2\10\2\uffff\2\10\2\uffff\2\10\23\uffff\2\10\2\uffff\1\10\3\uffff"+
			"\2\10\1\uffff\2\10\1\uffff\2\10\1\uffff\1\10\2\uffff\1\10",
			"",
			"\1\33\4\uffff\1\24\3\uffff\1\35\1\36\3\uffff\1\23\10\uffff\1\32\1\12"+
			"\1\36\1\uffff\1\36\1\21\1\22\2\uffff\2\36\1\uffff\1\15\1\uffff\1\36\1"+
			"\34\6\uffff\1\36\3\uffff\1\36\3\uffff\1\36\3\uffff\2\36\1\31\4\uffff"+
			"\1\27\7\uffff\1\11\10\uffff\1\20\1\27\2\uffff\1\14\1\12\2\uffff\1\16"+
			"\1\17\4\uffff\2\5\15\uffff\1\5\1\36\2\uffff\1\37\3\uffff\1\26\1\36\1"+
			"\uffff\1\30\1\36\1\uffff\1\36\1\25\1\uffff\1\36\2\uffff\1\13",
			"",
			"",
			"\1\62\4\uffff\1\53\3\uffff\1\64\1\65\3\uffff\1\52\10\uffff\1\61\1\41"+
			"\1\65\1\uffff\1\65\1\50\1\51\2\uffff\2\65\1\uffff\1\44\1\uffff\1\65\1"+
			"\63\6\uffff\1\65\3\uffff\1\65\3\uffff\1\65\3\uffff\2\65\1\60\4\uffff"+
			"\1\56\7\uffff\1\40\10\uffff\1\47\1\56\2\uffff\1\43\1\41\2\uffff\1\45"+
			"\1\46\4\uffff\2\10\15\uffff\1\67\1\65\2\uffff\1\66\3\uffff\1\55\1\65"+
			"\1\uffff\1\57\1\65\1\uffff\1\65\1\54\1\uffff\1\65\2\uffff\1\42",
			"",
			"\1\70\15\uffff\1\72\6\uffff\1\71",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\123\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\124\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\125\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\126\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\127\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\130\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\131\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\132\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\133\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\134\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\135\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\136\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\137\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\140\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\141\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\142\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\143\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\144\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\145\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\146\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\147\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\150\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\151\15\uffff\1\153\6\uffff\1\152",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\uffff",
			"\1\u0084",
			"\1\u0085\4\uffff\2\u0085\12\uffff\2\u0085\10\uffff\1\u0085\1\uffff\1"+
			"\u0085\1\uffff\1\u0085\6\uffff\1\u0085\23\uffff\1\u0085\5\uffff\1\u0085"+
			"\2\uffff\1\u0085\5\uffff\1\u0085\1\uffff\2\u0085\7\uffff\1\u0085\2\uffff"+
			"\1\u0085\4\uffff\1\u0085\1\uffff\2\u0085\2\uffff\1\u0085\4\uffff\3\u0085"+
			"\4\uffff\1\u0085\2\uffff\1\u0085\1\uffff\1\u0085\1\uffff\2\u0085\4\uffff"+
			"\1\u0085\2\uffff\1\u0085",
			"\1\u0086",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0087\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0088\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0089\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u008a\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u008b\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u008c\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u008d\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u008e\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u008f\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0090\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0091\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0092\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0093\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0094\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0095\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0096\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0097\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0098\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u0099\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u009a\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u009b\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u009c\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u009d\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u009e\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\u009f",
			"\1\u00a0\4\uffff\2\u00a0\12\uffff\2\u00a0\10\uffff\1\u00a0\1\uffff\1"+
			"\u00a0\1\uffff\1\u00a0\6\uffff\1\u00a0\23\uffff\1\u00a0\5\uffff\1\u00a0"+
			"\2\uffff\1\u00a0\5\uffff\1\u00a0\1\uffff\2\u00a0\7\uffff\1\u00a0\2\uffff"+
			"\1\u00a0\4\uffff\1\u00a0\1\uffff\2\u00a0\2\uffff\1\u00a0\4\uffff\3\u00a0"+
			"\4\uffff\1\u00a0\2\uffff\1\u00a0\1\uffff\1\u00a0\1\uffff\2\u00a0\4\uffff"+
			"\1\u00a0\2\uffff\1\u00a0",
			"\1\u00a1",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\u00a2",
			"\1\u00a3",
			"\1\u00a4",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\u00a5",
			"\1\u00a6",
			"\1\u00a7",
			"\1\u00a8",
			"\1\u00a9",
			"\1\u00aa",
			"\1\u00ab",
			"\1\u00ac",
			"\1\u00ad",
			"\1\u00c0\4\uffff\1\u00b9\3\uffff\1\u00c2\1\u00c3\3\uffff\1\u00b8\10"+
			"\uffff\1\u00bf\1\u00af\1\u00c3\1\uffff\1\u00c3\1\u00b6\1\u00b7\2\uffff"+
			"\2\u00c3\1\uffff\1\u00b2\1\uffff\1\u00c3\1\u00c1\6\uffff\1\u00c3\3\uffff"+
			"\1\u00c3\3\uffff\1\u00c3\3\uffff\2\u00c3\1\u00be\4\uffff\1\u00bc\7\uffff"+
			"\1\11\10\uffff\1\u00b5\1\u00bc\2\uffff\1\u00b1\1\u00af\2\uffff\1\u00b3"+
			"\1\u00b4\23\uffff\1\u00ae\1\u00c3\2\uffff\1\u00c4\3\uffff\1\u00bb\1\u00c3"+
			"\1\uffff\1\u00bd\1\u00c3\1\uffff\1\u00c3\1\u00ba\1\uffff\1\u00c3\2\uffff"+
			"\1\u00b0",
			"\1\u00c0\4\uffff\1\u00b9\3\uffff\1\u00c2\1\u00c3\3\uffff\1\u00b8\10"+
			"\uffff\1\u00bf\1\u00af\1\u00c3\1\uffff\1\u00c3\1\u00b6\1\u00b7\2\uffff"+
			"\2\u00c3\1\uffff\1\u00b2\1\uffff\1\u00c3\1\u00c1\6\uffff\1\u00c3\3\uffff"+
			"\1\u00c3\3\uffff\1\u00c3\3\uffff\2\u00c3\1\u00be\4\uffff\1\u00bc\7\uffff"+
			"\1\11\10\uffff\1\u00b5\1\u00bc\2\uffff\1\u00b1\1\u00af\2\uffff\1\u00b3"+
			"\1\u00b4\23\uffff\1\u00c5\1\u00c3\2\uffff\1\u00c4\3\uffff\1\u00bb\1\u00c3"+
			"\1\uffff\1\u00bd\1\u00c3\1\uffff\1\u00c3\1\u00ba\1\uffff\1\u00c3\2\uffff"+
			"\1\u00b0",
			"\1\u00c0\4\uffff\1\u00b9\3\uffff\1\u00c2\1\u00c3\3\uffff\1\u00b8\10"+
			"\uffff\1\u00bf\1\u00af\1\u00c3\1\uffff\1\u00c3\1\u00b6\1\u00b7\2\uffff"+
			"\2\u00c3\1\uffff\1\u00b2\1\uffff\1\u00c3\1\u00c1\6\uffff\1\u00c3\3\uffff"+
			"\1\u00c3\3\uffff\1\u00c3\3\uffff\2\u00c3\1\u00be\4\uffff\1\u00bc\7\uffff"+
			"\1\11\10\uffff\1\u00b5\1\u00bc\2\uffff\1\u00b1\1\u00af\2\uffff\1\u00b3"+
			"\1\u00b4\23\uffff\1\u00c6\1\u00c3\2\uffff\1\u00c4\3\uffff\1\u00bb\1\u00c3"+
			"\1\uffff\1\u00bd\1\u00c3\1\uffff\1\u00c3\1\u00ba\1\uffff\1\u00c3\2\uffff"+
			"\1\u00b0",
			"\1\u00d8\4\uffff\1\u00d1\3\uffff\1\u00da\1\u00db\3\uffff\1\u00d0\10"+
			"\uffff\1\u00d7\1\u00c7\1\u00db\1\uffff\1\u00db\1\u00ce\1\u00cf\2\uffff"+
			"\2\u00db\1\uffff\1\u00ca\1\uffff\1\u00db\1\u00d9\6\uffff\1\u00db\3\uffff"+
			"\1\u00db\3\uffff\1\u00db\3\uffff\2\u00db\1\u00d6\4\uffff\1\u00d4\7\uffff"+
			"\1\40\10\uffff\1\u00cd\1\u00d4\2\uffff\1\u00c9\1\u00c7\2\uffff\1\u00cb"+
			"\1\u00cc\23\uffff\1\67\1\u00db\2\uffff\1\u00dc\3\uffff\1\u00d3\1\u00db"+
			"\1\uffff\1\u00d5\1\u00db\1\uffff\1\u00db\1\u00d2\1\uffff\1\u00db\2\uffff"+
			"\1\u00c8",
			"\1\u00d8\4\uffff\1\u00d1\3\uffff\1\u00da\1\u00db\3\uffff\1\u00d0\10"+
			"\uffff\1\u00d7\1\u00c7\1\u00db\1\uffff\1\u00db\1\u00ce\1\u00cf\2\uffff"+
			"\2\u00db\1\uffff\1\u00ca\1\uffff\1\u00db\1\u00d9\6\uffff\1\u00db\3\uffff"+
			"\1\u00db\3\uffff\1\u00db\3\uffff\2\u00db\1\u00d6\4\uffff\1\u00d4\7\uffff"+
			"\1\40\10\uffff\1\u00cd\1\u00d4\2\uffff\1\u00c9\1\u00c7\2\uffff\1\u00cb"+
			"\1\u00cc\23\uffff\1\67\1\u00db\2\uffff\1\u00dc\3\uffff\1\u00d3\1\u00db"+
			"\1\uffff\1\u00d5\1\u00db\1\uffff\1\u00db\1\u00d2\1\uffff\1\u00db\2\uffff"+
			"\1\u00c8",
			"\1\u00d8\4\uffff\1\u00d1\3\uffff\1\u00da\1\u00db\3\uffff\1\u00d0\10"+
			"\uffff\1\u00d7\1\u00c7\1\u00db\1\uffff\1\u00db\1\u00ce\1\u00cf\2\uffff"+
			"\2\u00db\1\uffff\1\u00ca\1\uffff\1\u00db\1\u00d9\6\uffff\1\u00db\3\uffff"+
			"\1\u00db\3\uffff\1\u00db\3\uffff\2\u00db\1\u00d6\4\uffff\1\u00d4\7\uffff"+
			"\1\40\10\uffff\1\u00cd\1\u00d4\2\uffff\1\u00c9\1\u00c7\2\uffff\1\u00cb"+
			"\1\u00cc\23\uffff\1\67\1\u00db\2\uffff\1\u00dc\3\uffff\1\u00d3\1\u00db"+
			"\1\uffff\1\u00d5\1\u00db\1\uffff\1\u00db\1\u00d2\1\uffff\1\u00db\2\uffff"+
			"\1\u00c8",
			"\1\uffff",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00dd\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00de\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00df\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00e0\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00e1\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00e2\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00e3\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00e4\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00e5\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00e6\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00e7\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00e8\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00e9\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00ea\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00eb\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00ec\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00ed\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00ee\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00ef\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00f0\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00f1\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\114\4\uffff\1\105\3\uffff\1\116\1\117\3\uffff\1\104\10\uffff\1\113"+
			"\1\73\1\117\1\uffff\1\117\1\102\1\103\2\uffff\2\117\1\uffff\1\76\1\uffff"+
			"\1\117\1\115\6\uffff\1\117\3\uffff\1\117\3\uffff\1\117\3\uffff\2\117"+
			"\1\112\4\uffff\1\110\7\uffff\1\11\10\uffff\1\101\1\110\2\uffff\1\75\1"+
			"\73\2\uffff\1\77\1\100\4\uffff\1\121\1\122\15\uffff\1\u00f2\1\117\2\uffff"+
			"\1\120\3\uffff\1\107\1\117\1\uffff\1\111\1\117\1\uffff\1\117\1\106\1"+
			"\uffff\1\117\2\uffff\1\74",
			"\1\uffff",
			"\1\uffff",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\175\4\uffff\1\166\3\uffff\1\177\1\u0080\3\uffff\1\165\10\uffff\1"+
			"\174\1\154\1\u0080\1\uffff\1\u0080\1\163\1\164\2\uffff\2\u0080\1\uffff"+
			"\1\157\1\uffff\1\u0080\1\176\6\uffff\1\u0080\3\uffff\1\u0080\3\uffff"+
			"\1\u0080\3\uffff\2\u0080\1\173\4\uffff\1\171\7\uffff\1\40\10\uffff\1"+
			"\162\1\171\2\uffff\1\156\1\154\2\uffff\1\160\1\161\4\uffff\1\u0082\1"+
			"\u0083\15\uffff\1\67\1\u0080\2\uffff\1\u0081\3\uffff\1\170\1\u0080\1"+
			"\uffff\1\172\1\u0080\1\uffff\1\u0080\1\167\1\uffff\1\u0080\2\uffff\1"+
			"\155",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff"
	};

	static final short[] DFA239_eot = DFA.unpackEncodedString(DFA239_eotS);
	static final short[] DFA239_eof = DFA.unpackEncodedString(DFA239_eofS);
	static final char[] DFA239_min = DFA.unpackEncodedStringToUnsignedChars(DFA239_minS);
	static final char[] DFA239_max = DFA.unpackEncodedStringToUnsignedChars(DFA239_maxS);
	static final short[] DFA239_accept = DFA.unpackEncodedString(DFA239_acceptS);
	static final short[] DFA239_special = DFA.unpackEncodedString(DFA239_specialS);
	static final short[][] DFA239_transition;

	static {
		int numStates = DFA239_transitionS.length;
		DFA239_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA239_transition[i] = DFA.unpackEncodedString(DFA239_transitionS[i]);
		}
	}

	protected class DFA239 extends DFA {

		public DFA239(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 239;
			this.eot = DFA239_eot;
			this.eof = DFA239_eof;
			this.min = DFA239_min;
			this.max = DFA239_max;
			this.accept = DFA239_accept;
			this.special = DFA239_special;
			this.transition = DFA239_transition;
		}
		@Override
		public String getDescription() {
			return "421:1: bracket_pattern_match : ( LSQUARE RSQUARE ( BANG | CARET ) ( pattern_match )* RSQUARE -> ^( MATCH_ANY_EXCEPT RSQUARE ( pattern_match )* ) | LSQUARE RSQUARE ( pattern_match )* RSQUARE -> ^( MATCH_PATTERN RSQUARE ( pattern_match )* ) | LSQUARE ( BANG | CARET ) ( pattern_match )+ RSQUARE -> ^( MATCH_ANY_EXCEPT ( pattern_match )+ ) | LSQUARE ( pattern_match )+ RSQUARE -> ^( MATCH_PATTERN ( pattern_match )+ ) );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA239_242 = input.LA(1);
						 
						int index239_242 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_242);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA239_241 = input.LA(1);
						 
						int index239_241 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_241);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA239_240 = input.LA(1);
						 
						int index239_240 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_240);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA239_239 = input.LA(1);
						 
						int index239_239 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_239);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA239_238 = input.LA(1);
						 
						int index239_238 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_238);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA239_237 = input.LA(1);
						 
						int index239_237 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_237);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA239_236 = input.LA(1);
						 
						int index239_236 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_236);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA239_235 = input.LA(1);
						 
						int index239_235 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_235);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA239_234 = input.LA(1);
						 
						int index239_234 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_234);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA239_233 = input.LA(1);
						 
						int index239_233 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_233);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA239_232 = input.LA(1);
						 
						int index239_232 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_232);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA239_231 = input.LA(1);
						 
						int index239_231 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_231);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA239_230 = input.LA(1);
						 
						int index239_230 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_230);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA239_229 = input.LA(1);
						 
						int index239_229 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_229);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA239_228 = input.LA(1);
						 
						int index239_228 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_228);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA239_227 = input.LA(1);
						 
						int index239_227 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_227);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA239_226 = input.LA(1);
						 
						int index239_226 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_226);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA239_225 = input.LA(1);
						 
						int index239_225 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_225);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA239_224 = input.LA(1);
						 
						int index239_224 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_224);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA239_223 = input.LA(1);
						 
						int index239_223 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_223);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA239_222 = input.LA(1);
						 
						int index239_222 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_222);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA239_221 = input.LA(1);
						 
						int index239_221 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_221);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA239_198 = input.LA(1);
						 
						int index239_198 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_198);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA239_197 = input.LA(1);
						 
						int index239_197 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_197);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA239_96 = input.LA(1);
						 
						int index239_96 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_96);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA239_95 = input.LA(1);
						 
						int index239_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_95);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA239_94 = input.LA(1);
						 
						int index239_94 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_94);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA239_93 = input.LA(1);
						 
						int index239_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_93);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA239_92 = input.LA(1);
						 
						int index239_92 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_92);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA239_91 = input.LA(1);
						 
						int index239_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_91);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA239_90 = input.LA(1);
						 
						int index239_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_90);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA239_89 = input.LA(1);
						 
						int index239_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_89);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA239_88 = input.LA(1);
						 
						int index239_88 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_88);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA239_87 = input.LA(1);
						 
						int index239_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_87);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA239_86 = input.LA(1);
						 
						int index239_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_86);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA239_85 = input.LA(1);
						 
						int index239_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_85);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA239_84 = input.LA(1);
						 
						int index239_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_84);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA239_83 = input.LA(1);
						 
						int index239_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_83);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA239_97 = input.LA(1);
						 
						int index239_97 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_97);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA239_98 = input.LA(1);
						 
						int index239_98 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_98);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA239_99 = input.LA(1);
						 
						int index239_99 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_99);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA239_100 = input.LA(1);
						 
						int index239_100 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_100);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA239_101 = input.LA(1);
						 
						int index239_101 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_101);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA239_102 = input.LA(1);
						 
						int index239_102 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_102);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA239_103 = input.LA(1);
						 
						int index239_103 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_103);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA239_104 = input.LA(1);
						 
						int index239_104 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_104);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA239_135 = input.LA(1);
						 
						int index239_135 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_135);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA239_136 = input.LA(1);
						 
						int index239_136 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_136);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA239_137 = input.LA(1);
						 
						int index239_137 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_137);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA239_138 = input.LA(1);
						 
						int index239_138 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_138);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA239_139 = input.LA(1);
						 
						int index239_139 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_139);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA239_140 = input.LA(1);
						 
						int index239_140 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_140);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA239_141 = input.LA(1);
						 
						int index239_141 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_141);
						if ( s>=0 ) return s;
						break;

					case 53 : 
						int LA239_142 = input.LA(1);
						 
						int index239_142 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_142);
						if ( s>=0 ) return s;
						break;

					case 54 : 
						int LA239_143 = input.LA(1);
						 
						int index239_143 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_143);
						if ( s>=0 ) return s;
						break;

					case 55 : 
						int LA239_144 = input.LA(1);
						 
						int index239_144 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_144);
						if ( s>=0 ) return s;
						break;

					case 56 : 
						int LA239_145 = input.LA(1);
						 
						int index239_145 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_145);
						if ( s>=0 ) return s;
						break;

					case 57 : 
						int LA239_146 = input.LA(1);
						 
						int index239_146 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_146);
						if ( s>=0 ) return s;
						break;

					case 58 : 
						int LA239_147 = input.LA(1);
						 
						int index239_147 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_147);
						if ( s>=0 ) return s;
						break;

					case 59 : 
						int LA239_148 = input.LA(1);
						 
						int index239_148 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_148);
						if ( s>=0 ) return s;
						break;

					case 60 : 
						int LA239_149 = input.LA(1);
						 
						int index239_149 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_149);
						if ( s>=0 ) return s;
						break;

					case 61 : 
						int LA239_150 = input.LA(1);
						 
						int index239_150 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_150);
						if ( s>=0 ) return s;
						break;

					case 62 : 
						int LA239_151 = input.LA(1);
						 
						int index239_151 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_151);
						if ( s>=0 ) return s;
						break;

					case 63 : 
						int LA239_152 = input.LA(1);
						 
						int index239_152 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_152);
						if ( s>=0 ) return s;
						break;

					case 64 : 
						int LA239_153 = input.LA(1);
						 
						int index239_153 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_153);
						if ( s>=0 ) return s;
						break;

					case 65 : 
						int LA239_154 = input.LA(1);
						 
						int index239_154 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_154);
						if ( s>=0 ) return s;
						break;

					case 66 : 
						int LA239_155 = input.LA(1);
						 
						int index239_155 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_155);
						if ( s>=0 ) return s;
						break;

					case 67 : 
						int LA239_156 = input.LA(1);
						 
						int index239_156 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_156);
						if ( s>=0 ) return s;
						break;

					case 68 : 
						int LA239_157 = input.LA(1);
						 
						int index239_157 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_157);
						if ( s>=0 ) return s;
						break;

					case 69 : 
						int LA239_158 = input.LA(1);
						 
						int index239_158 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_158);
						if ( s>=0 ) return s;
						break;

					case 70 : 
						int LA239_174 = input.LA(1);
						 
						int index239_174 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred445_bashast()) ) {s = 3;}
						else if ( (true) ) {s = 5;}
						 
						input.seek(index239_174);
						if ( s>=0 ) return s;
						break;

					case 71 : 
						int LA239_55 = input.LA(1);
						 
						int index239_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred440_bashast()) ) {s = 6;}
						else if ( (synpred442_bashast()) ) {s = 8;}
						 
						input.seek(index239_55);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 239, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA254_eotS =
		"\4\uffff";
	static final String DFA254_eofS =
		"\1\2\3\uffff";
	static final String DFA254_minS =
		"\2\14\2\uffff";
	static final String DFA254_maxS =
		"\2\164\2\uffff";
	static final String DFA254_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA254_specialS =
		"\4\uffff}>";
	static final String[] DFA254_transitionS = {
			"\1\1\12\uffff\1\3\133\uffff\2\2",
			"\1\1\12\uffff\1\3\134\uffff\1\2",
			"",
			""
	};

	static final short[] DFA254_eot = DFA.unpackEncodedString(DFA254_eotS);
	static final short[] DFA254_eof = DFA.unpackEncodedString(DFA254_eofS);
	static final char[] DFA254_min = DFA.unpackEncodedStringToUnsignedChars(DFA254_minS);
	static final char[] DFA254_max = DFA.unpackEncodedStringToUnsignedChars(DFA254_maxS);
	static final short[] DFA254_accept = DFA.unpackEncodedString(DFA254_acceptS);
	static final short[] DFA254_special = DFA.unpackEncodedString(DFA254_specialS);
	static final short[][] DFA254_transition;

	static {
		int numStates = DFA254_transitionS.length;
		DFA254_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA254_transition[i] = DFA.unpackEncodedString(DFA254_transitionS[i]);
		}
	}

	protected class DFA254 extends DFA {

		public DFA254(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 254;
			this.eot = DFA254_eot;
			this.eof = DFA254_eof;
			this.min = DFA254_min;
			this.max = DFA254_max;
			this.accept = DFA254_accept;
			this.special = DFA254_special;
			this.transition = DFA254_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 453:15: ( ( BLANK !)* COMMA ! ( BLANK !)* arithmetic )*";
		}
	}

	static final String DFA269_eotS =
		"\4\uffff";
	static final String DFA269_eofS =
		"\2\2\2\uffff";
	static final String DFA269_minS =
		"\2\5\2\uffff";
	static final String DFA269_maxS =
		"\2\u008a\2\uffff";
	static final String DFA269_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA269_specialS =
		"\4\uffff}>";
	static final String[] DFA269_transitionS = {
			"\1\2\2\uffff\1\2\1\uffff\2\2\1\1\1\2\3\uffff\2\2\3\uffff\2\2\7\uffff"+
			"\7\2\1\uffff\5\2\1\uffff\3\2\1\uffff\1\2\1\uffff\1\3\1\uffff\1\2\3\uffff"+
			"\1\2\3\uffff\7\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2\7\uffff\2\2\2\uffff"+
			"\2\2\2\uffff\4\2\7\uffff\2\2\5\uffff\6\2\1\uffff\2\2\2\uffff\10\2\1\uffff"+
			"\1\2\2\uffff\1\2",
			"\1\2\2\uffff\1\2\1\uffff\2\2\1\1\1\2\3\uffff\2\2\3\uffff\2\2\7\uffff"+
			"\7\2\1\uffff\5\2\1\uffff\3\2\1\uffff\1\2\1\uffff\1\3\1\uffff\1\2\3\uffff"+
			"\1\2\3\uffff\7\2\2\uffff\3\2\3\uffff\2\2\1\uffff\3\2\7\uffff\2\2\2\uffff"+
			"\2\2\2\uffff\4\2\7\uffff\2\2\5\uffff\6\2\1\uffff\2\2\2\uffff\10\2\1\uffff"+
			"\1\2\2\uffff\1\2",
			"",
			""
	};

	static final short[] DFA269_eot = DFA.unpackEncodedString(DFA269_eotS);
	static final short[] DFA269_eof = DFA.unpackEncodedString(DFA269_eofS);
	static final char[] DFA269_min = DFA.unpackEncodedStringToUnsignedChars(DFA269_minS);
	static final char[] DFA269_max = DFA.unpackEncodedStringToUnsignedChars(DFA269_maxS);
	static final short[] DFA269_accept = DFA.unpackEncodedString(DFA269_acceptS);
	static final short[] DFA269_special = DFA.unpackEncodedString(DFA269_specialS);
	static final short[][] DFA269_transition;

	static {
		int numStates = DFA269_transitionS.length;
		DFA269_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA269_transition[i] = DFA.unpackEncodedString(DFA269_transitionS[i]);
		}
	}

	protected class DFA269 extends DFA {

		public DFA269(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 269;
			this.eot = DFA269_eot;
			this.eof = DFA269_eof;
			this.min = DFA269_min;
			this.max = DFA269_max;
			this.accept = DFA269_accept;
			this.special = DFA269_special;
			this.transition = DFA269_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 477:13: ( ( BLANK !)* EXP ^ ( BLANK !)* negation )*";
		}
	}

	static final String DFA314_eotS =
		"\5\uffff";
	static final String DFA314_eofS =
		"\5\uffff";
	static final String DFA314_minS =
		"\2\10\1\uffff\1\10\1\uffff";
	static final String DFA314_maxS =
		"\2\u008a\1\uffff\1\u008a\1\uffff";
	static final String DFA314_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA314_specialS =
		"\5\uffff}>";
	static final String[] DFA314_transitionS = {
			"\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\3\uffff\1\2\10\uffff\7\2\2\uffff"+
			"\2\2\1\uffff\1\2\1\uffff\2\2\6\uffff\1\2\3\uffff\1\2\3\uffff\1\1\3\uffff"+
			"\3\2\4\uffff\1\2\7\uffff\1\2\10\uffff\2\2\2\uffff\2\2\2\uffff\2\2\1\uffff"+
			"\1\2\7\uffff\2\2\10\uffff\2\2\2\uffff\2\2\2\uffff\10\2\1\uffff\1\2\2"+
			"\uffff\1\2",
			"\1\2\1\uffff\2\2\1\3\1\2\3\uffff\2\2\3\uffff\1\2\10\uffff\7\2\2\uffff"+
			"\2\2\1\uffff\1\2\1\uffff\2\2\6\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff"+
			"\3\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\10\uffff\2\2\2\uffff\2\2\2\uffff"+
			"\2\2\1\uffff\1\2\2\uffff\2\2\3\uffff\2\2\10\uffff\2\2\2\uffff\2\2\2\uffff"+
			"\10\2\1\uffff\1\2\2\uffff\1\2",
			"",
			"\1\4\1\uffff\2\4\1\3\1\4\3\uffff\2\4\3\uffff\1\4\10\uffff\7\4\2\uffff"+
			"\2\4\1\uffff\1\4\1\uffff\2\4\6\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff"+
			"\3\4\4\uffff\1\4\5\uffff\1\2\1\uffff\1\4\10\uffff\2\4\2\uffff\2\4\2\uffff"+
			"\2\4\1\uffff\1\4\7\uffff\2\4\10\uffff\2\4\2\uffff\2\4\2\uffff\10\4\1"+
			"\uffff\1\4\2\uffff\1\4",
			""
	};

	static final short[] DFA314_eot = DFA.unpackEncodedString(DFA314_eotS);
	static final short[] DFA314_eof = DFA.unpackEncodedString(DFA314_eofS);
	static final char[] DFA314_min = DFA.unpackEncodedStringToUnsignedChars(DFA314_minS);
	static final char[] DFA314_max = DFA.unpackEncodedStringToUnsignedChars(DFA314_maxS);
	static final short[] DFA314_accept = DFA.unpackEncodedString(DFA314_acceptS);
	static final short[] DFA314_special = DFA.unpackEncodedString(DFA314_specialS);
	static final short[][] DFA314_transition;

	static {
		int numStates = DFA314_transitionS.length;
		DFA314_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA314_transition[i] = DFA.unpackEncodedString(DFA314_transitionS[i]);
		}
	}

	protected class DFA314 extends DFA {

		public DFA314(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 314;
			this.eot = DFA314_eot;
			this.eof = DFA314_eof;
			this.min = DFA314_min;
			this.max = DFA314_max;
			this.accept = DFA314_accept;
			this.special = DFA314_special;
			this.transition = DFA314_transition;
		}
		@Override
		public String getDescription() {
			return "498:1: function : ( FUNCTION ( BLANK )+ fname ( ( BLANK )* parens )? wspace compound_command ( redirect )* -> ^( FUNCTION fname compound_command ( redirect )* ) | fname ( BLANK )* parens wspace compound_command ( redirect )* -> ^( FUNCTION[\"function\"] fname compound_command ( redirect )* ) );";
		}
	}

	static final String DFA310_eotS =
		"\6\uffff";
	static final String DFA310_eofS =
		"\6\uffff";
	static final String DFA310_minS =
		"\2\14\2\uffff\2\10";
	static final String DFA310_maxS =
		"\1\116\1\u0087\2\uffff\2\u008a";
	static final String DFA310_acceptS =
		"\2\uffff\1\1\1\2\2\uffff";
	static final String DFA310_specialS =
		"\6\uffff}>";
	static final String[] DFA310_transitionS = {
			"\1\1\35\uffff\1\3\43\uffff\1\2",
			"\1\1\5\uffff\1\3\46\uffff\1\3\7\uffff\1\3\3\uffff\1\3\5\uffff\1\3\2"+
			"\uffff\1\4\1\uffff\1\3\46\uffff\1\3\6\uffff\1\3\5\uffff\1\3\2\uffff\1"+
			"\3",
			"",
			"",
			"\1\3\1\uffff\2\3\1\5\1\3\3\uffff\2\3\3\uffff\1\3\10\uffff\7\3\2\uffff"+
			"\4\3\1\uffff\2\3\5\uffff\2\3\3\uffff\1\3\3\uffff\1\3\3\uffff\3\3\1\uffff"+
			"\1\3\1\uffff\2\3\2\uffff\1\3\2\uffff\1\3\1\uffff\1\3\10\uffff\2\3\2\uffff"+
			"\2\3\2\uffff\2\3\1\uffff\1\3\7\uffff\2\3\5\uffff\1\2\2\uffff\2\3\2\uffff"+
			"\2\3\2\uffff\10\3\1\uffff\1\3\2\uffff\1\3",
			"\1\3\1\uffff\2\3\1\5\1\3\3\uffff\2\3\3\uffff\1\3\10\uffff\7\3\2\uffff"+
			"\2\3\1\uffff\1\3\1\uffff\2\3\5\uffff\2\3\3\uffff\1\3\3\uffff\1\3\3\uffff"+
			"\3\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\2\uffff\1\3\1\uffff\1\3\10\uffff"+
			"\2\3\2\uffff\2\3\2\uffff\2\3\1\uffff\1\3\7\uffff\2\3\5\uffff\1\2\2\uffff"+
			"\2\3\2\uffff\2\3\2\uffff\10\3\1\uffff\1\3\2\uffff\1\3"
	};

	static final short[] DFA310_eot = DFA.unpackEncodedString(DFA310_eotS);
	static final short[] DFA310_eof = DFA.unpackEncodedString(DFA310_eofS);
	static final char[] DFA310_min = DFA.unpackEncodedStringToUnsignedChars(DFA310_minS);
	static final char[] DFA310_max = DFA.unpackEncodedStringToUnsignedChars(DFA310_maxS);
	static final short[] DFA310_accept = DFA.unpackEncodedString(DFA310_acceptS);
	static final short[] DFA310_special = DFA.unpackEncodedString(DFA310_specialS);
	static final short[][] DFA310_transition;

	static {
		int numStates = DFA310_transitionS.length;
		DFA310_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA310_transition[i] = DFA.unpackEncodedString(DFA310_transitionS[i]);
		}
	}

	protected class DFA310 extends DFA {

		public DFA310(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 310;
			this.eot = DFA310_eot;
			this.eof = DFA310_eof;
			this.min = DFA310_min;
			this.max = DFA310_max;
			this.accept = DFA310_accept;
			this.special = DFA310_special;
			this.transition = DFA310_transition;
		}
		@Override
		public String getDescription() {
			return "498:33: ( ( BLANK )* parens )?";
		}
	}

	static final String DFA311_eotS =
		"\7\uffff";
	static final String DFA311_eofS =
		"\2\2\1\uffff\1\2\1\uffff\2\2";
	static final String DFA311_minS =
		"\2\5\1\uffff\1\10\1\uffff\1\5\1\77";
	static final String DFA311_maxS =
		"\2\170\1\uffff\1\u008a\1\uffff\1\170\1\165";
	static final String DFA311_acceptS =
		"\2\uffff\1\2\1\uffff\1\1\2\uffff";
	static final String DFA311_specialS =
		"\7\uffff}>";
	static final String[] DFA311_transitionS = {
			"\1\3\6\uffff\1\1\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\41\uffff\1\2\1\uffff\1\4\2\uffff\1"+
			"\2",
			"\1\3\6\uffff\1\5\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\41\uffff\1\2\1\uffff\1\4\2\uffff\1"+
			"\2",
			"",
			"\1\2\1\uffff\4\2\3\uffff\2\2\3\uffff\1\2\10\uffff\7\2\2\uffff\2\2\1"+
			"\uffff\1\2\1\uffff\2\2\5\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\uffff\1"+
			"\4\1\uffff\3\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\1\2\1\4\7\uffff\2\2\2\uffff\2\2\2\uffff\2\2\1\uffff\1\2\7\uffff\2\2"+
			"\7\uffff\1\4\2\2\2\uffff\2\2\2\uffff\10\2\1\uffff\1\2\2\uffff\1\2",
			"",
			"\1\6\6\uffff\1\5\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\41\uffff\1\2\1\uffff\1\4\2\uffff\1"+
			"\2",
			"\1\4\21\uffff\1\4\43\uffff\1\4"
	};

	static final short[] DFA311_eot = DFA.unpackEncodedString(DFA311_eotS);
	static final short[] DFA311_eof = DFA.unpackEncodedString(DFA311_eofS);
	static final char[] DFA311_min = DFA.unpackEncodedStringToUnsignedChars(DFA311_minS);
	static final char[] DFA311_max = DFA.unpackEncodedStringToUnsignedChars(DFA311_maxS);
	static final short[] DFA311_accept = DFA.unpackEncodedString(DFA311_acceptS);
	static final short[] DFA311_special = DFA.unpackEncodedString(DFA311_specialS);
	static final short[][] DFA311_transition;

	static {
		int numStates = DFA311_transitionS.length;
		DFA311_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA311_transition[i] = DFA.unpackEncodedString(DFA311_transitionS[i]);
		}
	}

	protected class DFA311 extends DFA {

		public DFA311(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 311;
			this.eot = DFA311_eot;
			this.eof = DFA311_eof;
			this.min = DFA311_min;
			this.max = DFA311_max;
			this.accept = DFA311_accept;
			this.special = DFA311_special;
			this.transition = DFA311_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 498:74: ( redirect )*";
		}
	}

	static final String DFA313_eotS =
		"\7\uffff";
	static final String DFA313_eofS =
		"\2\2\1\uffff\1\2\1\uffff\2\2";
	static final String DFA313_minS =
		"\2\5\1\uffff\1\10\1\uffff\1\5\1\77";
	static final String DFA313_maxS =
		"\2\170\1\uffff\1\u008a\1\uffff\1\170\1\165";
	static final String DFA313_acceptS =
		"\2\uffff\1\2\1\uffff\1\1\2\uffff";
	static final String DFA313_specialS =
		"\7\uffff}>";
	static final String[] DFA313_transitionS = {
			"\1\3\6\uffff\1\1\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\41\uffff\1\2\1\uffff\1\4\2\uffff\1"+
			"\2",
			"\1\3\6\uffff\1\5\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\41\uffff\1\2\1\uffff\1\4\2\uffff\1"+
			"\2",
			"",
			"\1\2\1\uffff\4\2\3\uffff\2\2\3\uffff\1\2\10\uffff\7\2\2\uffff\2\2\1"+
			"\uffff\1\2\1\uffff\2\2\5\uffff\2\2\3\uffff\1\2\3\uffff\1\2\1\uffff\1"+
			"\4\1\uffff\3\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\1\2\1\4\7\uffff\2\2\2\uffff\2\2\2\uffff\2\2\1\uffff\1\2\7\uffff\2\2"+
			"\7\uffff\1\4\2\2\2\uffff\2\2\2\uffff\10\2\1\uffff\1\2\2\uffff\1\2",
			"",
			"\1\6\6\uffff\1\5\23\uffff\1\4\6\uffff\1\2\2\uffff\1\2\24\uffff\2\4\13"+
			"\uffff\2\2\1\uffff\1\4\1\uffff\1\4\41\uffff\1\2\1\uffff\1\4\2\uffff\1"+
			"\2",
			"\1\4\21\uffff\1\4\43\uffff\1\4"
	};

	static final short[] DFA313_eot = DFA.unpackEncodedString(DFA313_eotS);
	static final short[] DFA313_eof = DFA.unpackEncodedString(DFA313_eofS);
	static final char[] DFA313_min = DFA.unpackEncodedStringToUnsignedChars(DFA313_minS);
	static final char[] DFA313_max = DFA.unpackEncodedStringToUnsignedChars(DFA313_maxS);
	static final short[] DFA313_accept = DFA.unpackEncodedString(DFA313_acceptS);
	static final short[] DFA313_special = DFA.unpackEncodedString(DFA313_specialS);
	static final short[][] DFA313_transition;

	static {
		int numStates = DFA313_transitionS.length;
		DFA313_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA313_transition[i] = DFA.unpackEncodedString(DFA313_transitionS[i]);
		}
	}

	protected class DFA313 extends DFA {

		public DFA313(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 313;
			this.eot = DFA313_eot;
			this.eof = DFA313_eof;
			this.min = DFA313_min;
			this.max = DFA313_max;
			this.accept = DFA313_accept;
			this.special = DFA313_special;
			this.transition = DFA313_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 499:48: ( redirect )*";
		}
	}

	static final String DFA375_eotS =
		"\4\uffff";
	static final String DFA375_eofS =
		"\4\uffff";
	static final String DFA375_minS =
		"\2\14\2\uffff";
	static final String DFA375_maxS =
		"\2\163\2\uffff";
	static final String DFA375_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA375_specialS =
		"\4\uffff}>";
	static final String[] DFA375_transitionS = {
			"\1\1\126\uffff\1\3\17\uffff\1\2",
			"\1\1\126\uffff\1\3\17\uffff\1\2",
			"",
			""
	};

	static final short[] DFA375_eot = DFA.unpackEncodedString(DFA375_eotS);
	static final short[] DFA375_eof = DFA.unpackEncodedString(DFA375_eofS);
	static final char[] DFA375_min = DFA.unpackEncodedStringToUnsignedChars(DFA375_minS);
	static final char[] DFA375_max = DFA.unpackEncodedStringToUnsignedChars(DFA375_maxS);
	static final short[] DFA375_accept = DFA.unpackEncodedString(DFA375_acceptS);
	static final short[] DFA375_special = DFA.unpackEncodedString(DFA375_specialS);
	static final short[][] DFA375_transition;

	static {
		int numStates = DFA375_transitionS.length;
		DFA375_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA375_transition[i] = DFA.unpackEncodedString(DFA375_transitionS[i]);
		}
	}

	protected class DFA375 extends DFA {

		public DFA375(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 375;
			this.eot = DFA375_eot;
			this.eof = DFA375_eof;
			this.min = DFA375_min;
			this.max = DFA375_max;
			this.accept = DFA375_accept;
			this.special = DFA375_special;
			this.transition = DFA375_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 197:37: ( ( BLANK )* PIPE ( BLANK )? pattern )*";
		}
	}

	public static final BitSet FOLLOW_flcomment_in_start254 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_EOL_in_start257 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_EOL_in_start262 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_list_in_start266 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_flcomment277 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_POUND_in_flcomment280 = new BitSet(new long[]{0xA2206BBF80C63D02L,0xCDD8701E6603492EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_commentpart_in_flcomment282 = new BitSet(new long[]{0xA2206BBF80C63D02L,0xCDD8701E6603492EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_nqstr_in_commentpart291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_commentpart293 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_commentpart295 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RBRACE_in_commentpart297 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMIC_in_commentpart299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOUBLE_SEMIC_in_commentpart301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TICK_in_commentpart303 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_commentpart305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RPAREN_in_commentpart307 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LLPAREN_in_commentpart309 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RRPAREN_in_commentpart311 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PIPE_in_commentpart313 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_commentpart315 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQUOTE_in_commentpart317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QUOTE_in_commentpart319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_commentpart321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_commentpart323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_list_level_2_in_list330 = new BitSet(new long[]{0x0000040000001022L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_list332 = new BitSet(new long[]{0x0000040000001022L,0x0100000000000000L});
	public static final BitSet FOLLOW_SEMIC_in_list336 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AMP_in_list338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EOL_in_list340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_list_level_2_in_clist365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_list_level_1382 = new BitSet(new long[]{0x0000000000001002L,0x0000000000003000L});
	public static final BitSet FOLLOW_pipeline_in_list_level_1384 = new BitSet(new long[]{0x0000000000001002L,0x0000000000003000L});
	public static final BitSet FOLLOW_BLANK_in_list_level_1388 = new BitSet(new long[]{0x0000000000001000L,0x0000000000003000L});
	public static final BitSet FOLLOW_LOGICAND_in_list_level_1392 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_LOGICOR_in_list_level_1395 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_list_level_1398 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_function_in_list_level_1403 = new BitSet(new long[]{0x0000000000001002L,0x0000000000003000L});
	public static final BitSet FOLLOW_pipeline_in_list_level_1405 = new BitSet(new long[]{0x0000000000001002L,0x0000000000003000L});
	public static final BitSet FOLLOW_list_level_1_in_list_level_2416 = new BitSet(new long[]{0x0000040000001022L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_list_level_2420 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_SEMIC_in_list_level_2423 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_list_level_2426 = new BitSet(new long[]{0x0000000000000020L});
	public static final BitSet FOLLOW_AMP_in_list_level_2429 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_list_level_2433 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_EOL_in_list_level_2437 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_list_level_2442 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_list_level_1_in_list_level_2446 = new BitSet(new long[]{0x0000040000001022L,0x0100000000000000L});
	public static final BitSet FOLLOW_var_def_in_pipeline456 = new BitSet(new long[]{0x0000000000001002L,0x0000000004000180L,0x0000000000000400L});
	public static final BitSet FOLLOW_time_in_pipeline462 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BANG_in_pipeline465 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_pipeline467 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_pipeline473 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_command_in_pipeline477 = new BitSet(new long[]{0x0000000000001002L,0x0000000800000000L});
	public static final BitSet FOLLOW_BLANK_in_pipeline481 = new BitSet(new long[]{0x0000000000001000L,0x0000000800000000L});
	public static final BitSet FOLLOW_PIPE_in_pipeline485 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_pipeline488 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_command_in_pipeline492 = new BitSet(new long[]{0x0000000000001002L,0x0000000800000000L});
	public static final BitSet FOLLOW_TIME_in_time501 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_time504 = new BitSet(new long[]{0x0000000000001002L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_timearg_in_time508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_137_in_timearg516 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_timearg518 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_EXPORT_in_command529 = new BitSet(new long[]{0x0000000000001000L,0x0000000004000180L,0x0000000000000400L});
	public static final BitSet FOLLOW_var_def_in_command532 = new BitSet(new long[]{0x0000000000001002L,0x0000000004000180L,0x0000000000000400L});
	public static final BitSet FOLLOW_compound_command_in_command538 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simple_command_in_command543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_def_in_simple_command552 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601018EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_bash_command_in_simple_command555 = new BitSet(new long[]{0x8000000100001022L,0x0020000000028001L});
	public static final BitSet FOLLOW_redirect_in_simple_command558 = new BitSet(new long[]{0x8000000100001022L,0x0020000000028001L});
	public static final BitSet FOLLOW_bash_command_in_simple_command564 = new BitSet(new long[]{0x8000000100001022L,0x0020000000028001L});
	public static final BitSet FOLLOW_redirect_in_simple_command567 = new BitSet(new long[]{0x8000000100001022L,0x0020000000028001L});
	public static final BitSet FOLLOW_fname_no_res_word_in_bash_command576 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_bash_command579 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601012EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_arg_in_bash_command582 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_brace_expansion_in_arg604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_arg609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_arg614 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_res_word_str_in_arg619 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_arg632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_arg637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_redirect643 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000001L});
	public static final BitSet FOLLOW_here_string_op_in_redirect647 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_redirect650 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_redirect654 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_redirect659 = new BitSet(new long[]{0x0000000000001000L,0x0000000000008000L});
	public static final BitSet FOLLOW_here_doc_op_in_redirect663 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_redirect666 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_redirect670 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_EOL_in_redirect672 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_heredoc_in_redirect675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_redirect680 = new BitSet(new long[]{0x8000000100001020L,0x0020000000020000L});
	public static final BitSet FOLLOW_redir_op_in_redirect683 = new BitSet(new long[]{0x0000000100001000L});
	public static final BitSet FOLLOW_BLANK_in_redirect685 = new BitSet(new long[]{0x0000000100001000L});
	public static final BitSet FOLLOW_DIGIT_in_redirect688 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_MINUS_in_redirect690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_redirect709 = new BitSet(new long[]{0x8000000100001020L,0x0020000000020000L});
	public static final BitSet FOLLOW_redir_op_in_redirect712 = new BitSet(new long[]{0x22206B3F80463D20L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_redirect714 = new BitSet(new long[]{0x22206B3F80463D20L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_redir_dest_in_redirect717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_redirect732 = new BitSet(new long[]{0x8000000000001000L,0x0000000000020000L});
	public static final BitSet FOLLOW_proc_sub_in_redirect736 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_redir_dest744 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_file_desc_as_file_in_redir_dest750 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AMP_in_file_desc_as_file759 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_DIGIT_in_file_desc_as_file761 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AMP_in_file_desc_as_file771 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_DIGIT_in_file_desc_as_file773 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_MINUS_in_file_desc_as_file775 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_heredoc788 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_EOL_in_heredoc790 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_HERE_STRING_OP_in_here_string_op801 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSHIFT_in_here_doc_op809 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_MINUS_in_here_doc_op811 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSHIFT_in_here_doc_op821 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AMP_in_redir_op832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_LT_in_redir_op834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_redir_op844 = new BitSet(new long[]{0x0000000000000020L});
	public static final BitSet FOLLOW_AMP_in_redir_op846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_redir_op856 = new BitSet(new long[]{0x0000000000000020L});
	public static final BitSet FOLLOW_AMP_in_redir_op858 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_redir_op868 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_GT_in_redir_op870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RSHIFT_in_redir_op880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AMP_in_redir_op890 = new BitSet(new long[]{0x8000000000000000L});
	public static final BitSet FOLLOW_GT_in_redir_op892 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AMP_in_redir_op902 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_RSHIFT_in_redir_op904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_redir_op915 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_redir_op920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIGIT_in_redir_op925 = new BitSet(new long[]{0x8000000100000020L,0x0020000000020000L});
	public static final BitSet FOLLOW_redir_op_in_redir_op927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_brace_expansion937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_brace_in_brace_expansion940 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_brace_expansion944 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_brace973 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601012EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_brace975 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601012EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_brace_expansion_inside_in_brace978 = new BitSet(new long[]{0x0000000000001000L,0x0000400000000000L});
	public static final BitSet FOLLOW_BLANK_in_brace980 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_RBRACE_in_brace982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commasep_in_brace_expansion_inside998 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_range_in_brace_expansion_inside1000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIGIT_in_range1007 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_DOTDOT_in_range1009 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_DIGIT_in_range1012 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LETTER_in_range1017 = new BitSet(new long[]{0x0000002000000000L});
	public static final BitSet FOLLOW_DOTDOT_in_range1019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_LETTER_in_range1022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_brace_expansion_part1030 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_brace_in_brace_expansion_part1035 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_brace_expansion_part1040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_brace_expansion_part1045 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_brace_expansion_part_in_commasep1051 = new BitSet(new long[]{0x0000000000800000L});
	public static final BitSet FOLLOW_COMMA_in_commasep1053 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601012EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_brace_expansion_part_in_commasep1056 = new BitSet(new long[]{0x0000000000800002L});
	public static final BitSet FOLLOW_DOLLAR_in_command_sub1066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_command_sub1068 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_command_sub1070 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pipeline_in_command_sub1073 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_BLANK_in_command_sub1075 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_command_sub1078 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TICK_in_command_sub1091 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_command_sub1093 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pipeline_in_command_sub1096 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BLANK_in_command_sub1098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_TICK_in_command_sub1101 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_for_expr_in_compound_command1119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sel_expr_in_compound_command1124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_expr_in_compound_command1129 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_while_expr_in_compound_command1134 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_until_expr_in_compound_command1139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_expr_in_compound_command1144 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subshell_in_compound_command1149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_currshell_in_compound_command1154 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arith_comparison_in_compound_command1159 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cond_comparison_in_compound_command1164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_for_expr1171 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_for_expr1173 = new BitSet(new long[]{0x0000000000001000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_name_in_for_expr1176 = new BitSet(new long[]{0x0000040000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_wspace_in_for_expr1179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_IN_in_for_expr1181 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_for_expr1183 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601012EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_word_in_for_expr1186 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_for_expr1190 = new BitSet(new long[]{0x0000000200000000L});
	public static final BitSet FOLLOW_DO_in_for_expr1192 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_wspace_in_for_expr1194 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_for_expr1197 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_for_expr1199 = new BitSet(new long[]{0x0000000800000000L});
	public static final BitSet FOLLOW_DONE_in_for_expr1201 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_in_for_expr1221 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000800L});
	public static final BitSet FOLLOW_BLANK_in_for_expr1223 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000800L});
	public static final BitSet FOLLOW_LLPAREN_in_for_expr1226 = new BitSet(new long[]{0x0000048580001800L,0x0100001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_EOL_in_for_expr1228 = new BitSet(new long[]{0x0000008580001800L,0x0100001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_for_expr1232 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_arithmetic_in_for_expr1237 = new BitSet(new long[]{0x0000008000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_for_expr1239 = new BitSet(new long[]{0x0000008000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_for_expr1242 = new BitSet(new long[]{0x0000008000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_SEMIC_in_for_expr1248 = new BitSet(new long[]{0x0000000580001800L,0x0100001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_for_expr1251 = new BitSet(new long[]{0x0000000580000800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_arithmetic_in_for_expr1256 = new BitSet(new long[]{0x0000000000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_for_expr1258 = new BitSet(new long[]{0x0000000000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_for_expr1261 = new BitSet(new long[]{0x0000000000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_SEMIC_in_for_expr1266 = new BitSet(new long[]{0x0000040580001800L,0x0010001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_DOUBLE_SEMIC_in_for_expr1268 = new BitSet(new long[]{0x0000040580001800L,0x0010001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_for_expr1272 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_arithmetic_in_for_expr1277 = new BitSet(new long[]{0x0000040000001000L,0x0010000000000000L});
	public static final BitSet FOLLOW_wspace_in_for_expr1281 = new BitSet(new long[]{0x0000040000001000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RRPAREN_in_for_expr1284 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_for_expr1286 = new BitSet(new long[]{0x0000000200000000L});
	public static final BitSet FOLLOW_DO_in_for_expr1288 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_for_expr1290 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_for_expr1292 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_for_expr1294 = new BitSet(new long[]{0x0000000800000000L});
	public static final BitSet FOLLOW_DONE_in_for_expr1296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_in_sel_expr1338 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_sel_expr1340 = new BitSet(new long[]{0x0000000000001000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_name_in_sel_expr1343 = new BitSet(new long[]{0x0000040000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_wspace_in_sel_expr1346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_IN_in_sel_expr1348 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_sel_expr1350 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601012EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_word_in_sel_expr1353 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_sel_expr1357 = new BitSet(new long[]{0x0000000200000000L});
	public static final BitSet FOLLOW_DO_in_sel_expr1359 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_wspace_in_sel_expr1361 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_sel_expr1364 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_sel_expr1366 = new BitSet(new long[]{0x0000000800000000L});
	public static final BitSet FOLLOW_DONE_in_sel_expr1368 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IF_in_if_expr1392 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_if_expr1394 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_if_expr1399 = new BitSet(new long[]{0x0000040000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_if_expr1401 = new BitSet(new long[]{0x0000040000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_if_expr1404 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_THEN_in_if_expr1406 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_if_expr1408 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_if_expr1413 = new BitSet(new long[]{0x0000040000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_if_expr1415 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_if_expr1418 = new BitSet(new long[]{0x0020070000000000L});
	public static final BitSet FOLLOW_EOL_in_if_expr1420 = new BitSet(new long[]{0x0020070000000000L});
	public static final BitSet FOLLOW_elif_expr_in_if_expr1424 = new BitSet(new long[]{0x0020030000000000L});
	public static final BitSet FOLLOW_ELSE_in_if_expr1429 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_if_expr1431 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_if_expr1436 = new BitSet(new long[]{0x0000040000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_if_expr1438 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_if_expr1441 = new BitSet(new long[]{0x0020040000000000L});
	public static final BitSet FOLLOW_EOL_in_if_expr1443 = new BitSet(new long[]{0x0020040000000000L});
	public static final BitSet FOLLOW_FI_in_if_expr1448 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ELIF_in_elif_expr1483 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_elif_expr1485 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_elif_expr1490 = new BitSet(new long[]{0x0000040000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_elif_expr1492 = new BitSet(new long[]{0x0000040000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_elif_expr1495 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_THEN_in_elif_expr1497 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_elif_expr1499 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_elif_expr1504 = new BitSet(new long[]{0x0000040000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_BLANK_in_elif_expr1506 = new BitSet(new long[]{0x0000040000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_elif_expr1509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHILE_in_while_expr1530 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_while_expr1532 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_while_expr1536 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_while_expr1538 = new BitSet(new long[]{0x0000000200000000L});
	public static final BitSet FOLLOW_DO_in_while_expr1540 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_while_expr1542 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_while_expr1546 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_while_expr1548 = new BitSet(new long[]{0x0000000800000000L});
	public static final BitSet FOLLOW_DONE_in_while_expr1550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNTIL_in_until_expr1572 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_until_expr1574 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_until_expr1578 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_until_expr1580 = new BitSet(new long[]{0x0000000200000000L});
	public static final BitSet FOLLOW_DO_in_until_expr1582 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_until_expr1584 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_until_expr1588 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_until_expr1590 = new BitSet(new long[]{0x0000000800000000L});
	public static final BitSet FOLLOW_DONE_in_until_expr1592 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_in_case_expr1614 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_case_expr1617 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601012EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_word_in_case_expr1621 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_case_expr1623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_IN_in_case_expr1626 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_case_expr1629 = new BitSet(new long[]{0x22206F3F80463D00L,0xCCC030166601410EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_case_stmt_in_case_expr1633 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_case_expr1635 = new BitSet(new long[]{0x22206F3F80463D00L,0xCCC030166601410EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_last_case_in_case_expr1640 = new BitSet(new long[]{0x0000200000000000L});
	public static final BitSet FOLLOW_ESAC_in_case_expr1643 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_case_stmt1659 = new BitSet(new long[]{0x22206F3F80463D00L,0xCCC030166601410EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_LPAREN_in_case_stmt1663 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_case_stmt1665 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pattern_in_case_stmt1670 = new BitSet(new long[]{0x0000000000001000L,0x0008000800000000L});
	public static final BitSet FOLLOW_BLANK_in_case_stmt1673 = new BitSet(new long[]{0x0000000000001000L,0x0000000800000000L});
	public static final BitSet FOLLOW_PIPE_in_case_stmt1676 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_case_stmt1678 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pattern_in_case_stmt1681 = new BitSet(new long[]{0x0000000000001000L,0x0008000800000000L});
	public static final BitSet FOLLOW_BLANK_in_case_stmt1685 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_case_stmt1688 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_wspace_in_case_stmt1690 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_case_stmt1693 = new BitSet(new long[]{0x0000048000001000L});
	public static final BitSet FOLLOW_wspace_in_case_stmt1695 = new BitSet(new long[]{0x0000048000001000L});
	public static final BitSet FOLLOW_DOUBLE_SEMIC_in_case_stmt1698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_case_stmt1716 = new BitSet(new long[]{0x22206F3F80463D00L,0xCCC030166601410EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_LPAREN_in_case_stmt1720 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_case_stmt1722 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pattern_in_case_stmt1727 = new BitSet(new long[]{0x0000000000001000L,0x0008000800000000L});
	public static final BitSet FOLLOW_BLANK_in_case_stmt1730 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_PIPE_in_case_stmt1733 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_case_stmt1735 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pattern_in_case_stmt1738 = new BitSet(new long[]{0x0000000000001000L,0x0008000800000000L});
	public static final BitSet FOLLOW_BLANK_in_case_stmt1742 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_case_stmt1745 = new BitSet(new long[]{0x0000048000001000L});
	public static final BitSet FOLLOW_wspace_in_case_stmt1747 = new BitSet(new long[]{0x0000048000001000L});
	public static final BitSet FOLLOW_DOUBLE_SEMIC_in_case_stmt1750 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_last_case1779 = new BitSet(new long[]{0x22206F3F80463D00L,0xCCC030166601410EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_LPAREN_in_last_case1783 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_last_case1785 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pattern_in_last_case1790 = new BitSet(new long[]{0x0000000000001000L,0x0008000800000000L});
	public static final BitSet FOLLOW_BLANK_in_last_case1793 = new BitSet(new long[]{0x0000000000001000L,0x0000000800000000L});
	public static final BitSet FOLLOW_PIPE_in_last_case1796 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_last_case1798 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pattern_in_last_case1801 = new BitSet(new long[]{0x0000000000001000L,0x0008000800000000L});
	public static final BitSet FOLLOW_BLANK_in_last_case1805 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_last_case1808 = new BitSet(new long[]{0x22306FBF80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_wspace_in_last_case1810 = new BitSet(new long[]{0x22306FBF80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_last_case1813 = new BitSet(new long[]{0x0000048000001000L});
	public static final BitSet FOLLOW_wspace_in_last_case1817 = new BitSet(new long[]{0x0000048000001000L});
	public static final BitSet FOLLOW_DOUBLE_SEMIC_in_last_case1820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_last_case1823 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_EOL_in_last_case1826 = new BitSet(new long[]{0x0000040000001002L});
	public static final BitSet FOLLOW_LPAREN_in_subshell1852 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_wspace_in_subshell1854 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_subshell1857 = new BitSet(new long[]{0x0000040000001000L,0x0108000000000000L});
	public static final BitSet FOLLOW_BLANK_in_subshell1860 = new BitSet(new long[]{0x0000000000001000L,0x0100000000000000L});
	public static final BitSet FOLLOW_SEMIC_in_subshell1863 = new BitSet(new long[]{0x0000040000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_BLANK_in_subshell1868 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_EOL_in_subshell1871 = new BitSet(new long[]{0x0000040000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_BLANK_in_subshell1875 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_subshell1878 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_currshell1895 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_currshell1897 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_currshell1899 = new BitSet(new long[]{0x0000040000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_semiel_in_currshell1901 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_RBRACE_in_currshell1903 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LLPAREN_in_arith_comparison1920 = new BitSet(new long[]{0x0000040580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_wspace_in_arith_comparison1922 = new BitSet(new long[]{0x0000000580000800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_arithmetic_in_arith_comparison1925 = new BitSet(new long[]{0x0000040000001000L,0x0010000000000000L});
	public static final BitSet FOLLOW_wspace_in_arith_comparison1927 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RRPAREN_in_arith_comparison1930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cond_expr_in_cond_comparison1946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_var_def1963 = new BitSet(new long[]{0x0000000000001000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_name_in_var_def1966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_LSQUARE_in_var_def1968 = new BitSet(new long[]{0x0000000100001000L,0x0000000044000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_BLANK_in_var_def1970 = new BitSet(new long[]{0x0000000100000000L,0x0000000044000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_index_in_var_def1973 = new BitSet(new long[]{0x0000000000001000L,0x0040000000000000L});
	public static final BitSet FOLLOW_BLANK_in_var_def1975 = new BitSet(new long[]{0x0000000000001000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_var_def1978 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_var_def1980 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601410EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_value_in_var_def1982 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_var_def1984 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_var_def2005 = new BitSet(new long[]{0x0000000000001000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_name_in_var_def2009 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_var_def2011 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601410EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_value_in_var_def2014 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_var_def2016 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_var_def2023 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LET_in_var_def2027 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_name_in_var_def2030 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_var_def2032 = new BitSet(new long[]{0x0000000580000800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_arithmetic_in_var_def2035 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_var_def2037 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_num_in_value2047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_value2052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_value2057 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_value2062 = new BitSet(new long[]{0x22206F3F80463D00L,0xCCC830166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_wspace_in_value2065 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC830166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_arr_val_in_value2069 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_value2071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_val_in_arr_val2086 = new BitSet(new long[]{0x22206F3F80463D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_wspace_in_arr_val2088 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_LSQUARE_in_val2108 = new BitSet(new long[]{0x0000000100001000L,0x0000000044000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_BLANK_in_val2110 = new BitSet(new long[]{0x0000000100001000L,0x0000000044000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_index_in_val2113 = new BitSet(new long[]{0x0000000000001000L,0x0040000000000000L});
	public static final BitSet FOLLOW_BLANK_in_val2115 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_val2118 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_val2120 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pos_val_in_val2123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pos_val_in_val2128 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_pos_val2135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_pos_val2140 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_pos_val2145 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_pos_val2150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_index2158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_name_in_index2163 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_var_ref2172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_LBRACE_in_var_ref2174 = new BitSet(new long[]{0x0000000100001C00L,0x0000008044000100L,0x0000000000000408L});
	public static final BitSet FOLLOW_BLANK_in_var_ref2176 = new BitSet(new long[]{0x0000000100001C00L,0x0000008044000100L,0x0000000000000408L});
	public static final BitSet FOLLOW_var_exp_in_var_ref2179 = new BitSet(new long[]{0x0000000000001000L,0x0000400000000000L});
	public static final BitSet FOLLOW_BLANK_in_var_ref2181 = new BitSet(new long[]{0x0000000000001000L,0x0000400000000000L});
	public static final BitSet FOLLOW_RBRACE_in_var_ref2184 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_var_ref2197 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_name_in_var_ref2199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_var_ref2212 = new BitSet(new long[]{0x0000000100000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_num_in_var_ref2214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_var_ref2227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_TIMES_in_var_ref2229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_var_ref2242 = new BitSet(new long[]{0x0000000000000400L});
	public static final BitSet FOLLOW_AT_in_var_ref2244 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_var_ref2257 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_POUND_in_var_ref2259 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_var_ref2272 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_QMARK_in_var_ref2274 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_var_ref2287 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_MINUS_in_var_ref2289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_var_ref2302 = new BitSet(new long[]{0x0000000000000800L});
	public static final BitSet FOLLOW_BANG_in_var_ref2304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_var_ref2317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_138_in_var_ref2319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_WORDOP_in_var_exp2337 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601012EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_word_in_var_exp2340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2345 = new BitSet(new long[]{0x0000000000400000L});
	public static final BitSet FOLLOW_COLON_in_var_exp2347 = new BitSet(new long[]{0x0000000100000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_num_in_var_exp2351 = new BitSet(new long[]{0x0000000000400002L});
	public static final BitSet FOLLOW_COLON_in_var_exp2354 = new BitSet(new long[]{0x0000000100000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_num_in_var_exp2358 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_var_exp2382 = new BitSet(new long[]{0x0000000100000400L,0x0000000044000100L,0x0000000000000408L});
	public static final BitSet FOLLOW_var_name_in_var_exp2385 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_var_exp2387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_var_exp2396 = new BitSet(new long[]{0x0000000100000400L,0x0000000044000100L,0x0000000000000408L});
	public static final BitSet FOLLOW_var_name_in_var_exp2398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_LSQUARE_in_var_exp2400 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_TIMES_in_var_exp2405 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_AT_in_var_exp2409 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_var_exp2412 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POUND_in_var_exp2428 = new BitSet(new long[]{0x0000000100000400L,0x0000000044000100L,0x0000000000000408L});
	public static final BitSet FOLLOW_var_name_in_var_exp2431 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2436 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L});
	public static final BitSet FOLLOW_POUND_in_var_exp2439 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_POUNDPOUND_in_var_exp2442 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_var_exp2446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2451 = new BitSet(new long[]{0x0000000000000000L,0x0000000600000000L});
	public static final BitSet FOLLOW_PCT_in_var_exp2454 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_PCTPCT_in_var_exp2457 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_var_exp2461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2466 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2468 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_POUND_in_var_exp2470 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_var_exp2472 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2474 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_var_exp2476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2494 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2496 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_PCT_in_var_exp2498 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_var_exp2500 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2502 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_var_exp2504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2521 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2523 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2525 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_var_exp2527 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2529 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_var_exp2531 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2548 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2550 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2552 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_var_exp2554 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2572 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2574 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_var_exp2576 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2578 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_var_exp2580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2597 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2599 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_POUND_in_var_exp2601 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_var_exp2603 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2605 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2621 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2623 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_PCT_in_var_exp2625 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_var_exp2627 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2645 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2647 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_var_exp2649 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_var_exp2651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arr_var_ref_in_var_exp2667 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_var_exp2672 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_var_name2679 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_name_in_var_name2681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMES_in_var_name2683 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_var_name2685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_name_in_arr_var_ref2694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_LSQUARE_in_arr_var_ref2697 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_DIGIT_in_arr_var_ref2700 = new BitSet(new long[]{0x0000000100000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_arr_var_ref2703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_cond_expr2713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_LSQUARE_in_cond_expr2715 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_cond_expr2717 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_keyword_cond_in_cond_expr2719 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_cond_expr2721 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_cond_expr2723 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_cond_expr2725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_cond_expr2738 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_cond_expr2740 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_builtin_cond_in_cond_expr2742 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_cond_expr2744 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_cond_expr2746 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TEST_in_cond_expr2759 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_cond_expr2761 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_builtin_cond_in_cond_expr2763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_cond_primary2778 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_cond_primary2781 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_keyword_cond_in_cond_primary2785 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_BLANK_in_cond_primary2787 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cond_primary2791 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyword_cond_binary_in_cond_primary2797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyword_cond_unary_in_cond_primary2802 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_cond_primary2807 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cond_part_in_keyword_cond_binary2815 = new BitSet(new long[]{0x8000080000003800L,0x0000000000020000L});
	public static final BitSet FOLLOW_BLANK_in_keyword_cond_binary2817 = new BitSet(new long[]{0x8000080000003800L,0x0000000000020000L});
	public static final BitSet FOLLOW_binary_str_op_keyword_in_keyword_cond_binary2821 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_keyword_cond_binary2824 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_cond_part_in_keyword_cond_binary2828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UOP_in_keyword_cond_unary2836 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_keyword_cond_unary2839 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_cond_part_in_keyword_cond_unary2843 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_builtin_cond_primary2851 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_builtin_cond_primary2854 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_builtin_cond_in_builtin_cond_primary2858 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_BLANK_in_builtin_cond_primary2860 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_builtin_cond_primary2864 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_builtin_cond_binary_in_builtin_cond_primary2870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_builtin_cond_unary_in_builtin_cond_primary2875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_builtin_cond_primary2880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cond_part_in_builtin_cond_binary2888 = new BitSet(new long[]{0x0002880000003800L});
	public static final BitSet FOLLOW_BLANK_in_builtin_cond_binary2890 = new BitSet(new long[]{0x0002880000003800L});
	public static final BitSet FOLLOW_binary_string_op_builtin_in_builtin_cond_binary2894 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_builtin_cond_binary2897 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_cond_part_in_builtin_cond_binary2901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UOP_in_builtin_cond_unary2909 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_builtin_cond_unary2912 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_cond_part_in_builtin_cond_unary2916 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_negate_primary_in_keyword_cond2925 = new BitSet(new long[]{0x0000000000001002L,0x0000000000003000L});
	public static final BitSet FOLLOW_cond_primary_in_keyword_cond2927 = new BitSet(new long[]{0x0000000000001002L,0x0000000000003000L});
	public static final BitSet FOLLOW_BLANK_in_keyword_cond2931 = new BitSet(new long[]{0x0000000000001000L,0x0000000000003000L});
	public static final BitSet FOLLOW_LOGICOR_in_keyword_cond2936 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_LOGICAND_in_keyword_cond2939 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_keyword_cond2943 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_keyword_cond_in_keyword_cond2947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_negate_builtin_primary_in_builtin_cond2958 = new BitSet(new long[]{0x0000000000001002L,0x0000000000003000L});
	public static final BitSet FOLLOW_builtin_cond_primary_in_builtin_cond2960 = new BitSet(new long[]{0x0000000000001002L,0x0000000000003000L});
	public static final BitSet FOLLOW_BLANK_in_builtin_cond2964 = new BitSet(new long[]{0x0000000000001000L,0x0000000000003000L});
	public static final BitSet FOLLOW_LOGICOR_in_builtin_cond2969 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_LOGICAND_in_builtin_cond2972 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_builtin_cond2976 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_builtin_cond_in_builtin_cond2980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_negate_primary2990 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_negate_primary2992 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_cond_primary_in_negate_primary2995 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_negate_builtin_primary3011 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_negate_builtin_primary3013 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_builtin_cond_primary_in_negate_builtin_primary3016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BOP_in_binary_str_op_keyword3032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUALS_in_binary_str_op_keyword3037 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_binary_str_op_keyword3039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUALS_in_binary_str_op_keyword3049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_binary_str_op_keyword3054 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_binary_str_op_keyword3056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_binary_str_op_keyword3066 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_binary_str_op_keyword3071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BOP_in_binary_string_op_builtin3079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUALS_in_binary_string_op_builtin3084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_binary_string_op_builtin3089 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_binary_string_op_builtin3091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ESC_LT_in_binary_string_op_builtin3101 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ESC_GT_in_binary_string_op_builtin3106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UOP_in_unary_cond3114 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_unary_cond3117 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_cond_part_in_unary_cond3120 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_brace_expansion_in_cond_part3127 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_cond_part3132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_res_word_str_in_cond_part3137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_cond_part3150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_cond_part3155 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_in_cond_part3160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_wspace3168 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_EOL_in_wspace3171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_semiel3178 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_semiel3184 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_brace_expansion_in_word3194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_word3199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_word3204 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_word3209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_word3214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_expansion_in_word3219 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_res_word_str_in_word3224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_pattern3239 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_pattern3244 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMES_in_pattern3249 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ns_str_part_in_str_part3318 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SLASH_in_str_part3323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_str_part_in_str_part_with_pound3332 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POUND_in_str_part_with_pound3337 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POUNDPOUND_in_str_part_with_pound3342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ns_str_part_no_res_in_ns_str_part3351 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_res_word_str_in_ns_str_part3356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_ns_str_part_no_res3365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_name_in_ns_str_part_no_res3370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NQSTR_in_ns_str_part_no_res3372 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUALS_in_ns_str_part_no_res3374 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PCT_in_ns_str_part_no_res3376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PCTPCT_in_ns_str_part_no_res3378 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_ns_str_part_no_res3380 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_ns_str_part_no_res3382 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOTDOT_in_ns_str_part_no_res3384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_ns_str_part_no_res3386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BOP_in_ns_str_part_no_res3388 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UOP_in_ns_str_part_no_res3390 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TEST_in_ns_str_part_no_res3392 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_138_in_ns_str_part_no_res3394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TILDE_in_ns_str_part_no_res3396 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INC_in_ns_str_part_no_res3398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEC_in_ns_str_part_no_res3400 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ARITH_ASSIGN_in_ns_str_part_no_res3402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ESC_CHAR_in_ns_str_part_no_res3404 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CARET_in_ns_str_part_no_res3406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ns_str_part_in_ns_str3414 = new BitSet(new long[]{0x22206B3B80462102L,0xC08000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_BLANK_in_dq_str_part3433 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EOL_in_dq_str_part3435 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AMP_in_dq_str_part3437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGICAND_in_dq_str_part3439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGICOR_in_dq_str_part3441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_dq_str_part3443 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_dq_str_part3445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PIPE_in_dq_str_part3447 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQUOTE_in_dq_str_part3449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMIC_in_dq_str_part3451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_dq_str_part3453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_dq_str_part3455 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RPAREN_in_dq_str_part3457 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LLPAREN_in_dq_str_part3459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RRPAREN_in_dq_str_part3461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOUBLE_SEMIC_in_dq_str_part3463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_dq_str_part3465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RBRACE_in_dq_str_part3467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TICK_in_dq_str_part3469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LEQ_in_dq_str_part3471 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEQ_in_dq_str_part3473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_str_part_with_pound_in_dq_str_part3478 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_str_part_with_pound_in_sq_str_part3487 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_sq_str_part3492 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EOL_in_sq_str_part3494 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AMP_in_sq_str_part3496 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGICAND_in_sq_str_part3498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGICOR_in_sq_str_part3500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_sq_str_part3502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_sq_str_part3504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PIPE_in_sq_str_part3506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QUOTE_in_sq_str_part3508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMIC_in_sq_str_part3510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_sq_str_part3512 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_sq_str_part3514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RPAREN_in_sq_str_part3516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LLPAREN_in_sq_str_part3518 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RRPAREN_in_sq_str_part3520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOUBLE_SEMIC_in_sq_str_part3522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_sq_str_part3524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RBRACE_in_sq_str_part3526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_sq_str_part3528 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TICK_in_sq_str_part3530 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BOP_in_sq_str_part3532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UOP_in_sq_str_part3534 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_nqstr_in_fname3542 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_nqstr_no_res_word_in_fname_no_res_word3559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_res_word_str_in_nqstr_no_res_word3576 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC031966601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_no_res_word_part_in_nqstr_no_res_word3579 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC031966601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_str_part_with_pound_in_nqstr_no_res_word3581 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC031966601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_no_res_word_part_in_nqstr_no_res_word3588 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC031966601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_no_res_word_part_in_nqstr_no_res_word3591 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC031966601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_str_part_with_pound_in_nqstr_no_res_word3593 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC031966601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_bracket_pattern_match_in_no_res_word_part3604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_extended_pattern_match_in_no_res_word_part3609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_no_res_word_part3614 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_no_res_word_part3619 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_expansion_in_no_res_word_part3624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dqstr_in_no_res_word_part3629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sqstr_in_no_res_word_part3634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ns_str_part_no_res_in_no_res_word_part3639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SLASH_in_no_res_word_part3644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pattern_match_trigger_in_no_res_word_part3649 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bracket_pattern_match_in_nqstr3658 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_extended_pattern_match_in_nqstr3660 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_var_ref_in_nqstr3662 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_command_sub_in_nqstr3664 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_arithmetic_expansion_in_nqstr3666 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_dqstr_in_nqstr3668 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_sqstr_in_nqstr3670 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_str_part_in_nqstr3673 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC031966601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_str_part_with_pound_in_nqstr3675 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC031966601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pattern_match_trigger_in_nqstr3679 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BANG_in_nqstr3681 = new BitSet(new long[]{0x22206B3F80462D02L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_QUOTE_in_dqstr3691 = new BitSet(new long[]{0xE2206FBF80C63D20L,0xCDD8719E6603796EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_dqstr_part_in_dqstr3693 = new BitSet(new long[]{0xE2206FBF80C63D20L,0xCDD8719E6603796EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_QUOTE_in_dqstr3696 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bracket_pattern_match_in_dqstr_part3713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_extended_pattern_match_in_dqstr_part3718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_dqstr_part3723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_dqstr_part3728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_expansion_in_dqstr_part3733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dq_str_part_in_dqstr_part3738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pattern_match_trigger_in_dqstr_part3743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_dqstr_part3748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQUOTE_in_sqstr3756 = new BitSet(new long[]{0xA2206FBF80C63120L,0xCD98618E6602792EL,0x00000000000004B7L});
	public static final BitSet FOLLOW_sq_str_part_in_sqstr3758 = new BitSet(new long[]{0xA2206FBF80C63120L,0xCD98618E6602792EL,0x00000000000004B7L});
	public static final BitSet FOLLOW_SQUOTE_in_sqstr3761 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_bracket_pattern_match3813 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_bracket_pattern_match3815 = new BitSet(new long[]{0x0000000000020800L});
	public static final BitSet FOLLOW_BANG_in_bracket_pattern_match3818 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_CARET_in_bracket_pattern_match3820 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_pattern_match_in_bracket_pattern_match3823 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_RSQUARE_in_bracket_pattern_match3826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_bracket_pattern_match3842 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_bracket_pattern_match3844 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_pattern_match_in_bracket_pattern_match3846 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_RSQUARE_in_bracket_pattern_match3849 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_bracket_pattern_match3865 = new BitSet(new long[]{0x0000000000020800L});
	public static final BitSet FOLLOW_BANG_in_bracket_pattern_match3868 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_CARET_in_bracket_pattern_match3870 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_pattern_match_in_bracket_pattern_match3873 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_RSQUARE_in_bracket_pattern_match3876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_bracket_pattern_match3890 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_pattern_match_in_bracket_pattern_match3892 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_RSQUARE_in_bracket_pattern_match3895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pattern_class_match_in_pattern_match3913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_str_part_in_pattern_match3918 = new BitSet(new long[]{0x22206B3B80462102L,0xC48001866600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_str_part_with_pound_in_pattern_match3920 = new BitSet(new long[]{0x22206B3B80462102L,0xC48001866600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_LSQUARE_in_pattern_class_match3930 = new BitSet(new long[]{0x0000000000400000L});
	public static final BitSet FOLLOW_COLON_in_pattern_class_match3932 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_NAME_in_pattern_class_match3934 = new BitSet(new long[]{0x0000000000400000L});
	public static final BitSet FOLLOW_COLON_in_pattern_class_match3936 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_pattern_class_match3938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_pattern_class_match3951 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_pattern_class_match3953 = new BitSet(new long[]{0x8000081500C00C20L,0x0D48709A12034120L,0x0000000000000009L});
	public static final BitSet FOLLOW_pattern_char_in_pattern_class_match3955 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_pattern_class_match3957 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_pattern_class_match3959 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_pattern_class_match3972 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_DOT_in_pattern_class_match3974 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_NAME_in_pattern_class_match3976 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_DOT_in_pattern_class_match3978 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_pattern_class_match3980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QMARK_in_extended_pattern_match4066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_extended_pattern_match4068 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_extended_pattern_match4070 = new BitSet(new long[]{0x0000000000000000L,0x0008000800000000L});
	public static final BitSet FOLLOW_PIPE_in_extended_pattern_match4073 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_extended_pattern_match4075 = new BitSet(new long[]{0x0000000000000000L,0x0008000800000000L});
	public static final BitSet FOLLOW_RPAREN_in_extended_pattern_match4079 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMES_in_extended_pattern_match4093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_extended_pattern_match4095 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_extended_pattern_match4097 = new BitSet(new long[]{0x0000000000000000L,0x0008000800000000L});
	public static final BitSet FOLLOW_PIPE_in_extended_pattern_match4100 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_extended_pattern_match4102 = new BitSet(new long[]{0x0000000000000000L,0x0008000800000000L});
	public static final BitSet FOLLOW_RPAREN_in_extended_pattern_match4106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_extended_pattern_match4120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_extended_pattern_match4122 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_extended_pattern_match4124 = new BitSet(new long[]{0x0000000000000000L,0x0008000800000000L});
	public static final BitSet FOLLOW_PIPE_in_extended_pattern_match4127 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_extended_pattern_match4129 = new BitSet(new long[]{0x0000000000000000L,0x0008000800000000L});
	public static final BitSet FOLLOW_RPAREN_in_extended_pattern_match4133 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_in_extended_pattern_match4147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_extended_pattern_match4149 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_extended_pattern_match4151 = new BitSet(new long[]{0x0000000000000000L,0x0008000800000000L});
	public static final BitSet FOLLOW_PIPE_in_extended_pattern_match4154 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_extended_pattern_match4156 = new BitSet(new long[]{0x0000000000000000L,0x0008000800000000L});
	public static final BitSet FOLLOW_RPAREN_in_extended_pattern_match4160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_extended_pattern_match4174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_extended_pattern_match4176 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_extended_pattern_match4178 = new BitSet(new long[]{0x0000000000000000L,0x0008000800000000L});
	public static final BitSet FOLLOW_PIPE_in_extended_pattern_match4181 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_extended_pattern_match4183 = new BitSet(new long[]{0x0000000000000000L,0x0008000800000000L});
	public static final BitSet FOLLOW_RPAREN_in_extended_pattern_match4187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_arithmetic_expansion4205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_LLPAREN_in_arithmetic_expansion4208 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_arithmetic_expansion4211 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_arithmetic_part_in_arithmetic_expansion4215 = new BitSet(new long[]{0x0000000000001000L,0x0010000000000000L});
	public static final BitSet FOLLOW_BLANK_in_arithmetic_expansion4217 = new BitSet(new long[]{0x0000000000001000L,0x0010000000000000L});
	public static final BitSet FOLLOW_RRPAREN_in_arithmetic_expansion4221 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetics_in_arithmetic_part4230 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_in_arithmetic_part4235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_in_arithmetics4244 = new BitSet(new long[]{0x0000000000801002L});
	public static final BitSet FOLLOW_BLANK_in_arithmetics4247 = new BitSet(new long[]{0x0000000000801000L});
	public static final BitSet FOLLOW_COMMA_in_arithmetics4251 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_arithmetics4254 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_arithmetic_in_arithmetics4258 = new BitSet(new long[]{0x0000000000801002L});
	public static final BitSet FOLLOW_arithmetic_condition_in_arithmetic4268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_assignment_in_arithmetic4273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_primary4281 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_primary4286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_primary4291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_name_in_primary4296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_primary4309 = new BitSet(new long[]{0x0000000580000800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_arithmetics_in_primary4313 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_primary4316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_name_in_post_inc_dec4325 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000008L});
	public static final BitSet FOLLOW_BLANK_in_post_inc_dec4327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_INC_in_post_inc_dec4329 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_name_in_post_inc_dec4342 = new BitSet(new long[]{0x0000000080001000L});
	public static final BitSet FOLLOW_BLANK_in_post_inc_dec4344 = new BitSet(new long[]{0x0000000080000000L});
	public static final BitSet FOLLOW_DEC_in_post_inc_dec4346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INC_in_pre_inc_dec4362 = new BitSet(new long[]{0x0000000000001000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_BLANK_in_pre_inc_dec4364 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_name_in_pre_inc_dec4366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEC_in_pre_inc_dec4379 = new BitSet(new long[]{0x0000000000001000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_BLANK_in_pre_inc_dec4381 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_name_in_pre_inc_dec4383 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_post_inc_dec_in_unary4398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pre_inc_dec_in_unary4403 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_primary_in_unary4408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLUS_in_unary4413 = new BitSet(new long[]{0x0000000500000000L,0x0000000044004100L,0x0000000000000401L});
	public static final BitSet FOLLOW_primary_in_unary4416 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_in_unary4421 = new BitSet(new long[]{0x0000000500000000L,0x0000000044004100L,0x0000000000000401L});
	public static final BitSet FOLLOW_primary_in_unary4424 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_negation4433 = new BitSet(new long[]{0x0000000580001000L,0x0000001046004108L,0x0000000000000401L});
	public static final BitSet FOLLOW_BLANK_in_negation4435 = new BitSet(new long[]{0x0000000580000000L,0x0000001046004108L,0x0000000000000401L});
	public static final BitSet FOLLOW_TILDE_in_negation4439 = new BitSet(new long[]{0x0000000580001000L,0x0000001046004108L,0x0000000000000401L});
	public static final BitSet FOLLOW_BLANK_in_negation4441 = new BitSet(new long[]{0x0000000580000000L,0x0000001046004108L,0x0000000000000401L});
	public static final BitSet FOLLOW_unary_in_negation4446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_negation_in_exponential4454 = new BitSet(new long[]{0x0008000000001002L});
	public static final BitSet FOLLOW_BLANK_in_exponential4457 = new BitSet(new long[]{0x0008000000001000L});
	public static final BitSet FOLLOW_EXP_in_exponential4461 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_exponential4464 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_negation_in_exponential4468 = new BitSet(new long[]{0x0008000000001002L});
	public static final BitSet FOLLOW_exponential_in_tdm4478 = new BitSet(new long[]{0x0000000000001002L,0x0400000200000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_BLANK_in_tdm4481 = new BitSet(new long[]{0x0000000000001000L,0x0400000200000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_TIMES_in_tdm4485 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_SLASH_in_tdm4488 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_PCT_in_tdm4491 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_tdm4494 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_exponential_in_tdm4498 = new BitSet(new long[]{0x0000000000001002L,0x0400000200000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_tdm_in_addsub4507 = new BitSet(new long[]{0x0000000000001002L,0x0000001002000000L});
	public static final BitSet FOLLOW_BLANK_in_addsub4510 = new BitSet(new long[]{0x0000000000001000L,0x0000001002000000L});
	public static final BitSet FOLLOW_PLUS_in_addsub4515 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_MINUS_in_addsub4518 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_addsub4521 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_tdm_in_addsub4525 = new BitSet(new long[]{0x0000000000001002L,0x0000001002000000L});
	public static final BitSet FOLLOW_addsub_in_shifts4534 = new BitSet(new long[]{0x0000000000001002L,0x0020000000008000L});
	public static final BitSet FOLLOW_BLANK_in_shifts4537 = new BitSet(new long[]{0x0000000000001000L,0x0020000000008000L});
	public static final BitSet FOLLOW_LSHIFT_in_shifts4542 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_RSHIFT_in_shifts4545 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_shifts4549 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_addsub_in_shifts4553 = new BitSet(new long[]{0x0000000000001002L,0x0020000000008000L});
	public static final BitSet FOLLOW_shifts_in_compare4562 = new BitSet(new long[]{0xC000000000001002L,0x0000000000020040L});
	public static final BitSet FOLLOW_BLANK_in_compare4565 = new BitSet(new long[]{0xC000000000001000L,0x0000000000020040L});
	public static final BitSet FOLLOW_LEQ_in_compare4570 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_GEQ_in_compare4573 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_LT_in_compare4576 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_GT_in_compare4579 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_compare4582 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_shifts_in_compare4586 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compare_in_bitwiseand4596 = new BitSet(new long[]{0x0000000000001022L});
	public static final BitSet FOLLOW_BLANK_in_bitwiseand4599 = new BitSet(new long[]{0x0000000000001020L});
	public static final BitSet FOLLOW_AMP_in_bitwiseand4603 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_bitwiseand4606 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_compare_in_bitwiseand4610 = new BitSet(new long[]{0x0000000000001022L});
	public static final BitSet FOLLOW_bitwiseand_in_bitwisexor4620 = new BitSet(new long[]{0x0000000000021002L});
	public static final BitSet FOLLOW_BLANK_in_bitwisexor4623 = new BitSet(new long[]{0x0000000000021000L});
	public static final BitSet FOLLOW_CARET_in_bitwisexor4627 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_bitwisexor4630 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_bitwiseand_in_bitwisexor4634 = new BitSet(new long[]{0x0000000000021002L});
	public static final BitSet FOLLOW_bitwisexor_in_bitwiseor4644 = new BitSet(new long[]{0x0000000000001002L,0x0000000800000000L});
	public static final BitSet FOLLOW_BLANK_in_bitwiseor4647 = new BitSet(new long[]{0x0000000000001000L,0x0000000800000000L});
	public static final BitSet FOLLOW_PIPE_in_bitwiseor4651 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_bitwiseor4654 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_bitwisexor_in_bitwiseor4658 = new BitSet(new long[]{0x0000000000001002L,0x0000000800000000L});
	public static final BitSet FOLLOW_bitwiseor_in_logicand4666 = new BitSet(new long[]{0x0000000000001002L,0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_logicand4669 = new BitSet(new long[]{0x0000000000001000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LOGICAND_in_logicand4673 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_logicand4676 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_bitwiseor_in_logicand4680 = new BitSet(new long[]{0x0000000000001002L,0x0000000000001000L});
	public static final BitSet FOLLOW_logicand_in_logicor4689 = new BitSet(new long[]{0x0000000000001002L,0x0000000000002000L});
	public static final BitSet FOLLOW_BLANK_in_logicor4692 = new BitSet(new long[]{0x0000000000001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_LOGICOR_in_logicor4696 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_logicor4699 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_logicand_in_logicor4703 = new BitSet(new long[]{0x0000000000001002L,0x0000000000002000L});
	public static final BitSet FOLLOW_logicor_in_arithmetic_condition4716 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_QMARK_in_arithmetic_condition4718 = new BitSet(new long[]{0x0000000580000800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_logicor_in_arithmetic_condition4722 = new BitSet(new long[]{0x0000000000400000L});
	public static final BitSet FOLLOW_COLON_in_arithmetic_condition4724 = new BitSet(new long[]{0x0000000580000800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_logicor_in_arithmetic_condition4728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_name_in_arithmetic_assignment4752 = new BitSet(new long[]{0x0000080000001100L});
	public static final BitSet FOLLOW_BLANK_in_arithmetic_assignment4754 = new BitSet(new long[]{0x0000080000001100L});
	public static final BitSet FOLLOW_EQUALS_in_arithmetic_assignment4759 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_ARITH_ASSIGN_in_arithmetic_assignment4762 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_arithmetic_assignment4766 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_logicor_in_arithmetic_assignment4772 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_proc_sub4782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_GT_in_proc_sub4786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_proc_sub4788 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_proc_sub4790 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_proc_sub4793 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_BLANK_in_proc_sub4795 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_proc_sub4798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FUNCTION_in_function4816 = new BitSet(new long[]{0x0000000000001000L});
	public static final BitSet FOLLOW_BLANK_in_function4818 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_function4821 = new BitSet(new long[]{0x0000040000001000L,0x0000000000004000L});
	public static final BitSet FOLLOW_BLANK_in_function4824 = new BitSet(new long[]{0x0000000000001000L,0x0000000000004000L});
	public static final BitSet FOLLOW_parens_in_function4827 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_function4831 = new BitSet(new long[]{0x0200000000040000L,0x4080000000014822L,0x0000000000000090L});
	public static final BitSet FOLLOW_compound_command_in_function4833 = new BitSet(new long[]{0x8000000100001022L,0x0020000000028001L});
	public static final BitSet FOLLOW_redirect_in_function4835 = new BitSet(new long[]{0x8000000100001022L,0x0020000000028001L});
	public static final BitSet FOLLOW_fname_in_function4854 = new BitSet(new long[]{0x0000000000001000L,0x0000000000004000L});
	public static final BitSet FOLLOW_BLANK_in_function4856 = new BitSet(new long[]{0x0000000000001000L,0x0000000000004000L});
	public static final BitSet FOLLOW_parens_in_function4859 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_function4861 = new BitSet(new long[]{0x0200000000040000L,0x4080000000014822L,0x0000000000000090L});
	public static final BitSet FOLLOW_compound_command_in_function4863 = new BitSet(new long[]{0x8000000100001022L,0x0020000000028001L});
	public static final BitSet FOLLOW_redirect_in_function4865 = new BitSet(new long[]{0x8000000100001022L,0x0020000000028001L});
	public static final BitSet FOLLOW_LPAREN_in_parens4887 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_BLANK_in_parens4889 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_parens4892 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_nqstr_in_synpred5_bashast291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TICK_in_synpred11_bashast303 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQUOTE_in_synpred18_bashast317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QUOTE_in_synpred19_bashast319 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_synpred25_bashast382 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred28_bashast398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_synpred29_bashast403 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred37_bashast442 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred38_bashast420 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_SEMIC_in_synpred38_bashast423 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred38_bashast426 = new BitSet(new long[]{0x0000000000000020L});
	public static final BitSet FOLLOW_AMP_in_synpred38_bashast429 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred38_bashast433 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_EOL_in_synpred38_bashast437 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred38_bashast442 = new BitSet(new long[]{0x22306B3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_list_level_1_in_synpred38_bashast446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_def_in_synpred40_bashast456 = new BitSet(new long[]{0x0000000000001002L,0x0000000004000180L,0x0000000000000400L});
	public static final BitSet FOLLOW_BLANK_in_synpred42_bashast467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_synpred43_bashast465 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_synpred43_bashast467 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_synpred44_bashast473 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred46_bashast488 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred48_bashast504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred50_bashast518 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compound_command_in_synpred53_bashast538 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_def_in_synpred54_bashast552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_def_in_synpred56_bashast552 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601018EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_bash_command_in_synpred56_bashast555 = new BitSet(new long[]{0x8000000100001022L,0x0020000000028001L});
	public static final BitSet FOLLOW_redirect_in_synpred56_bashast558 = new BitSet(new long[]{0x8000000100001022L,0x0020000000028001L});
	public static final BitSet FOLLOW_BLANK_in_synpred59_bashast579 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601012EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_arg_in_synpred59_bashast582 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_brace_expansion_in_synpred60_bashast604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_synpred61_bashast609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_synpred62_bashast614 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_res_word_str_in_synpred63_bashast619 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_synpred64_bashast632 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred67_bashast643 = new BitSet(new long[]{0x0000000000001000L,0x0000000000000001L});
	public static final BitSet FOLLOW_here_string_op_in_synpred67_bashast647 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred67_bashast650 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_synpred67_bashast654 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred70_bashast659 = new BitSet(new long[]{0x0000000000001000L,0x0000000000008000L});
	public static final BitSet FOLLOW_here_doc_op_in_synpred70_bashast663 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred70_bashast666 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_synpred70_bashast670 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_EOL_in_synpred70_bashast672 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_heredoc_in_synpred70_bashast675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred74_bashast680 = new BitSet(new long[]{0x8000000100001020L,0x0020000000020000L});
	public static final BitSet FOLLOW_redir_op_in_synpred74_bashast683 = new BitSet(new long[]{0x0000000100001000L});
	public static final BitSet FOLLOW_BLANK_in_synpred74_bashast685 = new BitSet(new long[]{0x0000000100001000L});
	public static final BitSet FOLLOW_DIGIT_in_synpred74_bashast688 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_MINUS_in_synpred74_bashast690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred77_bashast709 = new BitSet(new long[]{0x8000000100001020L,0x0020000000020000L});
	public static final BitSet FOLLOW_redir_op_in_synpred77_bashast712 = new BitSet(new long[]{0x22206B3F80463D20L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred77_bashast714 = new BitSet(new long[]{0x22206B3F80463D20L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_redir_dest_in_synpred77_bashast717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_synpred81_bashast788 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_EOL_in_synpred81_bashast790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSHIFT_in_synpred82_bashast809 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_MINUS_in_synpred82_bashast811 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_synpred84_bashast844 = new BitSet(new long[]{0x0000000000000020L});
	public static final BitSet FOLLOW_AMP_in_synpred84_bashast846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_synpred85_bashast856 = new BitSet(new long[]{0x0000000000000020L});
	public static final BitSet FOLLOW_AMP_in_synpred85_bashast858 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LT_in_synpred90_bashast915 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GT_in_synpred91_bashast920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_synpred93_bashast944 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_synpred98_bashast1030 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_synpred100_bashast1040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred102_bashast1070 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred105_bashast1093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_synpred119_bashast1194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_synpred140_bashast1361 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_synpred141_bashast1394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_synpred143_bashast1408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_synpred147_bashast1431 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred151_bashast1485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_synpred153_bashast1499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_stmt_in_synpred156_bashast1633 = new BitSet(new long[]{0x0000040000001000L});
	public static final BitSet FOLLOW_wspace_in_synpred156_bashast1635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_last_case_in_synpred157_bashast1640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_synpred165_bashast1690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_synpred167_bashast1659 = new BitSet(new long[]{0x22206F3F80463D00L,0xCCC030166601410EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_LPAREN_in_synpred167_bashast1663 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred167_bashast1665 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pattern_in_synpred167_bashast1670 = new BitSet(new long[]{0x0000000000001000L,0x0008000800000000L});
	public static final BitSet FOLLOW_BLANK_in_synpred167_bashast1673 = new BitSet(new long[]{0x0000000000001000L,0x0000000800000000L});
	public static final BitSet FOLLOW_PIPE_in_synpred167_bashast1676 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred167_bashast1678 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pattern_in_synpred167_bashast1681 = new BitSet(new long[]{0x0000000000001000L,0x0008000800000000L});
	public static final BitSet FOLLOW_BLANK_in_synpred167_bashast1685 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred167_bashast1688 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_wspace_in_synpred167_bashast1690 = new BitSet(new long[]{0x22306F3F80463D00L,0xCCC03016660149AEL,0x00000000000004BFL});
	public static final BitSet FOLLOW_clist_in_synpred167_bashast1693 = new BitSet(new long[]{0x0000048000001000L});
	public static final BitSet FOLLOW_wspace_in_synpred167_bashast1695 = new BitSet(new long[]{0x0000048000001000L});
	public static final BitSet FOLLOW_DOUBLE_SEMIC_in_synpred167_bashast1698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_synpred183_bashast1810 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_wspace_in_synpred189_bashast1854 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred200_bashast1984 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred203_bashast2016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred206_bashast2037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_synpred207_bashast2047 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_synpred208_bashast2052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_synpred209_bashast2057 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_synpred216_bashast2108 = new BitSet(new long[]{0x0000000100001000L,0x0000000044000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_BLANK_in_synpred216_bashast2110 = new BitSet(new long[]{0x0000000100001000L,0x0000000044000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_index_in_synpred216_bashast2113 = new BitSet(new long[]{0x0000000000001000L,0x0040000000000000L});
	public static final BitSet FOLLOW_BLANK_in_synpred216_bashast2115 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_synpred216_bashast2118 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_synpred216_bashast2120 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_pos_val_in_synpred216_bashast2123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_synpred217_bashast2135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_synpred218_bashast2140 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_synpred219_bashast2145 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOLLAR_in_synpred224_bashast2197 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000100L,0x0000000000000400L});
	public static final BitSet FOLLOW_name_in_synpred224_bashast2199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred232_bashast2335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_WORDOP_in_synpred232_bashast2337 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601012EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_word_in_synpred232_bashast2340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred234_bashast2345 = new BitSet(new long[]{0x0000000000400000L});
	public static final BitSet FOLLOW_COLON_in_synpred234_bashast2347 = new BitSet(new long[]{0x0000000100000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_num_in_synpred234_bashast2351 = new BitSet(new long[]{0x0000000000400002L});
	public static final BitSet FOLLOW_COLON_in_synpred234_bashast2354 = new BitSet(new long[]{0x0000000100000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_num_in_synpred234_bashast2358 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_synpred236_bashast2382 = new BitSet(new long[]{0x0000000100000400L,0x0000000044000100L,0x0000000000000408L});
	public static final BitSet FOLLOW_var_name_in_synpred236_bashast2385 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_synpred236_bashast2387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_synpred238_bashast2396 = new BitSet(new long[]{0x0000000100000400L,0x0000000044000100L,0x0000000000000408L});
	public static final BitSet FOLLOW_var_name_in_synpred238_bashast2398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_LSQUARE_in_synpred238_bashast2400 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_TIMES_in_synpred238_bashast2405 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_AT_in_synpred238_bashast2409 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_synpred238_bashast2412 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred241_bashast2436 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L});
	public static final BitSet FOLLOW_set_in_synpred241_bashast2438 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_synpred241_bashast2446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred243_bashast2451 = new BitSet(new long[]{0x0000000000000000L,0x0000000600000000L});
	public static final BitSet FOLLOW_set_in_synpred243_bashast2453 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_synpred243_bashast2461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred244_bashast2466 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred244_bashast2468 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_POUND_in_synpred244_bashast2470 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_synpred244_bashast2472 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred244_bashast2474 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_synpred244_bashast2476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred245_bashast2494 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred245_bashast2496 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_PCT_in_synpred245_bashast2498 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_synpred245_bashast2500 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred245_bashast2502 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_synpred245_bashast2504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred246_bashast2521 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred246_bashast2523 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred246_bashast2525 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_synpred246_bashast2527 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred246_bashast2529 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_synpred246_bashast2531 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred248_bashast2548 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred248_bashast2550 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred248_bashast2552 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_synpred248_bashast2554 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred248_bashast2556 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred249_bashast2572 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred249_bashast2574 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_synpred249_bashast2576 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred249_bashast2578 = new BitSet(new long[]{0x22206B3F80462D00L,0xCCC030166601010EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_fname_in_synpred249_bashast2580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred251_bashast2597 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred251_bashast2599 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_POUND_in_synpred251_bashast2601 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_synpred251_bashast2603 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred251_bashast2605 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred253_bashast2621 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred253_bashast2623 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_PCT_in_synpred253_bashast2625 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_synpred253_bashast2627 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred253_bashast2629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_name_in_synpred255_bashast2645 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred255_bashast2647 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_ns_str_in_synpred255_bashast2649 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_SLASH_in_synpred255_bashast2651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arr_var_ref_in_synpred256_bashast2667 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred265_bashast2778 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred265_bashast2781 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_keyword_cond_in_synpred265_bashast2785 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_BLANK_in_synpred265_bashast2787 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred265_bashast2791 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyword_cond_binary_in_synpred266_bashast2797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyword_cond_unary_in_synpred267_bashast2802 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred273_bashast2851 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred273_bashast2854 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_builtin_cond_in_synpred273_bashast2858 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_BLANK_in_synpred273_bashast2860 = new BitSet(new long[]{0x0000000000001000L,0x0008000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred273_bashast2864 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_builtin_cond_binary_in_synpred274_bashast2870 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_builtin_cond_unary_in_synpred275_bashast2875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_negate_primary_in_synpred279_bashast2925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_negate_builtin_primary_in_synpred284_bashast2958 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred288_bashast2964 = new BitSet(new long[]{0x0000000000001000L,0x0000000000003000L});
	public static final BitSet FOLLOW_set_in_synpred288_bashast2968 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_BLANK_in_synpred288_bashast2976 = new BitSet(new long[]{0x22206B3F80463D00L,0xCCC030166601412EL,0x00000000000004BFL});
	public static final BitSet FOLLOW_builtin_cond_in_synpred288_bashast2980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUALS_in_synpred292_bashast3037 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_EQUALS_in_synpred292_bashast3039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EQUALS_in_synpred293_bashast3049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_brace_expansion_in_synpred300_bashast3127 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_synpred301_bashast3132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_res_word_str_in_synpred302_bashast3137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_synpred303_bashast3150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_synpred304_bashast3155 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred305_bashast3168 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_brace_expansion_in_synpred309_bashast3194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_synpred310_bashast3199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_synpred311_bashast3204 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_num_in_synpred312_bashast3209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_synpred313_bashast3214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_expansion_in_synpred314_bashast3219 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_synpred315_bashast3239 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fname_in_synpred316_bashast3244 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_name_in_synpred337_bashast3370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_138_in_synpred349_bashast3394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_str_part_with_pound_in_synpred377_bashast3487 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BOP_in_synpred398_bashast3532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_no_res_word_part_in_synpred399_bashast3579 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_str_part_with_pound_in_synpred400_bashast3581 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_no_res_word_part_in_synpred402_bashast3591 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_str_part_with_pound_in_synpred403_bashast3593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bracket_pattern_match_in_synpred404_bashast3604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_extended_pattern_match_in_synpred405_bashast3609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_synpred406_bashast3614 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_synpred407_bashast3619 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_expansion_in_synpred408_bashast3624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bracket_pattern_match_in_synpred413_bashast3658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_extended_pattern_match_in_synpred414_bashast3660 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_synpred415_bashast3662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_synpred416_bashast3664 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_expansion_in_synpred417_bashast3666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dqstr_in_synpred418_bashast3668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sqstr_in_synpred419_bashast3670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_str_part_with_pound_in_synpred420_bashast3675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_str_part_in_synpred421_bashast3673 = new BitSet(new long[]{0x22206B3B80462102L,0xC48001866600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_str_part_with_pound_in_synpred421_bashast3675 = new BitSet(new long[]{0x22206B3B80462102L,0xC48001866600010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_pattern_match_trigger_in_synpred422_bashast3679 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BANG_in_synpred423_bashast3681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bracket_pattern_match_in_synpred425_bashast3713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_extended_pattern_match_in_synpred426_bashast3718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_var_ref_in_synpred427_bashast3723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_command_sub_in_synpred428_bashast3728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_expansion_in_synpred429_bashast3733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dq_str_part_in_synpred430_bashast3738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pattern_match_trigger_in_synpred431_bashast3743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_synpred440_bashast3813 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_synpred440_bashast3815 = new BitSet(new long[]{0x0000000000020800L});
	public static final BitSet FOLLOW_set_in_synpred440_bashast3817 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_pattern_match_in_synpred440_bashast3823 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_RSQUARE_in_synpred440_bashast3826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_synpred442_bashast3842 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RSQUARE_in_synpred442_bashast3844 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_pattern_match_in_synpred442_bashast3846 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_RSQUARE_in_synpred442_bashast3849 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LSQUARE_in_synpred445_bashast3865 = new BitSet(new long[]{0x0000000000020800L});
	public static final BitSet FOLLOW_set_in_synpred445_bashast3867 = new BitSet(new long[]{0x22206B3B80462100L,0xC48000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_pattern_match_in_synpred445_bashast3873 = new BitSet(new long[]{0x22206B3B80462100L,0xC4C000066601010EL,0x00000000000004B6L});
	public static final BitSet FOLLOW_RSQUARE_in_synpred445_bashast3876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_str_part_with_pound_in_synpred448_bashast3920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetics_in_synpred492_bashast4230 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_arithmetic_condition_in_synpred496_bashast4268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_post_inc_dec_in_synpred507_bashast4398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_primary_in_synpred509_bashast4408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred522_bashast4481 = new BitSet(new long[]{0x0000000000001000L,0x0400000200000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_synpred522_bashast4484 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_synpred522_bashast4494 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_exponential_in_synpred522_bashast4498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred526_bashast4510 = new BitSet(new long[]{0x0000000000001000L,0x0000001002000000L});
	public static final BitSet FOLLOW_set_in_synpred526_bashast4514 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_synpred526_bashast4521 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_tdm_in_synpred526_bashast4525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred530_bashast4537 = new BitSet(new long[]{0x0000000000001000L,0x0020000000008000L});
	public static final BitSet FOLLOW_set_in_synpred530_bashast4541 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_synpred530_bashast4549 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_addsub_in_synpred530_bashast4553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred536_bashast4565 = new BitSet(new long[]{0xC000000000001000L,0x0000000000020040L});
	public static final BitSet FOLLOW_set_in_synpred536_bashast4569 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_synpred536_bashast4582 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_shifts_in_synpred536_bashast4586 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred539_bashast4599 = new BitSet(new long[]{0x0000000000001020L});
	public static final BitSet FOLLOW_AMP_in_synpred539_bashast4603 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_synpred539_bashast4606 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_compare_in_synpred539_bashast4610 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred542_bashast4623 = new BitSet(new long[]{0x0000000000021000L});
	public static final BitSet FOLLOW_CARET_in_synpred542_bashast4627 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_synpred542_bashast4630 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_bitwiseand_in_synpred542_bashast4634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred545_bashast4647 = new BitSet(new long[]{0x0000000000001000L,0x0000000800000000L});
	public static final BitSet FOLLOW_PIPE_in_synpred545_bashast4651 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_synpred545_bashast4654 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_bitwisexor_in_synpred545_bashast4658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred548_bashast4669 = new BitSet(new long[]{0x0000000000001000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LOGICAND_in_synpred548_bashast4673 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_synpred548_bashast4676 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_bitwiseor_in_synpred548_bashast4680 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLANK_in_synpred551_bashast4692 = new BitSet(new long[]{0x0000000000001000L,0x0000000000002000L});
	public static final BitSet FOLLOW_LOGICOR_in_synpred551_bashast4696 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_BLANK_in_synpred551_bashast4699 = new BitSet(new long[]{0x0000000580001800L,0x0000001046004108L,0x0000000000000403L});
	public static final BitSet FOLLOW_logicand_in_synpred551_bashast4703 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_name_in_synpred555_bashast4752 = new BitSet(new long[]{0x0000080000001100L});
	public static final BitSet FOLLOW_BLANK_in_synpred555_bashast4754 = new BitSet(new long[]{0x0000080000001100L});
	public static final BitSet FOLLOW_set_in_synpred555_bashast4758 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_synpred555_bashast4766 = new BitSet(new long[]{0x0000000000001002L});
	public static final BitSet FOLLOW_BLANK_in_synpred557_bashast4790 = new BitSet(new long[]{0x0000000000000002L});
}
